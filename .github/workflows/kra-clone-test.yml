name: KRA clone
# This test will create primary CA and KRA instances, clone
# clone them into secondary CA and KRA instances, then the
# secondary CA and KRA instances into tertiary CA and KRA
# instances. Each instance will have its own DS instance.
# Each subsystem will have its own DS backend and replication
# agreements.
#
# docs/installation/kra/installing-kra-clone.adoc

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=primaryds.example.com \
              --network=example \
              --network-alias=primaryds.example.com \
              --password=Secret.123 \
              primaryds

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=primary.example.com \
              --network=example \
              --network-alias=primary.example.com \
              primary

      - name: Install primary CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://primaryds.example.com:3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Install primary KRA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://primaryds.example.com:3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Check schema in primary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b cn=schema \
              -o ldif_wrap=no \
              -LLL \
              objectClasses attributeTypes \
              | grep "\-oid" \
              | sort \
              | tee primaryds.schema

      - name: Check initial replica range config in primary KRA
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-config.sh primary | tee output

          # primary range should be 1-100 initially
          cat > expected << EOF
          dbs.beginReplicaNumber=1
          dbs.endReplicaNumber=100
          dbs.replicaCloneTransferNumber=5
          dbs.replicaIncrement=100
          dbs.replicaLowWaterMark=20
          EOF

          diff expected output

      - name: Check initial KRA replica range objects
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-objects.sh primaryds | tee output

          # there should be no range allocations
          diff /dev/null output

      - name: Check initial KRA replica next range
        if: always()
        run: |
          tests/kra/bin/kra-replica-next-range.sh primaryds | tee output

          # next range should start from 1000
          # see ou=replica in base/kra/database/ds/create.ldif
          cat > expected << EOF
          nextRange: 1000
          EOF

          diff expected output

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=secondaryds.example.com \
              --network=example \
              --network-alias=secondaryds.example.com \
              --password=Secret.123 \
              secondaryds

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=secondary.example.com \
              --network=example \
              --network-alias=secondary.example.com \
              secondary

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt

          docker exec primary pki-server ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://secondaryds.example.com:3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Install KRA in secondary PKI container
        run: |
          docker exec primary pki-server kra-clone-prepare \
              --pkcs12-file $SHARED/kra-certs.p12 \
              --pkcs12-password Secret.123

          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-clone.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/kra-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://secondaryds.example.com:3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Check schema in secondary DS
        if: always()
        run: |
          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b cn=schema \
              -o ldif_wrap=no \
              -LLL \
              objectClasses attributeTypes \
              | grep "\-oid" | sort | tee secondaryds.schema

          diff primaryds.schema secondaryds.schema

      - name: Check KRA replica object on primary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=replica,cn=dc\3Dkra\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL \
              | tee output

          # primary DS should have replica ID 96
          echo "96" > expected
          sed -n 's/^nsDS5ReplicaId:\s*\(\S\+\)\s*$/\1/p' output > actual

          diff expected actual

      - name: Check KRA replica object on secondary DS
        if: always()
        run: |
          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=replica,cn=dc\3Dkra\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL \
              | tee output

          # secondary DS should have replica ID 97
          echo "97" > expected
          sed -n 's/^nsDS5ReplicaId:\s*\(\S\+\)\s*$/\1/p' output > actual

          diff expected actual

      - name: Check KRA replication agreement on primary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=masterAgreement1-secondary.example.com-pki-tomcat,cn=replica,cn=dc\3Dkra\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check KRA replication agreement on secondary DS
        if: always()
        run: |
          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=cloneAgreement1-secondary.example.com-pki-tomcat,cn=replica,cn=dc\3Dkra\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replica range config in primary KRA after cloning
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-config.sh primary | tee output

          # 5 numbers were transfered to secondary range
          # so now primary range should be 1-95
          cat > expected << EOF
          dbs.beginReplicaNumber=1
          dbs.endReplicaNumber=95
          dbs.replicaCloneTransferNumber=5
          dbs.replicaIncrement=100
          dbs.replicaLowWaterMark=20
          EOF

          diff expected output

      - name: Check replica range config in secondary KRA
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-config.sh secondary | tee output

          # secondary range should be 96-100 initially
          # first two numbers were assigned to primary DS and secondary DS
          # so now secondary range should be 98-100
          cat > expected << EOF
          dbs.beginReplicaNumber=98
          dbs.endReplicaNumber=100
          dbs.replicaCloneTransferNumber=5
          dbs.replicaIncrement=100
          dbs.replicaLowWaterMark=20
          EOF

          diff expected output

      - name: Check KRA replica range objects
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-objects.sh primaryds | tee output

          # there should be no range allocations
          diff /dev/null output

      - name: Check KRA replica next range
        if: always()
        run: |
          tests/kra/bin/kra-replica-next-range.sh primaryds | tee output

          # next range should start from 1000
          cat > expected << EOF
          nextRange: 1000
          EOF

      - name: Verify KRA admin in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12

          docker exec secondary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec secondary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin kra-user-show kraadmin

      - name: Set up tertiary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=tertiaryds.example.com \
              --network=example \
              --network-alias=tertiaryds.example.com \
              --password=Secret.123 \
              tertiaryds

      - name: Set up tertiary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=tertiary.example.com \
              --network=example \
              --network-alias=tertiary.example.com \
              tertiary

      - name: Install CA in tertiary PKI container
        run: |
          docker exec secondary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt

          docker exec secondary pki-server ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://tertiaryds.example.com:3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Install KRA in tertiary PKI container
        run: |
          docker exec secondary pki-server kra-clone-prepare \
              --pkcs12-file $SHARED/kra-certs.p12 \
              --pkcs12-password Secret.123

          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-clone-of-clone.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/kra-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://tertiaryds.example.com:3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Check schema in tertiary DS
        if: always()
        run: |
          docker exec tertiaryds ldapsearch \
              -H ldap://tertiaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b cn=schema \
              -o ldif_wrap=no \
              -LLL \
              objectClasses attributeTypes \
              | grep "\-oid" | sort | tee tertiaryds.schema

          diff secondaryds.schema tertiaryds.schema

      - name: Check replication manager on tertiary DS
        if: always()
        run: |
          docker exec tertiaryds ldapsearch \
              -H ldap://tertiaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=Replication Manager cloneAgreement1-tertiary.example.com-pki-tomcat,ou=csusers,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check KRA replica object on tertiary DS
        if: always()
        run: |
          docker exec tertiaryds ldapsearch \
              -H ldap://tertiaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=replica,cn=dc\3Dkra\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL \
              | tee output

          # tertiary DS should have replica ID 1095
          echo "1095" > expected
          sed -n 's/^nsDS5ReplicaId:\s*\(\S\+\)\s*$/\1/p' output > actual

          diff expected actual

      - name: Check KRA replication agreement on tertiary DS
        if: always()
        run: |
          docker exec tertiaryds ldapsearch \
              -H ldap://tertiaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=cloneAgreement1-tertiary.example.com-pki-tomcat,cn=replica,cn=dc\3Dkra\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replica range config in secondary KRA after cloning
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-config.sh secondary | tee output

          # secondary range should remain 98-100
          # next secondary range should be 1000-1099 initially
          # 5 numbers were transferred to tertiary range
          # so now next secondary range should be 1000-1094
          cat > expected << EOF
          dbs.beginReplicaNumber=98
          dbs.endReplicaNumber=100
          dbs.nextBeginReplicaNumber=1000
          dbs.nextEndReplicaNumber=1094
          dbs.replicaCloneTransferNumber=5
          dbs.replicaIncrement=100
          dbs.replicaLowWaterMark=20
          EOF

          diff expected output

      - name: Check replica range config in tertiary KRA
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-config.sh tertiary | tee output

          # tertiary range should be 1095-1099 initially
          # first number is assigned to the tertiary DS
          # so now tertiary range should be 1096-1099
          cat > expected << EOF
          dbs.beginReplicaNumber=1096
          dbs.endReplicaNumber=1099
          dbs.replicaCloneTransferNumber=5
          dbs.replicaIncrement=100
          dbs.replicaLowWaterMark=20
          EOF

          diff expected output

      - name: Check KRA replica range objects
        if: always()
        run: |
          tests/kra/bin/kra-replica-range-objects.sh primaryds | tee output

          # 1000-1099 should be allocated to secondary range
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 1000
          endRange: 1099
          host: secondary.example.com

          EOF

          diff expected output

      - name: Check KRA replica next range
        if: always()
        run: |
          tests/kra/bin/kra-replica-next-range.sh primaryds | tee output

          # next range should start from 1100
          cat > expected << EOF
          nextRange: 1100
          EOF

          diff expected output

      - name: Verify KRA admin in tertiary PKI container
        run: |
          docker exec tertiary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec tertiary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tertiary pki -n caadmin kra-user-show kraadmin

      - name: Run PKI healthcheck in primary container
        run: docker exec primary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in secondary container
        run: docker exec secondary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in tertiary container
        run: docker exec tertiary pki-healthcheck --failures-only

      - name: Remove KRA from tertiary PKI container
        run: docker exec tertiary pkidestroy -s KRA -v

      - name: Remove CA from tertiary PKI container
        run: docker exec tertiary pkidestroy -s CA -v

      - name: Remove KRA from secondary PKI container
        run: docker exec secondary pkidestroy -s KRA -v

      - name: Remove CA from secondary PKI container
        run: docker exec secondary pkidestroy -s CA -v

      - name: Remove KRA from primary PKI container
        run: docker exec primary pkidestroy -s KRA -v

      - name: Remove CA from primary PKI container
        run: docker exec primary pkidestroy -s CA -v

      - name: Check PKI server systemd journal in primary container
        if: always()
        run: |
          docker exec primary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check primary CA debug log
        if: always()
        run: |
          docker exec primary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check primary KRA debug log
        if: always()
        run: |
          docker exec primary find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;

      - name: Check PKI server systemd journal in secondary container
        if: always()
        run: |
          docker exec secondary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check secondary CA debug log
        if: always()
        run: |
          docker exec secondary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check secondary KRA debug log
        if: always()
        run: |
          docker exec secondary find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;

      - name: Check PKI server systemd journal in tertiary container
        if: always()
        run: |
          docker exec tertiary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check tertiary CA debug log
        if: always()
        run: |
          docker exec tertiary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check tertiary KRA debug log
        if: always()
        run: |
          docker exec tertiary find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;
