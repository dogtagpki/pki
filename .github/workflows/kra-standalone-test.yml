name: Standalone KRA

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-kra-runner-${{ inputs.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Install KRA (step 1)
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step1.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Issue KRA storage cert
        run: |
          docker exec pki openssl req -text -noout -in kra_storage.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_storage.csr \
              --ext /usr/share/pki/server/certs/kra_storage.conf \
              --cert kra_storage.crt
          docker exec pki openssl x509 -text -noout -in kra_storage.crt

      - name: Issue KRA transport cert
        run: |
          docker exec pki openssl req -text -noout -in kra_transport.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_transport.csr \
              --ext /usr/share/pki/server/certs/kra_transport.conf \
              --cert kra_transport.crt
          docker exec pki openssl x509 -text -noout -in kra_transport.crt

      - name: Issue subsystem cert
        run: |
          docker exec pki openssl req -text -noout -in subsystem.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec pki openssl req -text -noout -in sslserver.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Issue KRA audit signing cert
        run: |
          docker exec pki openssl req -text -noout -in kra_audit_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert kra_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in kra_audit_signing.crt

      - name: Issue KRA admin cert
        run: |
          docker exec pki openssl req -text -noout -in kra_admin.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert kra_admin.crt
          docker exec pki openssl x509 -text -noout -in kra_admin.crt

      - name: Install KRA (step 2)
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step2.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec pki pki-healthcheck --failures-only

      - name: Verify admin user
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n kraadmin kra-user-show kraadmin

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-standalone-${{ inputs.os }}
          path: |
            /tmp/artifacts/pki
