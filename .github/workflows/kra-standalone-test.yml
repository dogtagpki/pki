name: Standalone KRA
# This test will install a standalone CA and a standalone KRA without
# the security domain, enroll a cert without KRA connector, then enroll
# another cert with KRA connector.
#
# https://github.com/dogtagpki/pki/wiki/Installing-Standalone-KRA

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh \
              --hostname=client.example.com \
              --network=example \
              client

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=ca.example.com \
              --network=example \
              --network-alias=ca.example.com \
              ca

      - name: Install standalone CA
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_security_domain_setup=False \
              -v

      - name: Import CA certs into client
        run: |
          # export CA signing cert
          docker exec ca pki-server cert-export \
              --cert-file $SHARED/ca_signing.crt \
              ca_signing

          # import CA signing cert
          docker exec client pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C

          # export CA admin cert and key
          docker exec ca cp \
              /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              $SHARED/ca_admin_cert.p12

          # import CA admin cert and key
          docker exec client pki pkcs12-import \
              --pkcs12 $SHARED/ca_admin_cert.p12 \
              --password Secret.123

      - name: Check CA admin
        run: |
          # check CA admin user
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-show \
              caadmin

          # check CA admin roles
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-membership-find \
              caadmin

      - name: Check CA users
        run: |
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-find

      - name: Check CA security domain
        run: |
          docker exec ca pki-server ca-config-find | grep ^securitydomain. | sort | tee actual

          # security domain should be disabled
          diff /dev/null actual

          docker exec client pki \
              -U https://ca.example.com:8443 \
              securitydomain-show \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # REST API should not return security domain info
          echo "ResourceNotFoundException: " > expected
          diff expected stderr

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=kra.example.com \
              --network=example \
              --network-alias=kra.example.com \
              kra

      - name: Install standalone KRA (step 1)
        run: |
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step1.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_storage_csr_path=${SHARED}/kra_storage.csr \
              -D pki_transport_csr_path=${SHARED}/kra_transport.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/kra_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/kra_admin.csr \
              -D pki_security_domain_setup=False \
              -v

      - name: Check KRA system and admin CSRs
        run: |
          docker exec client openssl req -text -noout -in $SHARED/kra_storage.csr
          docker exec client openssl req -text -noout -in $SHARED/kra_transport.csr
          docker exec client openssl req -text -noout -in $SHARED/subsystem.csr
          docker exec client openssl req -text -noout -in $SHARED/sslserver.csr
          docker exec client openssl req -text -noout -in $SHARED/kra_audit_signing.csr
          docker exec client openssl req -text -noout -in $SHARED/kra_admin.csr

      - name: Issue KRA system and admin certs
        run: |
          docker exec -i client pki \
              -v \
              -U https://ca.example.com:8443 \
              -n caadmin \
              - << EOF

          # issue KRA storage cert
          ca-cert-issue \
              --profile caStorageCert \
              --csr-file $SHARED/kra_storage.csr \
              --output-file $SHARED/kra_storage.crt

          # issue KRA transport cert
          ca-cert-issue \
              --profile caTransportCert \
              --csr-file $SHARED/kra_transport.csr \
              --output-file $SHARED/kra_transport.crt

          # issue subsystem cert
          ca-cert-issue \
              --profile caSubsystemCert \
              --csr-file $SHARED/subsystem.csr \
              --output-file $SHARED/subsystem.crt

          # issue SSL server cert
          ca-cert-issue \
              --profile caServerCert \
              --csr-file $SHARED/sslserver.csr \
              --output-file $SHARED/sslserver.crt

          # issue KRA audit signing cert
          ca-cert-issue \
              --profile caAuditSigningCert \
              --csr-file $SHARED/kra_audit_signing.csr \
              --output-file $SHARED/kra_audit_signing.crt

          # issue KRA admin cert
          ca-cert-issue \
              --profile AdminCert \
              --csr-file $SHARED/kra_admin.csr \
              --output-file $SHARED/kra_admin.crt
          EOF

      - name: Check KRA system and admin certs
        run: |
          docker exec client openssl x509 -text -noout -in $SHARED/kra_storage.crt
          docker exec client openssl x509 -text -noout -in $SHARED/kra_transport.crt
          docker exec client openssl x509 -text -noout -in $SHARED/subsystem.crt
          docker exec client openssl x509 -text -noout -in $SHARED/sslserver.crt
          docker exec client openssl x509 -text -noout -in $SHARED/kra_audit_signing.crt
          docker exec client openssl x509 -text -noout -in $SHARED/kra_admin.crt

      - name: Stop CA
        run: |
          # ensure KRA installation can complete without a running CA
          docker exec ca pki-server stop --wait

      - name: Install standalone KRA (step 2)
        run: |
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step2.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_storage_csr_path=${SHARED}/kra_storage.csr \
              -D pki_transport_csr_path=${SHARED}/kra_transport.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/kra_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/kra_admin.csr \
              -D pki_storage_cert_path=${SHARED}/kra_storage.crt \
              -D pki_transport_cert_path=${SHARED}/kra_transport.crt \
              -D pki_subsystem_cert_path=${SHARED}/subsystem.crt \
              -D pki_sslserver_cert_path=${SHARED}/sslserver.crt \
              -D pki_audit_signing_cert_path=${SHARED}/kra_audit_signing.crt \
              -D pki_admin_cert_path=${SHARED}/kra_admin.crt \
              -D pki_security_domain_setup=False \
              -v

      - name: Check KRA server status
        run: |
          docker exec kra pki-server status | tee output

          sed -n \
            -e '/^ *SD Manager:/p' \
            -e '/^ *SD Name:/p' \
            -e '/^ *SD Registration URL:/p' \
            output > actual

          # security domain should be disabled
          diff /dev/null actual

      - name: Check KRA system certs
        run: |
          docker exec kra pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec kra pki-healthcheck --failures-only

      - name: Start CA
        run: |
          docker exec ca pki-server start --wait

      - name: Import KRA certs into client
        run: |
          # import transport cert
          docker exec client pki nss-cert-import \
              --cert $SHARED/kra_transport.crt \
              kra_transport

          # export KRA admin cert and key
          docker exec kra cp \
              /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              $SHARED/kra_admin_cert.p12

          # import KRA admin cert and key
          docker exec client pki pkcs12-import \
              --pkcs12 $SHARED/kra_admin_cert.p12 \
              --password Secret.123

      - name: Check KRA admin
        run: |
          # check KRA admin user
          docker exec client pki \
              -U https://kra.example.com:8443 \
              -n kraadmin \
              kra-user-show \
              kraadmin

          # check KRA admin roles
          docker exec client pki \
              -U https://kra.example.com:8443 \
              -n kraadmin \
              kra-user-membership-find \
              kraadmin

      - name: Check KRA users
        run: |
          docker exec client pki \
              -U https://kra.example.com:8443 \
              -n kraadmin \
              kra-user-find

      - name: Check KRA security domain
        run: |
          docker exec kra pki-server kra-config-find | grep ^securitydomain. | sort | tee actual

          # security domain should be disabled
          diff /dev/null actual

      - name: Check KRA connector in CA
        run: |
          docker exec ca pki-server ca-config-find | grep ^ca\.connector.KRA\. | tee output

          # KRA connector should not be configured
          diff /dev/null output

          # allow CA admin to manage KRA connector
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-membership-add \
              caadmin \
              "Enterprise KRA Administrators"

          # KRA connector should not be configured
          docker exec ca pki-server ca-connector-find | tee output
          diff /dev/null output

          # get KRA connector info via REST API
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-kraconnector-show \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # REST API should not return KRA connector info
          echo "ConnectorNotFoundException: No KRA connectors" > expected
          diff expected stderr

      - name: Check cert enrollment without KRA
        run: |
          # generate key and cert request
          docker exec client pki \
              nss-cert-request \
              --type crmf \
              --subject UID=testuser1 \
              --transport kra_transport \
              --csr testuser1.csr

          # issue cert
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -u caadmin \
              -w Secret.123 \
              ca-cert-issue \
              --request-type crmf \
              --profile caUserCert \
              --subject UID=testuser1 \
              --csr-file testuser1.csr \
              --output-file testuser1.crt \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # operation should fail
          echo "PKIException: Server Internal Error: KRA connector not configured" > expected
          diff expected stderr

      - name: Add CA subsystem user in KRA
        run: |
          # export CA subsystem cert
          docker exec ca pki-server cert-export \
              --cert-file $SHARED/ca_subsystem.crt \
              subsystem

          # create CA subsystem user in KRA
          docker exec client pki \
              -U https://kra.example.com:8443 \
              -n kraadmin \
              kra-user-add \
              --fullName "CA" \
              --type agentType \
              --cert-file $SHARED/ca_subsystem.crt \
              CA

          # allow CA to archive key in KRA
          docker exec client pki \
              -U https://kra.example.com:8443 \
              -n kraadmin \
              kra-user-membership-add \
              CA \
              "Trusted Managers"

      - name: Add KRA connector in CA
        run: |
          # export transport cert
          TRANSPORT_CERT=$(docker exec client pki nss-cert-export \
              --format DER \
              kra_transport \
              | base64 --wrap=0)

          tee input.json << EOF
          {
              "host": "kra.example.com",
              "port": "8443",
              "transportCert": "$TRANSPORT_CERT"
          }
          EOF

          # add KRA connector
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-kraconnector-add \
              --input-file $SHARED/input.json

          docker exec ca pki-server ca-config-find | grep ^ca\.connector.KRA\. | tee output

          # KRA connector should be configured
          cat > expected << EOF
          ca.connector.KRA.enable=true
          ca.connector.KRA.host=kra.example.com
          ca.connector.KRA.local=false
          ca.connector.KRA.nickName=subsystem
          ca.connector.KRA.port=8443
          ca.connector.KRA.timeout=30
          ca.connector.KRA.transportCert=$TRANSPORT_CERT
          ca.connector.KRA.uri=/kra/agent/kra/connector
          EOF

          diff expected output

      - name: Check cert enrollment with KRA
        run: |
          # generate key and cert request
          docker exec client pki \
              nss-cert-request \
              --type crmf \
              --subject UID=testuser2 \
              --transport kra_transport \
              --csr testuser2.csr

          # issue cert
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -u caadmin \
              -w Secret.123 \
              ca-cert-issue \
              --request-type crmf \
              --profile caUserCert \
              --subject UID=testuser2 \
              --csr-file testuser2.csr \
              --output-file testuser2.crt

          docker exec client openssl x509 \
              -text \
              -noout \
              -in testuser2.crt

      - name: Remove KRA
        run: docker exec kra pkidestroy -s KRA -v

      - name: Remove CA
        run: docker exec ca pkidestroy -s CA -v

      - name: Check CA systemd journal
        if: always()
        run: |
          docker exec ca journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA access log
        if: always()
        run: |
          docker exec ca find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check CA debug log
        if: always()
        run: |
          docker exec ca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check KRA systemd journal
        if: always()
        run: |
          docker exec kra journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check KRA access log
        if: always()
        run: |
          docker exec kra find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check KRA debug log
        if: always()
        run: |
          docker exec kra find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;
