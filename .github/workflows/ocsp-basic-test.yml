name: Basic OCSP

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/ocsp/Installing_OCSP.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

          docker exec pki pki-server cert-find

      - name: Check security domain config in CA
        run: |
          # CA should run security domain service
          cat > expected << EOF
          securitydomain.checkIP=false
          securitydomain.checkinterval=300000
          securitydomain.flushinterval=86400000
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=new
          securitydomain.source=ldap
          EOF

          docker exec pki pki-server ca-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

          docker exec pki pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt

          # REST API should return security domain info
          cat > expected << EOF
            Domain: EXAMPLE

            CA Subsystem:

              Host ID: CA pki.example.com 8443
              Hostname: pki.example.com
              Port: 8080
              Secure Port: 8443
              Domain Manager: TRUE

          EOF
          docker exec pki pki securitydomain-show | tee output
          diff expected output

      - name: Install OCSP
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ocsp.cfg \
              -s OCSP \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Check PKI server base dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser alias -> /var/lib/pki/pki-tomcat/conf/alias
          lrwxrwxrwx pkiuser pkiuser bin -> /usr/share/tomcat/bin
          drwxrwx--- pkiuser pkiuser ca
          drwxrwx--- pkiuser pkiuser common
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/pki-tomcat
          lrwxrwxrwx pkiuser pkiuser lib -> /usr/share/pki/server/lib
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser ocsp
          drwxrwx--- pkiuser pkiuser temp
          drwxr-xr-x pkiuser pkiuser webapps
          drwxrwx--- pkiuser pkiuser work
          EOF

          diff expected output

      - name: Check PKI server conf dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          drwxrwx--- pkiuser pkiuser ocsp
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          -rw-rw---- pkiuser pkiuser tomcat.conf
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check PKI server logs dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # TODO: review permissions
          cat > expected << EOF
          drwxr-x--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxrwx--- pkiuser pkiuser ocsp
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Check OCSP base dir
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat/ocsp \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser alias -> /var/lib/pki/pki-tomcat/alias
          lrwxrwxrwx pkiuser pkiuser conf -> /var/lib/pki/pki-tomcat/conf/ocsp
          lrwxrwxrwx pkiuser pkiuser logs -> /var/lib/pki/pki-tomcat/logs/ocsp
          lrwxrwxrwx pkiuser pkiuser registry -> /etc/sysconfig/pki/tomcat/pki-tomcat
          EOF

          diff expected output

      - name: Check OCSP conf dir
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat/conf/ocsp \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          -rw-rw-r-- pkiuser pkiuser CS.cfg
          -rw-rw-r-- pkiuser pkiuser registry.cfg
          EOF

          diff expected output

      - name: Check PKI server status
        run: |
          docker exec pki pki-server status | tee output

          # CA should be a domain manager, but OCSP should not
          echo "True" > expected
          echo "False" >> expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check security domain config in OCSP
        run: |
          # OCSP should join security domain in CA
          cat > expected << EOF
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=existing
          EOF

          docker exec pki pki-server ocsp-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

      - name: Check OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ocsp_signing \
              --cert-file ocsp_signing.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/ocsp_signing.csr
          docker exec pki openssl x509 -text -noout -in ocsp_signing.crt

      - name: Check OCSP audit signing cert
        run: |
          docker exec pki pki-server cert-export ocsp_audit_signing \
              --cert-file ocsp_audit_signing.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/ocsp_audit_signing.csr
          docker exec pki openssl x509 -text -noout -in ocsp_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem \
              --cert-file subsystem.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/subsystem.csr
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver \
              --cert-file sslserver.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/sslserver.csr
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check OCSP admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Check OCSP publishing in CA
        run: |
          docker exec pki pki-server ca-config-find | grep ^ca.publish. | sort > output

          cat > expected << EOF
          ca.publish.enable=true
          EOF
          sed -n '/^ca.publish.enable=/p' output | tee actual
          diff expected actual

          cat > expected << EOF
          ca.publish.publisher.instance.OCSPPublisher-pki-example-com-8443.enableClientAuth=true
          ca.publish.publisher.instance.OCSPPublisher-pki-example-com-8443.host=pki.example.com
          ca.publish.publisher.instance.OCSPPublisher-pki-example-com-8443.nickName=subsystem
          ca.publish.publisher.instance.OCSPPublisher-pki-example-com-8443.path=/ocsp/agent/ocsp/addCRL
          ca.publish.publisher.instance.OCSPPublisher-pki-example-com-8443.pluginName=OCSPPublisher
          ca.publish.publisher.instance.OCSPPublisher-pki-example-com-8443.port=8443
          EOF
          sed -n '/^ca.publish.publisher.instance.OCSPPublisher-/p' output | tee actual
          diff expected actual

          cat > expected << EOF
          ca.publish.rule.instance.ocsprule-pki-example-com-8443.enable=true
          ca.publish.rule.instance.ocsprule-pki-example-com-8443.mapper=NoMap
          ca.publish.rule.instance.ocsprule-pki-example-com-8443.pluginName=Rule
          ca.publish.rule.instance.ocsprule-pki-example-com-8443.publisher=OCSPPublisher-pki-example-com-8443
          ca.publish.rule.instance.ocsprule-pki-example-com-8443.type=crl
          EOF
          sed -n '/^ca.publish.rule.instance.ocsprule-/p' output | tee actual
          diff expected actual

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec pki pki-server ca-crl-ip-mod -D alwaysUpdate=true MasterCRL

          # restart CA subsystem
          docker exec pki pki-server ca-redeploy --wait

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Check OCSP responder with no CRLs
        run: |
          # create CA agent and its cert
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh

          # get cert serial number
          docker exec pki pki nss-cert-show caagent | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # check cert status using OCSPClient
          docker exec pki OCSPClient \
              -d /root/.dogtag/nssdb \
              -h pki.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # the responder should fail
          sed -n "s/^SEVERE:\s*\(\S*\)/\1/p" stderr > actual
          echo "InvalidBERException: Incorrect tag: expected [UNIVERSAL 16], found [UNIVERSAL 28]" > expected
          diff expected actual

          # check cert status using OpenSSL
          docker exec pki openssl ocsp \
              -url http://pki.example.com:8080/ocsp/ee/ocsp \
              -CAfile ca_signing.crt \
              -issuer ca_signing.crt \
              -serial $CERT_ID \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # remove the random parts of stderr so it can be compared
          sed -i "s/^[^:]*:error:/error:/g" stderr

          # remove file names and line numbers so it can be compared
          sed -i "s/^\([^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\)[^:]*:[^:]*:/\1/" stderr

          # the responder should fail
          echo "Error querying OCSP responder" > expected
          echo "error:1E800076:HTTP routines:OSSL_HTTP_REQ_CTX_nbio:unexpected content type:expected=application/ocsp-response, actual=text/html" >> expected
          echo "error:1E800067:HTTP routines:OSSL_HTTP_REQ_CTX_exchange:error receiving:server=http://pki.example.com:8080" >> expected

          diff expected stderr

      - name: Check OCSP responder with revoked cert
        run: |
          # revoke CA agent cert
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh

          sleep 5

          # get cert serial number
          docker exec pki pki nss-cert-show caagent | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # check cert status using OCSPClient
          docker exec pki OCSPClient \
              -d /root/.dogtag/nssdb \
              -h pki.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # the status should be revoked
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Revoked > expected
          diff expected actual

          # check cert status using OpenSSL
          docker exec pki openssl ocsp \
              -url http://pki.example.com:8080/ocsp/ee/ocsp \
              -CAfile ca_signing.crt \
              -issuer ca_signing.crt \
              -serial $CERT_ID | tee output

          # the status should be revoked
          sed -n "s/^$CERT_ID:\s*\(\S*\)$/\1/p" output > actual
          echo revoked > expected
          diff expected actual

      - name: Check OCSP responder with unrevoked cert
        run: |
          # unrevoke CA agent cert
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

          # get cert serial number
          docker exec pki pki nss-cert-show caagent | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # check cert status using OCSPClient
          docker exec pki OCSPClient \
              -d /root/.dogtag/nssdb \
              -h pki.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # the status should be good
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Good > expected
          diff expected actual

          # check cert status using OpenSSL
          docker exec pki openssl ocsp \
              -url http://pki.example.com:8080/ocsp/ee/ocsp \
              -CAfile ca_signing.crt \
              -issuer ca_signing.crt \
              -serial $CERT_ID | tee output

          # the status should be good
          sed -n "s/^$CERT_ID:\s*\(\S*\)$/\1/p" output > actual
          echo good > expected
          diff expected actual

      - name: Check OCSP responder with non existing cert
        run: |
          # get cert serial number
          CERT_ID=0x1
          docker exec pki pki ca-cert-show $CERT_ID || true

          # check cert status on OCSP subsystem using OCSPClient
          docker exec pki OCSPClient \
              -d /root/.dogtag/nssdb \
              -h pki.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # the status should be good
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Good > expected
          diff expected actual

          # check cert status on OCSP using OpenSSL
          docker exec pki openssl ocsp \
              -url http://pki.example.com:8080/ocsp/ee/ocsp \
              -CAfile ca_signing.crt \
              -issuer ca_signing.crt \
              -serial $CERT_ID | tee output

          # the status should be good
          sed -n "s/^$CERT_ID:\s*\(\S*\)$/\1/p" output > actual
          echo good > expected
          diff expected actual

          # check cert status on CA subsystem using OCSPClient
          docker exec pki OCSPClient \
              -d /root/.dogtag/nssdb \
              -h pki.example.com \
              -p 8080 \
              -t /ca/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # the status should be unknown
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Unknown > expected
          diff expected actual

          # check cert status on CA using OpenSSL
          docker exec pki openssl ocsp \
              -url http://pki.example.com:8080/ca/ocsp \
              -CAfile ca_signing.crt \
              -issuer ca_signing.crt \
              -serial $CERT_ID | tee output

          # the status should be unknown
          sed -n "s/^$CERT_ID:\s*\(\S*\)$/\1/p" output > actual
          echo unknown > expected
          diff expected actual

      - name: Check OCSP responder with non managed CA
        run: |
          # get cert serial number
          docker exec pki pki nss-cert-show caagent | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # Generate a new self signed CA certificate and create a request
          docker exec pki openssl req \
              -newkey rsa:2048 -nodes \
              -keyout new_ca.key \
              -x509 -days 365 -out new_ca.crt \
              -subj "/O=EXAMPLE/OU=pki-tomcat/CN=CA Signing Certificate External"

          docker exec pki openssl ocsp -issuer new_ca.crt \
              -serial $CERT_ID -reqout ocsp_new_ca.req
          
          # check cert status using OCSPClient
          docker exec pki OCSPClient \
              -h pki.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              --input ocsp_new_ca.req | tee output

          # the status should be unknown
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Unknown > expected
          diff expected actual

          # check cert status using OpenSSL
          docker exec pki openssl ocsp \
              -url http://pki.example.com:8080/ocsp/ee/ocsp \
              -CAfile ca_signing.crt \
              -issuer new_ca.crt \
              -serial $CERT_ID | tee output

          # the status should be unknown
          sed -n "s/^$CERT_ID:\s*\(\S*\)$/\1/p" output > actual
          echo unknown > expected
          diff expected actual

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove OCSP
        run: docker exec pki pkidestroy -i pki-tomcat -s OCSP -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Check PKI server base dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          EOF

          diff expected output

      - name: Check PKI server conf dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/etc/pki/pki-tomcat': No such file or directory
          EOF

          diff expected stderr

      - name: Check PKI server logs dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # TODO: review permissions
          cat > expected << EOF
          drwxr-x--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxrwx--- pkiuser pkiuser ocsp
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ocsp-basic-test
          path: |
            /tmp/artifacts/pki
