name: OCSP Tests

on: [push, pull_request]

jobs:
  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Update container
        run: |
          dnf update -y
          dnf install -y dnf-plugins-core rpm-build git

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf copr enable -y @pki/master
          dnf builddep -y --allowerasing --spec ./pki.spec

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,ocsp --with-timestamp --with-commit-id --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS/

  # docs/installation/ocsp/Installing_OCSP.md
  ocsp-test:
    name: Installing OCSP
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Build container with systemd
        run: docker build ci -t pki --build-arg OS_VERSION=${{ matrix.os }}

      - name: Run container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Install PKI packages
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Install CA
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Install OCSP
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ocsp.cfg -s OCSP -v

      - name: Gather config files
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/pki-conf.tar -C / etc/pki

      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-conf-${{ matrix.os }}
          path: pki-conf.tar

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Remove OCSP
        run: docker exec pki pkidestroy -i pki-tomcat -s OCSP -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/pki-logs.tar -C / var/log/pki

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-logs-${{ matrix.os }}
          path: pki-logs.tar
