name: TPS Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,kra,tks,tps --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-tps-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-tps-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tps-runner.tar

  # docs/installation/tps/Installing_TPS.md
  tps-test:
    name: Testing TPS
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tps-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tps-runner.tar

      - name: Load runner image
        run: docker load --input pki-tps-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      - name: Install KRA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      - name: Install TKS
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec pki pki-server cert-find

      - name: Install TPS
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_authdb_hostname=ds.example.com \
              -D pki_authdb_port=3389 \
              -v

      - name: Check TPS audit signing cert
        run: |
          docker exec pki pki-server cert-export tps_audit_signing \
              --csr-file tps_audit_signing.csr \
              --cert-file tps_audit_signing.crt
          docker exec pki openssl req -text -noout -in tps_audit_signing.csr
          docker exec pki openssl x509 -text -noout -in tps_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem \
              --csr-file subsystem.csr \
              --cert-file subsystem.crt
          docker exec pki openssl req -text -noout -in subsystem.csr
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver \
              --csr-file sslserver.csr \
              --cert-file sslserver.crt
          docker exec pki openssl req -text -noout -in sslserver.csr
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check TPS admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify TPS admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin tps-user-show tpsadmin

      - name: Set up TPS authentication
        run: |
          #
          # import sample TPS users
          #
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/tps/auth/ds/create.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/tps/auth/ds/example.ldif
          #
          # configure TPS to use the sample TPS users
          #
          docker exec pki pki-server tps-config-set \
              auths.instance.ldap1.ldap.basedn \
              ou=people,dc=example,dc=com
          docker exec pki pki-server tps-undeploy --wait
          docker exec pki pki-server tps-deploy --wait

      - name: Verify TPS client
        run: |
          #
          # add unformatted token with random CUID
          #
          CUID=`hexdump -v -n "10" -e '1/1 "%02x"' /dev/urandom`
          echo "UNFORMATTED" > expected
          docker exec pki bash -c "pki -n caadmin tps-token-add $CUID | sed -n 's/\s*Status:\s\+\(\S\+\)\s*/\1/p' > ${SHARED}/actual"
          diff expected actual
          #
          # format the token
          #
          docker exec pki /usr/share/pki/tps/bin/pki-tps-format \
              --user=testuser \
              --password=Secret.123 \
              $CUID
          echo "FORMATTED" > expected
          docker exec pki bash -c "pki -n caadmin tps-token-show $CUID | sed -n 's/\s*Status:\s\+\(\S\+\)\s*/\1/p' > ${SHARED}/actual"
          diff expected actual
          #
          # enroll the token
          #
          docker exec pki /usr/share/pki/tps/bin/pki-tps-enroll \
              --user=testuser \
              --password=Secret.123 \
              $CUID
          echo "ACTIVE" > expected
          docker exec pki bash -c "pki -n caadmin tps-token-show $CUID | sed -n 's/\s*Status:\s\+\(\S\+\)\s*/\1/p' > ${SHARED}/actual"
          diff expected actual

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove TPS
        run: docker exec pki pkidestroy -i pki-tomcat -s TPS -v

      - name: Remove TKS
        run: docker exec pki pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  tps-separate-test:
    name: Testing TPS on separate instance
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tps-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tps-runner.tar

      - name: Load runner image
        run: docker load --input pki-tps-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh cads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: cads.example.com
          PASSWORD: Secret.123

      - name: Connect CA DS container to network
        run: docker network connect example cads --alias cads.example.com

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh ca
        env:
          HOSTNAME: ca.example.com

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install CA in CA container
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=cads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec ca pki-server cert-find

      - name: Install banner in CA container
        run: docker exec ca cp /usr/share/pki/server/examples/banner/banner.txt /etc/pki/pki-tomcat

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-container-create.sh krads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: krads.example.com
          PASSWORD: Secret.123

      - name: Connect KRA DS container to network
        run: docker network connect example krads --alias krads.example.com

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh kra
        env:
          HOSTNAME: kra.example.com

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install KRA in KRA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin.cert ${SHARED}/ca_admin.cert
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec kra pki-server cert-find

      - name: Install banner in KRA container
        run: docker exec kra cp /usr/share/pki/server/examples/banner/banner.txt /etc/pki/pki-tomcat

      - name: Set up TKS DS container
        run: |
          tests/bin/ds-container-create.sh tksds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tksds.example.com
          PASSWORD: Secret.123

      - name: Connect TKS DS container to network
        run: docker network connect example tksds --alias tksds.example.com

      - name: Set up TKS container
        run: |
          tests/bin/runner-init.sh tks
        env:
          HOSTNAME: tks.example.com

      - name: Connect TKS container to network
        run: docker network connect example tks --alias tks.example.com

      - name: Install TKS in TKS container
        run: |
          docker exec tks pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_hostname=tksds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec tks pki-server cert-find

      - name: Install banner in TKS container
        run: docker exec tks cp /usr/share/pki/server/examples/banner/banner.txt /etc/pki/pki-tomcat

      - name: Set up TPS DS container
        run: |
          tests/bin/ds-container-create.sh tpsds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tpsds.example.com
          PASSWORD: Secret.123

      - name: Connect TPS DS container to network
        run: docker network connect example tpsds --alias tpsds.example.com

      - name: Set up TPS container
        run: |
          tests/bin/runner-init.sh tps
        env:
          HOSTNAME: tps.example.com

      - name: Connect TPS container to network
        run: docker network connect example tps --alias tps.example.com

      - name: Install TPS in TPS container
        run: |
          docker exec tps pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ca_uri=https://ca.example.com:8443 \
              -D pki_kra_uri=https://kra.example.com:8443 \
              -D pki_tks_uri=https://tks.example.com:8443 \
              -D pki_ds_hostname=tpsds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_authdb_hostname=tpsds.example.com \
              -D pki_authdb_port=3389 \
              -v

          docker exec tps pki-server cert-find

      - name: Install banner in TPS container
        run: docker exec tps cp /usr/share/pki/server/examples/banner/banner.txt /etc/pki/pki-tomcat

      - name: Run PKI healthcheck
        run: docker exec tps pki-healthcheck --failures-only

      - name: Verify TPS admin
        run: |
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec tps pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec tps pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tps pki -n caadmin --ignore-banner tps-user-show tpsadmin

      - name: Gather artifacts from CA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/ca cads
          tests/bin/pki-artifacts-save.sh ca
        continue-on-error: true

      - name: Gather artifacts from KRA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/kra krads
          tests/bin/pki-artifacts-save.sh kra
        continue-on-error: true

      - name: Gather artifacts from TKS containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tks tksds
          tests/bin/pki-artifacts-save.sh tks
        continue-on-error: true

      - name: Gather artifacts from TPS containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tps tpsds
          tests/bin/pki-artifacts-save.sh tps
        continue-on-error: true

      - name: Remove TPS
        run: docker exec tps pkidestroy -i pki-tomcat -s TPS -v

      - name: Remove TKS
        run: docker exec tks pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove KRA
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from CA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-separate-ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/ca

      - name: Upload artifacts from KRA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-separate-kra-${{ matrix.os }}
          path: |
            /tmp/artifacts/kra

      - name: Upload artifacts from TKS containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-separate-tks-${{ matrix.os }}
          path: |
            /tmp/artifacts/tks

      - name: Upload artifacts from TPS containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-separate-tps-${{ matrix.os }}
          path: |
            /tmp/artifacts/tps

  tps-external-certs-test:
    name: Testing TPS with external certificates
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tps-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tps-runner.tar

      - name: Load runner image
        run: docker load --input pki-tps-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh cads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: cads.example.com
          PASSWORD: Secret.123

      - name: Connect CA DS container to network
        run: docker network connect example cads --alias cads.example.com

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh ca
        env:
          HOSTNAME: ca.example.com

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install CA in CA container
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=cads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec ca pki-server cert-find

      - name: Initialize CA admin in CA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-container-create.sh krads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: krads.example.com
          PASSWORD: Secret.123

      - name: Connect KRA DS container to network
        run: docker network connect example krads --alias krads.example.com

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh kra
        env:
          HOSTNAME: kra.example.com

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install KRA in KRA container
        run: |
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin.cert ${SHARED}/ca_admin.cert
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec kra pki-server cert-find

      - name: Set up TKS DS container
        run: |
          tests/bin/ds-container-create.sh tksds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tksds.example.com
          PASSWORD: Secret.123

      - name: Connect TKS DS container to network
        run: docker network connect example tksds --alias tksds.example.com

      - name: Set up TKS container
        run: |
          tests/bin/runner-init.sh tks
        env:
          HOSTNAME: tks.example.com

      - name: Connect TKS container to network
        run: docker network connect example tks --alias tks.example.com

      - name: Install TKS in TKS container
        run: |
          docker exec tks pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_hostname=tksds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec tks pki-server cert-find

      - name: Set up TPS DS container
        run: |
          tests/bin/ds-container-create.sh tpsds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tpsds.example.com
          PASSWORD: Secret.123

      - name: Connect TPS DS container to network
        run: docker network connect example tpsds --alias tpsds.example.com

      - name: Set up TPS container
        run: |
          tests/bin/runner-init.sh tps
        env:
          HOSTNAME: tps.example.com

      - name: Connect TPS container to network
        run: docker network connect example tps --alias tps.example.com

      - name: Install TPS in TPS container (step 1)
        run: |
          docker exec tps pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ca_uri=https://ca.example.com:8443 \
              -D pki_kra_uri=https://kra.example.com:8443 \
              -D pki_tks_uri=https://tks.example.com:8443 \
              -D pki_ds_hostname=tpsds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_authdb_hostname=tpsds.example.com \
              -D pki_authdb_port=3389 \
              -D pki_external=True \
              -D pki_external_step_two=False \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/tps_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/tps_admin.csr \
              -v

      - name: Issue subsystem cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/subsystem.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caSubsystemCert --csr-file ${SHARED}/subsystem.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/subsystem.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat subsystem.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/subsystem.certid"
          docker exec ca bash -c "pki ca-cert-export `cat subsystem.certid` --output-file ${SHARED}/subsystem.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/sslserver.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caServerCert --csr-file ${SHARED}/sslserver.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/sslserver.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat sslserver.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/sslserver.certid"
          docker exec ca bash -c "pki ca-cert-export `cat sslserver.certid` --output-file ${SHARED}/sslserver.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/sslserver.crt

      - name: Issue TPS audit signing cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/tps_audit_signing.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caAuditSigningCert --csr-file ${SHARED}/tps_audit_signing.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/tps_audit_signing.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat tps_audit_signing.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/tps_audit_signing.certid"
          docker exec ca bash -c "pki ca-cert-export `cat tps_audit_signing.certid` --output-file ${SHARED}/tps_audit_signing.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/tps_audit_signing.crt

      - name: Issue TPS admin cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/tps_admin.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caUserCert --csr-file ${SHARED}/tps_admin.csr --subject uid=tpsadmin | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/tps_admin.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat tps_admin.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/tps_admin.certid"
          docker exec ca bash -c "pki ca-cert-export `cat tps_admin.certid` --output-file ${SHARED}/tps_admin.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/tps_admin.crt

      - name: Install TPS in TPS container (step 2)
        run: |
          docker exec tps pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ca_uri=https://ca.example.com:8443 \
              -D pki_kra_uri=https://kra.example.com:8443 \
              -D pki_tks_uri=https://tks.example.com:8443 \
              -D pki_ds_hostname=tpsds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_authdb_hostname=tpsds.example.com \
              -D pki_authdb_port=3389 \
              -D pki_external=True \
              -D pki_external_step_two=True \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/tps_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/tps_admin.csr \
              -D pki_subsystem_cert_path=${SHARED}/subsystem.crt \
              -D pki_sslserver_cert_path=${SHARED}/sslserver.crt \
              -D pki_audit_signing_cert_path=${SHARED}/tps_audit_signing.crt \
              -D pki_admin_cert_path=${SHARED}/tps_admin.crt \
              -v

          docker exec tps pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec tps pki-healthcheck --failures-only

      - name: Verify TPS admin
        run: |
          docker exec tps pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec tps pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/tps_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tps pki -n tpsadmin tps-user-show tpsadmin

      - name: Gather artifacts from CA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/ca cads
          tests/bin/pki-artifacts-save.sh ca
        continue-on-error: true

      - name: Gather artifacts from KRA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/kra krads
          tests/bin/pki-artifacts-save.sh kra
        continue-on-error: true

      - name: Gather artifacts from TKS containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tks tksds
          tests/bin/pki-artifacts-save.sh tks
        continue-on-error: true

      - name: Gather artifacts from TPS containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tps tpsds
          tests/bin/pki-artifacts-save.sh tps
        continue-on-error: true

      - name: Remove TPS
        run: docker exec tps pkidestroy -i pki-tomcat -s TPS -v

      - name: Remove TKS
        run: docker exec tks pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove KRA
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from CA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-external-certs-ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/ca

      - name: Upload artifacts from KRA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-external-certs-kra-${{ matrix.os }}
          path: |
            /tmp/artifacts/kra

      - name: Upload artifacts from TKS containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-external-certs-tks-${{ matrix.os }}
          path: |
            /tmp/artifacts/tks

      - name: Upload artifacts from TPS containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-external-certs-tps-${{ matrix.os }}
          path: |
            /tmp/artifacts/tps

  # docs/installation/tps/Installing_TPS_Clone.md
  # This test installs DS, CA, KRA, TKS, and TPS in the primary containers,
  # then installs DS clone, CA clone, KRA clone, TKS clone, and TPS clone in the secondary containers.
  tps-clone-test:
    name: Testing TPS clone
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tps-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tps-runner.tar

      - name: Load runner image
        run: docker load --input pki-tps-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-container-create.sh primaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: primaryds.example.com
          PASSWORD: Secret.123

      - name: Connect primary DS container to network
        run: docker network connect example primaryds --alias primaryds.example.com

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh primary
        env:
          HOSTNAME: primary.example.com

      - name: Connect primary PKI container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec primary pki-server cert-find

      - name: Install KRA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec primary pki-server cert-find

      - name: Install TKS in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Install TPS in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_authdb_hostname=primaryds.example.com \
              -D pki_authdb_port=3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-container-create.sh secondaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: secondaryds.example.com
          PASSWORD: Secret.123

      - name: Connect secondary DS container to network
        run: docker network connect example secondaryds --alias secondaryds.example.com

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          HOSTNAME: secondary.example.com

      - name: Connect secondary PKI container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec primary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec secondary pki-server cert-find

      - name: Install KRA in secondary PKI container
        run: |
          docker exec primary pki-server kra-clone-prepare --pkcs12-file ${SHARED}/kra-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-clone.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/kra-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec secondary pki-server cert-find

      - name: Install TKS in secondary PKI container
        run: |
          docker exec primary pki-server tks-clone-prepare --pkcs12-file ${SHARED}/tks-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks-clone.cfg \
              -s TKS \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/tks-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Install TPS in secondary PKI container
        run: |
          docker exec primary pki-server tps-clone-prepare --pkcs12-file ${SHARED}/tps-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/tps-clone.cfg \
              -s TPS \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/tps-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_authdb_hostname=secondaryds.example.com \
              -D pki_authdb_port=3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Run PKI healthcheck in primary container
        run: docker exec primary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in secondary container
        run: docker exec secondary pki-healthcheck --failures-only

      - name: Verify admin user
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec secondary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec secondary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin tps-user-show tpsadmin

      - name: Gather artifacts from primary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/primary primaryds
          tests/bin/pki-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/secondary secondaryds
          tests/bin/pki-artifacts-save.sh secondary
        continue-on-error: true

      - name: Remove TPS from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s TPS -v

      - name: Remove TKS from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove KRA from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove TPS from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s TPS -v

      - name: Remove TKS from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove KRA from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from primary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-clone-primary-${{ matrix.os }}
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tps-clone-secondary-${{ matrix.os }}
          path: |
            /tmp/artifacts/secondary
