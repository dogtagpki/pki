name: Standalone OCSP
# This test will install a standalone CA and a standalone OCSP without
# the security domain, revoke a cert without CRL publishing, then revoke
# another cert with CRL publishing.
#
# https://github.com/dogtagpki/pki/wiki/Installing-Standalone-OCSP

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh \
              --hostname=client.example.com \
              --network=example \
              client

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=ca.example.com \
              --network=example \
              --network-alias=ca.example.com \
              ca

      - name: Install standalone CA
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_security_domain_setup=False \
              -v

      - name: Import CA certs into client
        run: |
          # export CA signing cert
          docker exec ca pki-server cert-export \
              --cert-file $SHARED/ca_signing.crt \
              ca_signing

          # import CA signing cert
          docker exec client pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          # export CA admin cert and key
          docker exec ca cp \
              /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              $SHARED/ca_admin_cert.p12

          # import CA admin cert and key
          docker exec client pki pkcs12-import \
              --pkcs12 $SHARED/ca_admin_cert.p12 \
              --password Secret.123

      - name: Check CA admin
        run: |
          # check CA admin user
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-show \
              caadmin

          # check CA admin roles
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-membership-find \
              caadmin

      - name: Check CA users
        run: |
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-user-find

      - name: Check CA security domain
        run: |
          docker exec ca pki-server ca-config-find | grep ^securitydomain. | sort | tee actual

          # security domain should be disabled
          diff /dev/null actual

          docker exec client pki \
              -U https://ca.example.com:8443 \
              securitydomain-show \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # REST API should not return security domain info
          echo "ResourceNotFoundException: " > expected
          diff expected stderr

      - name: Set up OCSP container
        run: |
          tests/bin/runner-init.sh \
              --hostname=ocsp.example.com \
              --network=example \
              --network-alias=ocsp.example.com \
              ocsp

      - name: Install standalone OCSP (step 1)
        run: |
          docker exec ocsp pkispawn \
              -f /usr/share/pki/server/examples/installation/ocsp-standalone-step1.cfg \
              -s OCSP \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_ocsp_signing_csr_path=${SHARED}/ocsp_signing.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/ocsp_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/ocsp_admin.csr \
              -D pki_security_domain_setup=False \
              -v

      - name: Issue OCSP signing cert
        run: |
          docker exec client openssl req -text -noout -in ${SHARED}/ocsp_signing.csr

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile caOCSPCert \
              --csr-file ${SHARED}/ocsp_signing.csr \
              --output-file ${SHARED}/ocsp_signing.crt

          docker exec client openssl x509 -text -noout -in ${SHARED}/ocsp_signing.crt

      - name: Issue subsystem cert
        run: |
          docker exec client openssl req -text -noout -in ${SHARED}/subsystem.csr

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile caSubsystemCert \
              --csr-file ${SHARED}/subsystem.csr \
              --output-file ${SHARED}/subsystem.crt

          docker exec client openssl x509 -text -noout -in ${SHARED}/subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec client openssl req -text -noout -in ${SHARED}/sslserver.csr

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile caServerCert \
              --csr-file ${SHARED}/sslserver.csr \
              --output-file ${SHARED}/sslserver.crt

          docker exec client openssl x509 -text -noout -in ${SHARED}/sslserver.crt

      - name: Issue OCSP audit signing cert
        run: |
          docker exec client openssl req -text -noout -in ${SHARED}/ocsp_audit_signing.csr

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile caAuditSigningCert \
              --csr-file ${SHARED}/ocsp_audit_signing.csr \
              --output-file ${SHARED}/ocsp_audit_signing.crt

          docker exec client openssl x509 -text -noout -in ${SHARED}/ocsp_audit_signing.crt

      - name: Issue OCSP admin cert
        run: |
          docker exec client openssl req -text -noout -in ${SHARED}/ocsp_admin.csr

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile AdminCert \
              --csr-file ${SHARED}/ocsp_admin.csr \
              --output-file ${SHARED}/ocsp_admin.crt

          docker exec client openssl x509 -text -noout -in ${SHARED}/ocsp_admin.crt

      - name: Stop CA
        run: |
          docker exec ca pki-server stop --wait

      - name: Install standalone OCSP (step 2)
        run: |
          docker exec ocsp pkispawn \
              -f /usr/share/pki/server/examples/installation/ocsp-standalone-step2.cfg \
              -s OCSP \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_ocsp_signing_csr_path=${SHARED}/ocsp_signing.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/ocsp_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/ocsp_admin.csr \
              -D pki_ocsp_signing_cert_path=${SHARED}/ocsp_signing.crt \
              -D pki_subsystem_cert_path=${SHARED}/subsystem.crt \
              -D pki_sslserver_cert_path=${SHARED}/sslserver.crt \
              -D pki_audit_signing_cert_path=${SHARED}/ocsp_audit_signing.crt \
              -D pki_admin_cert_path=${SHARED}/ocsp_admin.crt \
              -D pki_security_domain_setup=False \
              -v

      - name: Check OCSP server status
        run: |
          docker exec ocsp pki-server status | tee output

          sed -n \
            -e '/^ *SD Manager:/p' \
            -e '/^ *SD Name:/p' \
            -e '/^ *SD Registration URL:/p' \
            output > actual

          # security domain should be disabled
          diff /dev/null actual

      - name: Check OCSP system certs
        run: |
          docker exec ocsp pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec ocsp pki-healthcheck --failures-only

      - name: Start CA
        run: |
          docker exec ca pki-server start --wait

      - name: Import OCSP certs into client
        run: |
          # export OCSP admin cert and key
          docker exec ocsp cp \
              /root/.dogtag/pki-tomcat/ocsp_admin_cert.p12 \
              $SHARED/ocsp_admin_cert.p12

          # import OCSP admin cert and key
          docker exec client pki pkcs12-import \
              --pkcs12 $SHARED/ocsp_admin_cert.p12 \
              --password Secret.123

      - name: Check OCSP admin
        run: |
          # check OCSP admin user
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n ocspadmin \
              ocsp-user-show \
              ocspadmin

          # check OCSP admin roles
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n ocspadmin \
              ocsp-user-membership-find \
              ocspadmin

      - name: Check OCSP users
        run: |
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n ocspadmin \
              ocsp-user-find

      - name: Check OCSP security domain
        run: |
          docker exec ocsp pki-server ocsp-config-find | grep ^securitydomain. | sort | tee actual

          # security domain should be disabled
          diff /dev/null actual

      - name: Check CRL publishing in CA
        run: |
          docker exec ca pki-server ca-config-find > output

          sed -n \
              -e '/^ca.publish.enable=/p' \
              -e '/^ca.publish.publisher.instance.OCSPPublisher-/p' \
              -e '/^ca.publish.rule.instance.ocsprule-/p' \
              output \
              | tee actual

          # CRL publishing should not be configured
          diff /dev/null actual

      - name: Check cert revocation without CRL publishing
        run: |
          # create cert1 request
          docker exec client pki \
              nss-cert-request \
              --subject "UID=testuser1" \
              --ext /usr/share/pki/tools/examples/certs/testuser.conf \
              --csr testuser1.csr

          # issue cert1
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile caUserCert \
              --csr-file testuser1.csr \
              --output-file testuser1.crt

          # import cert1
          docker exec client pki nss-cert-import \
              --cert testuser1.crt \
              testuser1

          # get cert1 serial number
          docker exec client pki nss-cert-show testuser1 | tee output
          CERT1_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # revoke cert1
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -u caadmin \
              -w Secret.123 \
              ca-cert-hold \
              --force \
              $CERT1_ID

          sleep 5

          # check cert1 status
          docker exec client OCSPClient \
              -d /root/.dogtag/nssdb \
              -h ocsp.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT1_ID | tee output

          # cert1 should be unknown
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Unknown > expected
          diff expected actual

      - name: Add CA subsystem user in OCSP
        run: |
          # export CA subsystem cert
          docker exec ca pki-server cert-export \
              --cert-file $SHARED/ca_subsystem.crt \
              subsystem

          # create CA subsystem user in OCSP
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n ocspadmin \
              ocsp-user-add \
              --fullName "CA" \
              --type agentType \
              --cert-file $SHARED/ca_subsystem.crt \
              CA

          # allow CA to publish CRL to OCSP
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n ocspadmin \
              ocsp-user-membership-add \
              CA \
              "Trusted Managers"

      - name: Add CRL issuing point in OCSP
        run: |
          # convert CA signing cert into PKCS #7
          docker exec ocsp pki pkcs7-cert-import \
              --input-file $SHARED/ca_signing.crt \
              --pkcs7 $SHARED/ca_signing.p7

          # create CRL issuing point with the PKCS #7
          docker exec ocsp pki-server ocsp-crl-issuingpoint-add \
              --cert-chain $SHARED/ca_signing.p7

      - name: Configure CRL publishing in CA
        run: |
          # configure OCSP publisher
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.enableClientAuth true
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.host ocsp.example.com
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.nickName subsystem
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.path /ocsp/agent/ocsp/addCRL
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.pluginName OCSPPublisher
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.port 8443

          # configure CRL publishing rule
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.enable true
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.mapper NoMap
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.pluginName Rule
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.publisher OCSPPublisher
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.type crl

          # enable CRL publishing
          docker exec ca pki-server ca-config-set ca.publish.enable true

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec ca pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec ca pki-server ca-config-set ca.crl.MasterCRL.alwaysUpdate true

          docker exec ca pki-server ca-redeploy --wait

      - name: Check cert revocation with CRL publishing
        run: |
          # create cert2 request
          docker exec client pki \
              nss-cert-request \
              --subject "UID=testuser2" \
              --ext /usr/share/pki/tools/examples/certs/testuser.conf \
              --csr testuser2.csr

          # issue cert2
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n caadmin \
              ca-cert-issue \
              --profile caUserCert \
              --csr-file testuser2.csr \
              --output-file testuser2.crt

          # import cert2
          docker exec client pki nss-cert-import \
              --cert testuser2.crt \
              testuser2

          # get cert1 serial number
          docker exec client pki nss-cert-show testuser1 | tee output
          CERT1_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # get cert2 serial number
          docker exec client pki nss-cert-show testuser2 | tee output
          CERT2_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # revoke cert2
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -u caadmin \
              -w Secret.123 \
              ca-cert-hold \
              --force \
              $CERT2_ID

          sleep 5

          # check cert2 status
          docker exec client OCSPClient \
              -d /root/.dogtag/nssdb \
              -h ocsp.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT1_ID | tee output

          # cert1 should be revoked
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Revoked > expected
          diff expected actual

          # check cert2 status
          docker exec client OCSPClient \
              -d /root/.dogtag/nssdb \
              -h ocsp.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT2_ID | tee output

          # cert2 should be revoked
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Revoked > expected
          diff expected actual

      - name: Remove OCSP
        run: docker exec ocsp pkidestroy -s OCSP -v

      - name: Remove CA
        run: docker exec ca pkidestroy -s CA -v

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check CA systemd journal
        if: always()
        run: |
          docker exec ca journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA access log
        if: always()
        run: |
          docker exec ca find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check CA debug log
        if: always()
        run: |
          docker exec ca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check OCSP systemd journal
        if: always()
        run: |
          docker exec ocsp journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check OCSP access log
        if: always()
        run: |
          docker exec ocsp find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check OCSP debug log
        if: always()
        run: |
          docker exec ocsp find /var/lib/pki/pki-tomcat/logs/ocsp -name "debug.*" -exec cat {} \;
