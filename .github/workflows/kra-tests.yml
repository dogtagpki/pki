name: KRA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,kra,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-kra-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-kra-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-kra-runner.tar

  kra-basic-test:
    name: Basic KRA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/kra-basic-test.yml
    with:
      os: ${{ matrix.os }}

  kra-separate-test:
    name: KRA on separate instance
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/kra-separate-test.yml
    with:
      os: ${{ matrix.os }}

  kra-external-certs-test:
    name: KRA with external certs
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/kra-external-certs-test.yml
    with:
      os: ${{ matrix.os }}

  kra-cmc-test:
    name: KRA with CMC
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/kra-cmc-test.yml
    with:
      os: ${{ matrix.os }}

  kra-clone-test:
    name: KRA clone
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/kra-clone-test.yml
    with:
      os: ${{ matrix.os }}

  kra-standalone-test:
    name: Testing standalone KRA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-kra-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-kra-runner.tar

      - name: Load runner image
        run: docker load --input pki-kra-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Install KRA (step 1)
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step1.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Issue KRA storage cert
        run: |
          docker exec pki openssl req -text -noout -in kra_storage.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_storage.csr \
              --ext /usr/share/pki/server/certs/kra_storage.conf \
              --cert kra_storage.crt
          docker exec pki openssl x509 -text -noout -in kra_storage.crt

      - name: Issue KRA transport cert
        run: |
          docker exec pki openssl req -text -noout -in kra_transport.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_transport.csr \
              --ext /usr/share/pki/server/certs/kra_transport.conf \
              --cert kra_transport.crt
          docker exec pki openssl x509 -text -noout -in kra_transport.crt

      - name: Issue subsystem cert
        run: |
          docker exec pki openssl req -text -noout -in subsystem.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec pki openssl req -text -noout -in sslserver.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Issue KRA audit signing cert
        run: |
          docker exec pki openssl req -text -noout -in kra_audit_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert kra_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in kra_audit_signing.crt

      - name: Issue KRA admin cert
        run: |
          docker exec pki openssl req -text -noout -in kra_admin.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert kra_admin.crt
          docker exec pki openssl x509 -text -noout -in kra_admin.crt

      - name: Install KRA (step 2)
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step2.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec pki pki-healthcheck --failures-only

      - name: Verify admin user
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n kraadmin kra-user-show kraadmin

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-standalone-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # https://github.com/dogtagpki/pki/wiki/Installing-KRA-with-Random-Serial-Numbers-v3
  kra-random-v3-test:
    name: Testing KRA with Random Serial Number v3
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-kra-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-kra-runner.tar

      - name: Load runner image
        run: docker load --input pki-kra-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      - name: Install KRA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_key_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify KRA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec pki pki -n caadmin ca-kraconnector-show | tee output
          sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' output > actual
          echo pki.example.com > expected
          diff expected actual

      - name: Verify cert key archival
        run: |
          docker exec pki /usr/share/pki/tests/kra/bin/test-cert-key-archival.sh

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Check certs in CA
        run: |
          docker exec pki pki ca-cert-find

      - name: Check key requests in KRA
        run: |
          docker exec pki pki -n caadmin kra-key-request-find

      - name: Check keys in KRA
        run: |
          docker exec pki pki -n caadmin kra-key-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-random-v3-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki
