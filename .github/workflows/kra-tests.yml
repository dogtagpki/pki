name: KRA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: /var/cache/dnf
          key: fedora:${{ matrix.os }}-kra-${{ hashFiles('pki.spec') }}

      - name: Install dependencies
        run: |
          # keep packages after installation
          echo "keepcache=True" >> /etc/dnf/dnf.conf
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck
          # don't cache COPR packages
          rm -f `find /var/cache/dnf -name '*.rpm' | grep '/var/cache/dnf/copr:'`

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,kra,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=/tmp/pki-runner.tar

      - name: Upload runner image
        uses: actions/upload-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp/pki-runner.tar

  # docs/installation/kra/Installing_KRA.md
  kra-test:
    name: Testing KRA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec pki pki-server cert-find

      - name: Install KRA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec pki pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck

      - name: Verify KRA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec pki bash -c "pki -n caadmin ca-kraconnector-show | sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' > ${SHARED}/kraconnector.host"
          echo pki.example.com > kra.hostname
          diff kra.hostname kraconnector.host

      - name: Verify cert key archival
        run: |
          docker exec pki /usr/share/pki/tests/kra/bin/test-cert-key-archival.sh

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/kra/Installing_KRA_on_Separate_Instance.md
  kra-separate-test:
    name: Testing KRA on separate instance
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh cads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: cads.example.com
          PASSWORD: Secret.123

      - name: Connect CA DS container to network
        run: docker network connect example cads --alias cads.example.com

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh ca
        env:
          HOSTNAME: ca.example.com

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install CA in CA container
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=cads.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec ca pki-server cert-find

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-container-create.sh krads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: krads.example.com
          PASSWORD: Secret.123

      - name: Connect KRA DS container to network
        run: docker network connect example krads --alias krads.example.com

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh kra
        env:
          HOSTNAME: kra.example.com

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install KRA in KRA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin.cert ${SHARED}/ca_admin.cert
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec kra pki-server cert-find

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec kra pki-healthcheck

      - name: Verify KRA admin
        run: |
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec kra pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec kra pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec kra pki -n caadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec ca pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec ca bash -c "pki -n caadmin ca-kraconnector-show | sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' > ${SHARED}/kraconnector.host"
          echo kra.example.com > kra.hostname
          diff kra.hostname kraconnector.host

      - name: Gather artifacts from CA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/ca cads
          tests/bin/pki-artifacts-save.sh ca
        continue-on-error: true

      - name: Gather artifacts from KRA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/kra krads
          tests/bin/pki-artifacts-save.sh kra
        continue-on-error: true

      - name: Remove KRA from KRA container
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from CA container
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from CA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-separate-ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/ca

      - name: Upload artifacts from KRA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-separate-kra-${{ matrix.os }}
          path: |
            /tmp/artifacts/kra

  # docs/installation/kra/Installing_KRA_with_External_Certificates.md
  kra-external-certs-test:
    name: Testing KRA with external certificates
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh cads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: cads.example.com
          PASSWORD: Secret.123

      - name: Connect CA DS container to network
        run: docker network connect example cads --alias cads.example.com

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh ca
        env:
          HOSTNAME: ca.example.com

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install CA in CA container
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=cads.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec ca pki-server cert-find

      - name: Initialize CA admin in CA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-container-create.sh krads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: krads.example.com
          PASSWORD: Secret.123

      - name: Connect KRA DS container to network
        run: docker network connect example krads --alias krads.example.com

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh kra
        env:
          HOSTNAME: kra.example.com

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install KRA in KRA container (step 1)
        run: |
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-external-certs-step1.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_storage_csr_path=${SHARED}/kra_storage.csr \
              -D pki_transport_csr_path=${SHARED}/kra_transport.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/kra_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/kra_admin.csr \
              -v

      - name: Issue KRA storage cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/kra_storage.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caStorageCert --csr-file ${SHARED}/kra_storage.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/kra_storage.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_storage.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/kra_storage.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_storage.certid` --output-file ${SHARED}/kra_storage.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/kra_storage.crt

      - name: Issue KRA transport cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/kra_transport.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caTransportCert --csr-file ${SHARED}/kra_transport.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/kra_transport.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_transport.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/kra_transport.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_transport.certid` --output-file ${SHARED}/kra_transport.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/kra_transport.crt

      - name: Issue subsystem cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/subsystem.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caSubsystemCert --csr-file ${SHARED}/subsystem.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/subsystem.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat subsystem.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/subsystem.certid"
          docker exec ca bash -c "pki ca-cert-export `cat subsystem.certid` --output-file ${SHARED}/subsystem.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/sslserver.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caServerCert --csr-file ${SHARED}/sslserver.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/sslserver.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat sslserver.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/sslserver.certid"
          docker exec ca bash -c "pki ca-cert-export `cat sslserver.certid` --output-file ${SHARED}/sslserver.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/sslserver.crt

      - name: Issue KRA audit signing cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/kra_audit_signing.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caAuditSigningCert --csr-file ${SHARED}/kra_audit_signing.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/kra_audit_signing.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_audit_signing.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/kra_audit_signing.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_audit_signing.certid` --output-file ${SHARED}/kra_audit_signing.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/kra_audit_signing.crt

      - name: Issue KRA admin cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/kra_admin.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caUserCert --csr-file ${SHARED}/kra_admin.csr --subject uid=kraadmin | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/kra_admin.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_admin.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/kra_admin.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_admin.certid` --output-file ${SHARED}/kra_admin.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/kra_admin.crt

      - name: Install KRA in KRA container (step 2)
        run: |
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-external-certs-step2.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_storage_csr_path=${SHARED}/kra_storage.csr \
              -D pki_transport_csr_path=${SHARED}/kra_transport.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/kra_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/kra_admin.csr \
              -D pki_storage_cert_path=${SHARED}/kra_storage.crt \
              -D pki_transport_cert_path=${SHARED}/kra_transport.crt \
              -D pki_subsystem_cert_path=${SHARED}/subsystem.crt \
              -D pki_sslserver_cert_path=${SHARED}/sslserver.crt \
              -D pki_audit_signing_cert_path=${SHARED}/kra_audit_signing.crt \
              -D pki_admin_cert_path=${SHARED}/kra_admin.crt \
              -v

          docker exec kra pki-server cert-find

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec kra pki-healthcheck

      - name: Verify KRA admin
        run: |
          docker exec kra pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec kra pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec kra pki -n kraadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec ca bash -c "pki -n caadmin ca-kraconnector-show | sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' > ${SHARED}/kraconnector.host"
          echo kra.example.com > kra.hostname
          diff kra.hostname kraconnector.host

      - name: Gather artifacts from CA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/ca cads
          tests/bin/pki-artifacts-save.sh ca
        continue-on-error: true

      - name: Gather artifacts from KRA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/kra krads
          tests/bin/pki-artifacts-save.sh kra
        continue-on-error: true

      - name: Remove KRA from KRA container
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from CA container
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from CA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-external-certs-ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/ca

      - name: Upload artifacts from KRA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-external-certs-kra-${{ matrix.os }}
          path: |
            /tmp/artifacts/kra

  # docs/installation/kra/Installing_KRA_with_External_Certificates.md
  kra-cmc-test:
    name: Testing KRA with CMC
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh cads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: cads.example.com
          PASSWORD: Secret.123

      - name: Connect CA DS container to network
        run: docker network connect example cads --alias cads.example.com

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh ca
        env:
          HOSTNAME: ca.example.com

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install CA in CA container
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=cads.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec ca pki-server cert-find

      - name: Initialize CA admin in CA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file $SHARED/ca_signing.crt
          docker exec ca pki client-cert-import ca_signing --ca-cert $SHARED/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-container-create.sh krads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: krads.example.com
          PASSWORD: Secret.123

      - name: Connect KRA DS container to network
        run: docker network connect example krads --alias krads.example.com

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh kra
        env:
          HOSTNAME: kra.example.com

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install KRA in KRA container (step 1)
        run: |
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-external-certs-step1.cfg \
              -s KRA \
              -D pki_cert_chain_path=$SHARED/ca_signing.crt \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_storage_csr_path=$SHARED/kra_storage.csr \
              -D pki_transport_csr_path=$SHARED/kra_transport.csr \
              -D pki_subsystem_csr_path=$SHARED/subsystem.csr \
              -D pki_sslserver_csr_path=$SHARED/sslserver.csr \
              -D pki_audit_signing_csr_path=$SHARED/kra_audit_signing.csr \
              -D pki_admin_csr_path=$SHARED/kra_admin.csr \
              -v

      # https://github.com/dogtagpki/pki/wiki/Issuing-KRA-Storage-Certificate-with-CMC
      - name: Issue KRA storage cert with CMC
        run: |
          # check cert request
          docker exec ca openssl req -text -noout -in $SHARED/kra_storage.csr

          # create CMC request
          docker exec ca mv $SHARED/kra_storage.csr kra_storage.csr
          docker exec ca CMCRequest \
              /usr/share/pki/server/examples/cmc/kra_storage-cmc-request.cfg

          # submit CMC request
          docker exec ca HttpClient \
              /usr/share/pki/server/examples/cmc/kra_storage-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec ca CMCResponse \
              -d /root/.dogtag/nssdb \
              -i kra_storage.cmc-response \
              -o $SHARED/kra_storage.p7b

          # check issued cert chain
          docker exec ca openssl pkcs7 -print_certs -in $SHARED/kra_storage.p7b

      # https://github.com/dogtagpki/pki/wiki/Issuing-KRA-Transport-Certificate-with-CMC
      - name: Issue KRA transport cert with CMC
        run: |
          # check cert request
          docker exec ca openssl req -text -noout -in $SHARED/kra_transport.csr

          # create CMC request
          docker exec ca mv $SHARED/kra_transport.csr kra_transport.csr
          docker exec ca CMCRequest \
              /usr/share/pki/server/examples/cmc/kra_transport-cmc-request.cfg

          # submit CMC request
          docker exec ca HttpClient \
              /usr/share/pki/server/examples/cmc/kra_transport-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec ca CMCResponse \
              -d /root/.dogtag/nssdb \
              -i kra_transport.cmc-response \
              -o $SHARED/kra_transport.p7b

          # check issued cert chain
          docker exec ca openssl pkcs7 -print_certs -in $SHARED/kra_transport.p7b

      # https://github.com/dogtagpki/pki/wiki/Issuing-Subsystem-Certificate-with-CMC
      - name: Issue subsystem cert with CMC
        run: |
          # check cert request
          docker exec ca openssl req -text -noout -in $SHARED/subsystem.csr

          # create CMC request
          docker exec ca mv $SHARED/subsystem.csr subsystem.csr
          docker exec ca CMCRequest \
              /usr/share/pki/server/examples/cmc/subsystem-cmc-request.cfg

          # submit CMC request
          docker exec ca HttpClient \
              /usr/share/pki/server/examples/cmc/subsystem-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec ca CMCResponse \
              -d /root/.dogtag/nssdb \
              -i subsystem.cmc-response \
              -o $SHARED/subsystem.p7b

          # check issued cert chain
          docker exec ca openssl pkcs7 -print_certs -in $SHARED/subsystem.p7b

      # https://github.com/dogtagpki/pki/wiki/Issuing-SSL-Server-Certificate-with-CMC
      - name: Issue SSL server cert with CMC
        run: |
          # check cert request
          docker exec ca openssl req -text -noout -in $SHARED/sslserver.csr

          # create CMC request
          docker exec ca mv $SHARED/sslserver.csr sslserver.csr
          docker exec ca CMCRequest \
              /usr/share/pki/server/examples/cmc/sslserver-cmc-request.cfg

          # submit CMC request
          docker exec ca HttpClient \
              /usr/share/pki/server/examples/cmc/sslserver-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec ca CMCResponse \
              -d /root/.dogtag/nssdb \
              -i sslserver.cmc-response \
              -o $SHARED/sslserver.p7b

          # check issued cert chain
          docker exec ca openssl pkcs7 -print_certs -in $SHARED/sslserver.p7b

      # https://github.com/dogtagpki/pki/wiki/Issuing-Audit-Signing-Certificate-with-CMC
      - name: Issue KRA audit signing cert with CMC
        run: |
          # check cert request
          docker exec ca openssl req -text -noout -in $SHARED/kra_audit_signing.csr

          # create CMC request
          docker exec ca mv $SHARED/kra_audit_signing.csr audit_signing.csr
          docker exec ca CMCRequest \
              /usr/share/pki/server/examples/cmc/audit_signing-cmc-request.cfg

          # submit CMC request
          docker exec ca HttpClient \
              /usr/share/pki/server/examples/cmc/audit_signing-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec ca CMCResponse \
              -d /root/.dogtag/nssdb \
              -i audit_signing.cmc-response \
              -o $SHARED/kra_audit_signing.p7b

          # check issued cert chain
          docker exec ca openssl pkcs7 -print_certs -in $SHARED/kra_audit_signing.p7b

      # https://github.com/dogtagpki/pki/wiki/Issuing-Admin-Certificate-with-CMC
      - name: Issue KRA admin cert with CMC
        run: |
          # check cert request
          docker exec ca openssl req -text -noout -in $SHARED/kra_admin.csr

          # create CMC request
          docker exec ca mv $SHARED/kra_admin.csr admin.csr
          docker exec ca CMCRequest \
              /usr/share/pki/server/examples/cmc/admin-cmc-request.cfg

          # submit CMC request
          docker exec ca HttpClient \
              /usr/share/pki/server/examples/cmc/admin-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec ca CMCResponse \
              -d /root/.dogtag/nssdb \
              -i admin.cmc-response \
              -o kra_admin.p7b

          # pki_admin_cert_path only supports a single cert so the admin cert
          # needs to be exported from the PKCS #7 cert chain
          # TODO: fix pki_admin_cert_path to support PKCS #7 cert chain
          docker exec ca pki pkcs7-cert-export \
              --pkcs7 kra_admin.p7b \
              --output-prefix kra_admin- \
              --output-suffix .crt
          docker exec ca mv kra_admin-1.crt $SHARED/kra_admin.crt

          # check issued cert
          docker exec ca openssl x509 -text -noout -in $SHARED/kra_admin.crt

      - name: Install KRA in KRA container (step 2)
        run: |
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-external-certs-step2.cfg \
              -s KRA \
              -D pki_cert_chain_path=$SHARED/ca_signing.crt \
              -D pki_ds_hostname=krads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_storage_csr_path=$SHARED/kra_storage.csr \
              -D pki_transport_csr_path=$SHARED/kra_transport.csr \
              -D pki_subsystem_csr_path=$SHARED/subsystem.csr \
              -D pki_sslserver_csr_path=$SHARED/sslserver.csr \
              -D pki_audit_signing_csr_path=$SHARED/kra_audit_signing.csr \
              -D pki_admin_csr_path=$SHARED/kra_admin.csr \
              -D pki_storage_cert_path=$SHARED/kra_storage.p7b \
              -D pki_transport_cert_path=$SHARED/kra_transport.p7b \
              -D pki_subsystem_cert_path=$SHARED/subsystem.p7b \
              -D pki_sslserver_cert_path=$SHARED/sslserver.p7b \
              -D pki_audit_signing_cert_path=$SHARED/kra_audit_signing.p7b \
              -D pki_admin_cert_path=$SHARED/kra_admin.crt \
              -v

          docker exec kra pki-server cert-find

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec kra pki-healthcheck

      - name: Verify KRA admin
        run: |
          docker exec kra pki client-cert-import ca_signing --ca-cert $SHARED/ca_signing.crt
          docker exec kra pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec kra pki -n kraadmin kra-user-show kraadmin

      - name: Gather artifacts from CA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/ca cads
          tests/bin/pki-artifacts-save.sh ca
        continue-on-error: true

      - name: Gather artifacts from KRA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/kra krads
          tests/bin/pki-artifacts-save.sh kra
        continue-on-error: true

      - name: Remove KRA from KRA container
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from CA container
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from CA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-cmc-ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/ca

      - name: Upload artifacts from KRA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-cmc-kra-${{ matrix.os }}
          path: |
            /tmp/artifacts/kra

  # docs/installation/kra/Installing_KRA_Clone.md
  kra-clone-test:
    name: Testing KRA clone
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-container-create.sh primaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: primaryds.example.com
          PASSWORD: Secret.123

      - name: Connect primary DS container to network
        run: docker network connect example primaryds --alias primaryds.example.com

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh primary
        env:
          HOSTNAME: primary.example.com

      - name: Connect primary PKI container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install primary CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Install primary KRA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-container-create.sh secondaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: secondaryds.example.com
          PASSWORD: Secret.123

      - name: Connect secondary DS container to network
        run: docker network connect example secondaryds --alias secondaryds.example.com

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          HOSTNAME: secondary.example.com

      - name: Connect secondary PKI container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec primary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Install KRA in secondary PKI container
        run: |
          docker exec primary pki-server kra-clone-prepare --pkcs12-file ${SHARED}/kra-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-clone.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/kra-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Verify KRA admin in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec secondary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec secondary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin kra-user-show kraadmin

      - name: Set up tertiary DS container
        run: |
          tests/bin/ds-container-create.sh tertiaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tertiaryds.example.com
          PASSWORD: Secret.123

      - name: Connect tertiary DS container to network
        run: docker network connect example tertiaryds --alias tertiaryds.example.com

      - name: Set up tertiary PKI container
        run: |
          tests/bin/runner-init.sh tertiary
        env:
          HOSTNAME: tertiary.example.com

      - name: Connect tertiary PKI container to network
        run: docker network connect example tertiary --alias tertiary.example.com

      - name: Install CA in tertiary PKI container
        run: |
          docker exec secondary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec secondary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=tertiaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Install KRA in tertiary PKI container
        run: |
          docker exec secondary pki-server kra-clone-prepare --pkcs12-file ${SHARED}/kra-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-clone-of-clone.cfg \
              -s KRA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/kra-certs.p12 \
              -D pki_ds_hostname=tertiaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Verify KRA admin in tertiary PKI container
        run: |
          docker exec tertiary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec tertiary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tertiary pki -n caadmin kra-user-show kraadmin

      - name: Gather artifacts from primary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/primary primaryds
          tests/bin/pki-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/secondary secondaryds
          tests/bin/pki-artifacts-save.sh secondary
        continue-on-error: true

      - name: Gather artifacts from tertiary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tertiary tertiaryds
          tests/bin/pki-artifacts-save.sh tertiary
        continue-on-error: true

      - name: Remove KRA from tertiary PKI container
        run: docker exec tertiary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from tertiary PKI container
        run: docker exec tertiary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove KRA from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove KRA from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from primary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-clone-primary-${{ matrix.os }}
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-clone-secondary-${{ matrix.os }}
          path: |
            /tmp/artifacts/secondary

      - name: Upload artifacts from tertiary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-clone-tertiary-${{ matrix.os }}
          path: |
            /tmp/artifacts/tertiary

  kra-standalone-test:
    name: Testing standalone KRA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Install KRA (step 1)
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step1.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

      - name: Issue KRA storage cert
        run: |
          docker exec pki openssl req -text -noout -in kra_storage.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_storage.csr \
              --ext /usr/share/pki/server/certs/kra_storage.conf \
              --cert kra_storage.crt
          docker exec pki openssl x509 -text -noout -in kra_storage.crt

      - name: Issue KRA transport cert
        run: |
          docker exec pki openssl req -text -noout -in kra_transport.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_transport.csr \
              --ext /usr/share/pki/server/certs/kra_transport.conf \
              --cert kra_transport.crt
          docker exec pki openssl x509 -text -noout -in kra_transport.crt

      - name: Issue subsystem cert
        run: |
          docker exec pki openssl req -text -noout -in subsystem.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec pki openssl req -text -noout -in sslserver.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Issue KRA audit signing cert
        run: |
          docker exec pki openssl req -text -noout -in kra_audit_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert kra_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in kra_audit_signing.crt

      - name: Issue KRA admin cert
        run: |
          docker exec pki openssl req -text -noout -in kra_admin.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert kra_admin.crt
          docker exec pki openssl x509 -text -noout -in kra_admin.crt

      - name: Install KRA (step 2)
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra-standalone-step2.cfg \
              -s KRA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec pki pki-server cert-find

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec pki pki-healthcheck

      - name: Verify admin user
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n kraadmin kra-user-show kraadmin

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-standalone-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki
