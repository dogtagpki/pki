name: KRA Tests

on: [push, pull_request]

jobs:
  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Install git
        run: dnf install -y git

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build docker
          dnf copr enable -y @pki/master
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,kra --with-timestamp --with-commit-id --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build container with systemd
        uses: docker/build-push-action@v2
        with:
          file: ci/Dockerfile
          build-args: OS_VERSION=${{ matrix.os }}
          tags: pki:latest
          outputs: type=docker,dest=/tmp/pki.tar

      - name: Upload container
        uses: actions/upload-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp/pki.tar

  # docs/installation/kra/Installing_KRA.md
  kra-test:
    name: Installing KRA
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Run container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Install CA
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Install KRA
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/kra.cfg -s KRA -v

      - name: Gather config files
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/pki-conf.tar -C / etc/pki

      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-conf-${{ matrix.os }}
          path: pki-conf.tar

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Verify KRA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec pki pki -n caadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec pki bash -c "pki -n caadmin ca-kraconnector-show | sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' > ${PKIDIR}/kraconnector.host"
          echo pki.example.com > kra.hostname
          diff kra.hostname kraconnector.host

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/pki-logs.tar -C / var/log/pki

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-logs-${{ matrix.os }}
          path: pki-logs.tar

  # docs/installation/kra/Installing_KRA_on_Separate_Instance.md
  kra-separate-test:
    name: Installing KRA on Separate Instance
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Create network
        run: docker network create example

      - name: Setup CA container
        run: |
          IMAGE=pki \
          NAME=ca \
          HOSTNAME=ca.example.com \
          ci/runner-init.sh

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install dependencies in CA container
        run: |
          docker exec ca dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec ca dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in CA container
        run: docker exec ca bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in CA container
        run: docker exec ca ${PKIDIR}/ci/ds-create.sh

      - name: Install CA in CA container
        run: docker exec ca pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Setup KRA container
        run: |
          IMAGE=pki \
          NAME=kra \
          HOSTNAME=kra.example.com \
          ci/runner-init.sh

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install dependencies in KRA container
        run: |
          docker exec kra dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec kra dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in KRA container
        run: docker exec kra bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in KRA container
        run: docker exec kra ${PKIDIR}/ci/ds-create.sh

      - name: Install KRA in KRA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${PKIDIR}/ca_signing.crt
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin.cert ${PKIDIR}/ca_admin.cert
          docker exec kra cp ${PKIDIR}/ca_signing.crt .
          docker exec kra cp ${PKIDIR}/ca_admin.cert .
          docker exec kra pkispawn -f /usr/share/pki/server/examples/installation/kra-separate.cfg -s KRA -v

      - name: Gather config files from KRA container
        if: always()
        run: docker exec kra tar cvf ${PKIDIR}/kra-separate-conf.tar -C / etc/pki

      - name: Upload config files from KRA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-separate-conf-${{ matrix.os }}
          path: kra-separate-conf.tar

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec kra pki-healthcheck --debug

      - name: Verify KRA admin
        run: |
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${PKIDIR}/ca_admin_cert.p12
          docker exec ca cp /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf ${PKIDIR}/pkcs12_password.conf
          docker exec kra pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec kra pki client-cert-import \
              --pkcs12 ${PKIDIR}/ca_admin_cert.p12 \
              --pkcs12-password-file ${PKIDIR}/pkcs12_password.conf
          docker exec kra pki -n caadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec ca pki client-cert-import ca_signing --ca-cert ${PKIDIR}/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec ca bash -c "pki -n caadmin ca-kraconnector-show | sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' > ${PKIDIR}/kraconnector.host"
          echo kra.example.com > kra.hostname
          diff kra.hostname kraconnector.host

      - name: Remove KRA from KRA container
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove DS from KRA container
        run: docker exec kra ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect KRA container from network
        run: docker network disconnect example kra

      - name: Gather log files from KRA container
        if: always()
        run: |
          docker exec kra bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec kra tar cvf ${PKIDIR}/kra-separate-logs.tar -C / var/log/pki

      - name: Upload log files from KRA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-separate-logs-${{ matrix.os }}
          path: kra-separate-logs.tar

      - name: Remove CA from CA container
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from CA container
        run: docker exec ca ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect CA container from network
        run: docker network disconnect example ca

      - name: Gather log files from CA container
        if: always()
        run: |
          docker exec ca bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec ca tar cvf ${PKIDIR}/ca-separate-logs.tar -C / var/log/pki

      - name: Upload log files from CA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-separate-logs-${{ matrix.os }}
          path: ca-separate-logs.tar

      - name: Remove network
        run: docker network rm example

  # docs/installation/kra/Installing_KRA_with_External_Certificates.md
  kra-external-certs-test:
    name: Installing KRA with External Certificates
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Create network
        run: docker network create example

      - name: Setup CA container
        run: |
          IMAGE=pki \
          NAME=ca \
          HOSTNAME=ca.example.com \
          ci/runner-init.sh

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install dependencies in CA container
        run: |
          docker exec ca dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec ca dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in CA container
        run: docker exec ca bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in CA container
        run: docker exec ca ${PKIDIR}/ci/ds-create.sh

      - name: Install CA in CA container
        run: docker exec ca pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Initialize CA admin in CA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${PKIDIR}/ca_signing.crt
          docker exec ca pki client-cert-import ca_signing --ca-cert ${PKIDIR}/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf

      - name: Setup KRA container
        run: |
          IMAGE=pki \
          NAME=kra \
          HOSTNAME=kra.example.com \
          ci/runner-init.sh

      - name: Connect KRA container to network
        run: docker network connect example kra --alias kra.example.com

      - name: Install dependencies in KRA container
        run: |
          docker exec kra dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec kra dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in KRA container
        run: docker exec kra bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in KRA container
        run: docker exec kra ${PKIDIR}/ci/ds-create.sh

      - name: Install KRA in KRA container (step 1)
        run: |
          docker exec kra cp ${PKIDIR}/ca_signing.crt .
          docker exec kra pkispawn -f /usr/share/pki/server/examples/installation/kra-external-certs-step1.cfg -s KRA -v

      - name: Issue KRA storage cert
        run: |
          docker exec kra cp kra_storage.csr ${PKIDIR}/kra_storage.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caStorageCert --csr-file ${PKIDIR}/kra_storage.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_storage.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_storage.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_storage.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_storage.certid` --output-file ${PKIDIR}/kra_storage.crt"
          docker exec kra cp ${PKIDIR}/kra_storage.crt kra_storage.crt

      - name: Issue KRA transport cert
        run: |
          docker exec kra cp kra_transport.csr ${PKIDIR}/kra_transport.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caTransportCert --csr-file ${PKIDIR}/kra_transport.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_transport.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_transport.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_transport.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_transport.certid` --output-file ${PKIDIR}/kra_transport.crt"
          docker exec kra cp ${PKIDIR}/kra_transport.crt kra_transport.crt

      - name: Issue subsystem cert
        run: |
          docker exec kra cp subsystem.csr ${PKIDIR}/subsystem.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caSubsystemCert --csr-file ${PKIDIR}/subsystem.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${PKIDIR}/subsystem.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat subsystem.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${PKIDIR}/subsystem.certid"
          docker exec ca bash -c "pki ca-cert-export `cat subsystem.certid` --output-file ${PKIDIR}/subsystem.crt"
          docker exec kra cp ${PKIDIR}/subsystem.crt subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec kra cp sslserver.csr ${PKIDIR}/sslserver.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caServerCert --csr-file ${PKIDIR}/sslserver.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${PKIDIR}/sslserver.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat sslserver.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${PKIDIR}/sslserver.certid"
          docker exec ca bash -c "pki ca-cert-export `cat sslserver.certid` --output-file ${PKIDIR}/sslserver.crt"
          docker exec kra cp ${PKIDIR}/sslserver.crt sslserver.crt

      - name: Issue KRA audit signing cert
        run: |
          docker exec kra cp kra_audit_signing.csr ${PKIDIR}/kra_audit_signing.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caAuditSigningCert --csr-file ${PKIDIR}/kra_audit_signing.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_audit_signing.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_audit_signing.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_audit_signing.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_audit_signing.certid` --output-file ${PKIDIR}/kra_audit_signing.crt"
          docker exec kra cp ${PKIDIR}/kra_audit_signing.crt kra_audit_signing.crt

      - name: Issue KRA admin cert
        run: |
          docker exec kra cp kra_admin.csr ${PKIDIR}/kra_admin.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caUserCert --csr-file ${PKIDIR}/kra_admin.csr --subject uid=kraadmin | sed -n 's/Request ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_admin.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat kra_admin.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${PKIDIR}/kra_admin.certid"
          docker exec ca bash -c "pki ca-cert-export `cat kra_admin.certid` --output-file ${PKIDIR}/kra_admin.crt"
          docker exec kra cp ${PKIDIR}/kra_admin.crt kra_admin.crt

      - name: Install KRA in KRA container (step 2)
        run: |
          docker exec kra pkispawn -f /usr/share/pki/server/examples/installation/kra-external-certs-step2.cfg -s KRA -v

      - name: Gather config files from KRA container
        if: always()
        run: docker exec kra tar cvf ${PKIDIR}/kra-external-certs-conf.tar -C / etc/pki

      - name: Upload config files from KRA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-external-certs-conf-${{ matrix.os }}
          path: kra-external-certs-conf.tar

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec kra pki-healthcheck --debug

      - name: Verify KRA admin
        run: |
          docker exec kra pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec kra pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/kra/pkcs12_password.conf
          docker exec kra pki -n kraadmin kra-user-show kraadmin

      - name: Verify KRA connector in CA
        run: |
          docker exec ca bash -c "pki -n caadmin ca-kraconnector-show | sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' > ${PKIDIR}/kraconnector.host"
          echo kra.example.com > kra.hostname
          diff kra.hostname kraconnector.host

      - name: Remove KRA from KRA container
        run: docker exec kra pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove DS from KRA container
        run: docker exec kra ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect KRA container from network
        run: docker network disconnect example kra

      - name: Gather log files from KRA container
        if: always()
        run: |
          docker exec kra bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec kra tar cvf ${PKIDIR}/kra-external-certs-logs.tar -C / var/log/pki

      - name: Upload log files from KRA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-external-certs-logs-${{ matrix.os }}
          path: kra-external-certs-logs.tar

      - name: Remove CA from CA container
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from CA container
        run: docker exec ca ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect CA container from network
        run: docker network disconnect example ca

      - name: Gather log files from CA container
        if: always()
        run: |
          docker exec ca bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec ca tar cvf ${PKIDIR}/ca-external-certs-logs.tar -C / var/log/pki

      - name: Upload log files from CA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-external-certs-logs-${{ matrix.os }}
          path: ca-external-certs-logs.tar

      - name: Remove network
        run: docker network rm example

  # docs/installation/kra/Installing_KRA_Clone.md
  kra-clone-test:
    name: Installing KRA Clone
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Create network
        run: docker network create example

      - name: Run primary container
        run: |
          IMAGE=pki \
          NAME=primary \
          HOSTNAME=primary.example.com \
          ci/runner-init.sh

      - name: Connect primary container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install dependencies in primary container
        run: |
          docker exec primary dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec primary dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in primary container
        run: docker exec primary bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in primary container
        run: docker exec primary ${PKIDIR}/ci/ds-create.sh

      - name: Install primary CA in primary container
        run: docker exec primary pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Install primary KRA in primary container
        run: docker exec primary pkispawn -f /usr/share/pki/server/examples/installation/kra.cfg -s KRA -v

      - name: Gather config files from primary container
        if: always()
        run: docker exec primary tar cvf ${PKIDIR}/primary-conf.tar -C / etc/pki

      - name: Upload config files from primary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: primary-conf-${{ matrix.os }}
          path: primary-conf.tar

      - name: Setup secondary container
        run: |
          IMAGE=pki \
          NAME=secondary \
          HOSTNAME=secondary.example.com \
          ci/runner-init.sh

      - name: Connect secondary container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install dependencies in secondary container
        run: |
          docker exec secondary dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec secondary dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages on secondary container
        run: docker exec secondary bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in secondary container
        run: docker exec secondary ${PKIDIR}/ci/ds-create.sh

      - name: Install CA in secondary container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${PKIDIR}/ca_signing.crt
          docker exec primary pki-server ca-clone-prepare --pkcs12-file ${PKIDIR}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec secondary cp ${PKIDIR}/ca_signing.crt .
          docker exec secondary cp ${PKIDIR}/ca-certs.p12 .
          docker exec secondary pkispawn -f /usr/share/pki/server/examples/installation/ca-clone.cfg -s CA -v

      - name: Install KRA in secondary container
        run: |
          docker exec primary pki-server kra-clone-prepare --pkcs12-file ${PKIDIR}/kra-certs.p12 --pkcs12-password Secret.123
          docker exec secondary cp ${PKIDIR}/kra-certs.p12 .
          docker exec secondary pkispawn -f /usr/share/pki/server/examples/installation/kra-clone.cfg -s KRA -v

      - name: Gather config files from secondary container
        if: always()
        run: docker exec secondary tar cvf ${PKIDIR}/secondary-conf.tar -C / etc/pki

      - name: Upload config files from secondary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: secondary-conf-${{ matrix.os }}
          path: secondary-conf.tar

      - name: Verify KRA admin
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${PKIDIR}/ca_admin_cert.p12
          docker exec primary cp /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf ${PKIDIR}/pkcs12_password.conf
          docker exec secondary pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec secondary pki client-cert-import \
              --pkcs12 ${PKIDIR}/ca_admin_cert.p12 \
              --pkcs12-password-file ${PKIDIR}/pkcs12_password.conf
          docker exec secondary pki -n caadmin kra-user-show kraadmin

      - name: Setup tertiary container
        run: |
          IMAGE=pki \
          NAME=tertiary \
          HOSTNAME=tertiary.example.com \
          ci/runner-init.sh

      - name: Connect tertiary container to network
        run: docker network connect example tertiary --alias tertiary.example.com

      - name: Install dependencies in tertiary container
        run: |
          docker exec tertiary dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec tertiary dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages on tertiary container
        run: docker exec tertiary bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in tertiary container
        run: docker exec tertiary ${PKIDIR}/ci/ds-create.sh

      - name: Install CA in tertiary container
        run: |
          docker exec secondary pki-server cert-export ca_signing --cert-file ${PKIDIR}/ca_signing.crt
          docker exec secondary pki-server ca-clone-prepare --pkcs12-file ${PKIDIR}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary cp ${PKIDIR}/ca_signing.crt .
          docker exec tertiary cp ${PKIDIR}/ca-certs.p12 .
          docker exec tertiary pkispawn -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg -s CA -v

      - name: Install KRA in tertiary container
        run: |
          docker exec secondary pki-server kra-clone-prepare --pkcs12-file ${PKIDIR}/kra-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary cp ${PKIDIR}/kra-certs.p12 .
          docker exec tertiary pkispawn -f /usr/share/pki/server/examples/installation/kra-clone-of-clone.cfg -s KRA -v

      - name: Gather config files from tertiary container
        if: always()
        run: docker exec tertiary tar cvf ${PKIDIR}/tertiary-conf.tar -C / etc/pki

      - name: Upload config files from tertiary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tertiary-conf-${{ matrix.os }}
          path: tertiary-conf.tar

      - name: Verify KRA admin
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${PKIDIR}/ca_admin_cert.p12
          docker exec primary cp /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf ${PKIDIR}/pkcs12_password.conf
          docker exec tertiary cp ${PKIDIR}/ca_admin_cert.p12 .
          docker exec tertiary cp ${PKIDIR}/pkcs12_password.conf .
          docker exec tertiary pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec tertiary pki client-cert-import \
              --pkcs12 ca_admin_cert.p12 \
              --pkcs12-password-file pkcs12_password.conf
          docker exec tertiary pki -n caadmin kra-user-show kraadmin

      - name: Remove CA from tertiary container
        run: docker exec tertiary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from tertiary container
        run: docker exec tertiary ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect tertiary container from network
        run: docker network disconnect example tertiary

      - name: Gather log files from tertiary container
        if: always()
        run: |
          docker exec tertiary bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec tertiary tar cvf ${PKIDIR}/tertiary-logs.tar -C / var/log/pki

      - name: Upload log files from tertiary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tertiary-logs-${{ matrix.os }}
          path: tertiary-logs.tar

      - name: Remove KRA from secondary container
        run: docker exec secondary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from secondary container
        run: docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from secondary container
        run: docker exec secondary ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect secondary container from network
        run: docker network disconnect example secondary

      - name: Gather log files from secondary container
        if: always()
        run: |
          docker exec secondary bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec secondary tar cvf ${PKIDIR}/secondary-logs.tar -C / var/log/pki

      - name: Upload log files from secondary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: secondary-logs-${{ matrix.os }}
          path: secondary-logs.tar

      - name: Remove KRA from primary container
        run: docker exec primary pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA from primary container
        run: docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from primary container
        run: docker exec primary ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect primary container from network
        run: docker network disconnect example primary

      - name: Remove network
        run: docker network rm example

      - name: Gather log files from primary container
        if: always()
        run: |
          docker exec primary bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec primary tar cvf ${PKIDIR}/primary-logs.tar -C / var/log/pki

      - name: Upload log files from primary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: primary-logs-${{ matrix.os }}
          path: primary-logs.tar

  kra-standalone-test:
    name: Installing Standalone KRA
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Run container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Create CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --serial 1 \
              --cert ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Install KRA (step 1)
        run: |
          docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/kra-standalone-step1.cfg -s KRA -v

      - name: Issue KRA storage cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_storage.csr \
              --ext /usr/share/pki/server/certs/kra_storage.conf \
              --serial 2 \
              --cert kra_storage.crt

      - name: Issue KRA transport cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_transport.csr \
              --ext /usr/share/pki/server/certs/kra_transport.conf \
              --serial 3 \
              --cert kra_transport.crt

      - name: Issue subsystem cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --serial 4 \
              --cert subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --serial 5 \
              --cert sslserver.crt

      - name: Issue KRA audit signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --serial 6 \
              --cert kra_audit_signing.crt

      - name: Issue KRA admin cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr kra_admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --serial 7 \
              --cert kra_admin.crt

      - name: Install KRA (step 2)
        run: |
          docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/kra-standalone-step2.cfg -s KRA -v

      - name: Gather config files
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/kra-standalone-conf.tar -C / etc/pki

      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-standalone-conf-${{ matrix.os }}
          path: kra-standalone-conf.tar

      # TODO: Fix DogtagKRAConnectivityCheck to work without CA
      # - name: Run PKI healthcheck
      #   run: docker exec pki pki-healthcheck --debug

      - name: Verify admin user
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/kra_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/kra/pkcs12_password.conf
          docker exec pki pki -n kraadmin kra-user-show kraadmin

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove DS
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/kra-standalone-logs.tar -C / var/log/pki

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kra-standalone-logs-${{ matrix.os }}
          path: kra-standalone-logs.tar
