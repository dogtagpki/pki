name: OCSP container

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # https://github.com/dogtagpki/pki/wiki/Deploying-OCSP-Container
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libxml2-utils

          # replace docker with podman
          sudo apt-get -y purge --auto-remove docker-ce-cli
          sudo apt-get -y install podman-docker

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Create shared folders
        run: |
          mkdir -p ca/certs
          mkdir -p ca/conf
          mkdir -p ca/logs
          mkdir -p ocsp/certs
          mkdir -p ocsp/conf
          mkdir -p ocsp/logs

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh \
              --hostname=client.example.com \
              --network=example \
              client

      - name: Set up CA container
        run: |
          docker run \
              --name ca \
              --hostname ca.example.com \
              --network example \
              --network-alias ca.example.com \
              -v $PWD/ca/certs:/certs \
              -v $PWD/ca/conf:/conf \
              -v $PWD/ca/logs:/logs \
              -e PKI_DS_URL=ldap://cads.example.com:3389 \
              -e PKI_DS_PASSWORD=Secret.123 \
              --detach \
              pki-ca

          # wait for CA to start
          docker exec client curl \
              --retry 180 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://ca.example.com:8443

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh \
              --image=${{ env.DB_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=cads.example.com \
              --password=Secret.123 \
              cads

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database
      - name: Initialize CA database
        run: |
          docker exec ca pki-server ca-db-init -v
          docker exec ca pki-server ca-db-index-add -v
          docker exec ca pki-server ca-db-index-rebuild -v
          docker exec ca pki-server ca-db-vlv-add -v
          docker exec ca pki-server ca-db-vlv-reindex -v

      - name: Import CA signing cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/ca_signing.csr \
              --profile /usr/share/pki/ca/conf/caCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/ca_signing.crt \
              --profile /usr/share/pki/ca/conf/caCert.profile \
              --request $REQUEST_ID

      - name: Import CA OCSP signing cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/ocsp_signing.csr \
              --profile /usr/share/pki/ca/conf/caOCSPCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/ocsp_signing.crt \
              --profile /usr/share/pki/ca/conf/caOCSPCert.profile \
              --request $REQUEST_ID

      - name: Import CA audit signing cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/audit_signing.csr \
              --profile /usr/share/pki/ca/conf/caAuditSigningCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/audit_signing.crt \
              --profile /usr/share/pki/ca/conf/caAuditSigningCert.profile \
              --request $REQUEST_ID

      - name: Import CA subsystem cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/subsystem.csr \
              --profile /usr/share/pki/ca/conf/rsaSubsystemCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/subsystem.crt \
              --profile /usr/share/pki/ca/conf/rsaSubsystemCert.profile \
              --request $REQUEST_ID

      - name: Import SSL server cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/sslserver.csr \
              --profile /usr/share/pki/ca/conf/rsaServerCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/sslserver.crt \
              --profile /usr/share/pki/ca/conf/rsaServerCert.profile \
              --request $REQUEST_ID

      - name: Import admin cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/admin.csr \
              --profile /usr/share/pki/ca/conf/rsaAdminCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/admin.crt \
              --profile /usr/share/pki/ca/conf/rsaAdminCert.profile \
              --request $REQUEST_ID

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Admin-User
      - name: Add CA admin user
        run: |
          docker exec ca pki-server ca-user-add \
              --full-name Administrator \
              --type adminType \
              admin

      - name: Assign admin cert to CA admin user
        run: |
          docker exec ca pki-server ca-user-cert-add \
              --cert /certs/admin.crt \
              admin

      - name: Add admin user into CA groups
        run: |
          docker exec ca pki-server ca-user-role-add admin "Administrators"
          docker exec ca pki-server ca-user-role-add admin "Certificate Manager Agents"

      - name: Install admin cert
        run: |
          docker exec client pki pkcs12-import \
              --pkcs12 $SHARED/ca/certs/admin.p12 \
              --password Secret.123

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-user-show \
              admin

      - name: Create OCSP signing cert
        run: |
          docker exec client pki nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr $SHARED/ocsp/certs/ocsp_signing.csr
          docker exec client pki \
              -d $SHARED/ca/conf/alias \
              nss-cert-issue \
              --issuer ca_signing \
              --csr $SHARED/ocsp/certs/ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --cert $SHARED/ocsp/certs/ocsp_signing.crt
          docker exec client pki nss-cert-import \
              --cert $SHARED/ocsp/certs/ocsp_signing.crt \
              ocsp_signing
          docker exec client pki nss-cert-show ocsp_signing

      - name: Create OCSP audit signing cert
        run: |
          docker exec client pki nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr $SHARED/ocsp/certs/audit_signing.csr
          docker exec client pki \
              -d $SHARED/ca/conf/alias \
              nss-cert-issue \
              --issuer ca_signing \
              --csr $SHARED/ocsp/certs/audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert $SHARED/ocsp/certs/audit_signing.crt
          docker exec client pki nss-cert-import \
              --cert $SHARED/ocsp/certs/audit_signing.crt \
              --trust ,,P \
              audit_signing
          docker exec client pki nss-cert-show audit_signing

      - name: Create OCSP subsystem cert
        run: |
          docker exec client pki nss-cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --csr $SHARED/ocsp/certs/subsystem.csr
          docker exec client pki \
              -d $SHARED/ca/conf/alias \
              nss-cert-issue \
              --issuer ca_signing \
              --csr $SHARED/ocsp/certs/subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert $SHARED/ocsp/certs/subsystem.crt
          docker exec client pki nss-cert-import \
              --cert $SHARED/ocsp/certs/subsystem.crt \
              subsystem
          docker exec client pki nss-cert-show subsystem

      - name: Create OCSP SSL server cert
        run: |
          docker exec client pki nss-cert-request \
              --subject "CN=ocsp.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr $SHARED/ocsp/certs/sslserver.csr
          docker exec client pki \
              -d $SHARED/ca/conf/alias \
              nss-cert-issue \
              --issuer ca_signing \
              --csr $SHARED/ocsp/certs/sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert $SHARED/ocsp/certs/sslserver.crt
          docker exec client pki nss-cert-import \
              --cert $SHARED/ocsp/certs/sslserver.crt \
              sslserver
          docker exec client pki nss-cert-show sslserver

      - name: Prepare OCSP certs and keys
        run: |
          # export CA signing cert
          docker exec client cp $SHARED/ca/certs/ca_signing.crt $SHARED/ocsp/certs

          docker exec client pki nss-cert-find

          # export OCSP system certs and keys
          docker exec client pki pkcs12-export \
              --pkcs12 $SHARED/ocsp/certs/server.p12 \
              --password Secret.123 \
              ocsp_signing \
              audit_signing \
              subsystem \
              sslserver

          docker exec client pki pkcs12-cert-find \
              --pkcs12 $SHARED/ocsp/certs/server.p12 \
              --password Secret.123 \

          # export admin cert and key
          docker exec client cp $SHARED/ca/certs/admin.p12 $SHARED/ocsp/certs

          docker exec client pki pkcs12-cert-find \
              --pkcs12 $SHARED/ocsp/certs/admin.p12 \
              --password Secret.123 \

          ls -la ocsp/certs

      - name: Set up OCSP container
        run: |
          docker run \
              --name ocsp \
              --hostname ocsp.example.com \
              --network example \
              --network-alias ocsp.example.com \
              -v $PWD/ocsp/certs:/certs \
              -v $PWD/ocsp/conf:/conf \
              -v $PWD/ocsp/logs:/logs \
              -e PKI_DS_URL=ldap://ocspds.example.com:3389 \
              -e PKI_DS_PASSWORD=Secret.123 \
              --detach \
              pki-ocsp

      - name: Wait for OCSP container to start
        run: |
          docker exec client curl \
              --retry 180 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://ocsp.example.com:8443

      - name: Check OCSP conf dir
        if: always()
        run: |
          ls -l ocsp/conf \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
              | tee output

          # everything should be owned by docker group
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwxrwx docker Catalina
          drwxrwxrwx docker alias
          -rw-rw-rw- docker catalina.policy
          lrwxrwxrwx docker catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwxrwx docker certs
          lrwxrwxrwx docker context.xml -> /etc/tomcat/context.xml
          -rw-rw-rw- docker jss.conf
          lrwxrwxrwx docker logging.properties -> /usr/share/pki/server/conf/logging.properties
          drwxrwxrwx docker ocsp
          -rw-rw-rw- docker password.conf
          -rw-rw-rw- docker server.xml
          -rw-rw-rw- docker serverCertNick.conf
          -rw-rw-rw- docker tomcat.conf
          lrwxrwxrwx docker web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check OCSP conf/ocsp dir
        if: always()
        run: |
          ls -l ocsp/conf/ocsp \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
                  -e '/^\S* *\S* *CS.cfg.bak /d' \
              | tee output

          # everything should be owned by docker group
          # TODO: review owners/permissions
          cat > expected << EOF
          -rw-rw-rw- docker CS.cfg
          drwxrwxrwx docker archives
          -rw-rw-rw- docker registry.cfg
          EOF

          diff expected output

      - name: Check OCSP logs dir
        if: always()
        run: |
          ls -l ocsp/logs \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # everything should be owned by docker group
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwx--- docker backup
          -rw-rw-rw- docker catalina.$DATE.log
          -rw-rw-rw- docker host-manager.$DATE.log
          -rw-rw-rw- docker localhost.$DATE.log
          -rw-rw-rw- docker localhost_access_log.$DATE.txt
          -rw-rw-rw- docker manager.$DATE.log
          drwxrwxrwx docker ocsp
          drwxrwxrwx docker pki
          EOF

          diff expected output

      - name: Check basic operations from OCSP container
        run: |
          # check PKI server info
          docker exec ocsp pki info

      - name: Check basic operations from client container
        run: |
          # check PKI server info
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              info

      - name: Set up OCSP DS container
        run: |
          tests/bin/ds-container-create.sh \
              --image=${{ env.DB_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ocspds.example.com \
              --password=Secret.123 \
              ocspds

      # https://github.com/dogtagpki/pki/wiki/Setting-up-OCSP-Database
      - name: Set up OCSP database
        run: |
          docker exec ocsp pki-server ocsp-db-init -v
          docker exec ocsp pki-server ocsp-db-index-add -v
          docker exec ocsp pki-server ocsp-db-index-rebuild  -v
          docker exec ocsp pki-server ocsp-db-vlv-add -v
          docker exec ocsp pki-server ocsp-db-vlv-reindex -v

      # https://github.com/dogtagpki/pki/wiki/Setting-up-OCSP-Admin-User
      - name: Add OCSP admin user
        run: |
          docker exec ocsp pki-server ocsp-user-add \
              --full-name Administrator \
              --type adminType \
              admin

      - name: Assign admin cert to OCSP admin user
        run: |
          docker exec ocsp pki-server ocsp-user-cert-add \
              --cert /certs/admin.crt \
              admin

      - name: Add OCSP admin user into OCSP groups
        run: |
          docker exec ocsp pki-server ocsp-user-role-add admin "Administrators"

      - name: Check OCSP admin user
        run: |
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n admin \
              ocsp-user-show \
              admin

      # https://github.com/dogtagpki/pki/wiki/Setting-up-Subsystem-User
      - name: Add CA subsystem user in OCSP
        run: |
          docker exec ocsp pki-server ocsp-user-add \
              --full-name CA-ca.example.com-8443 \
              --type agentType \
              CA-ca.example.com-8443

      - name: Assign CA subsystem cert to CA subsystem user
        run: |
          docker cp ca/certs/subsystem.crt ocsp:ca_subsystem.crt
          docker exec ocsp pki-server ocsp-user-cert-add \
              --cert ca_subsystem.crt \
              CA-ca.example.com-8443

      - name: Assign roles to CA subsystem user
        run: |
          docker exec ocsp pki-server ocsp-user-role-add CA-ca.example.com-8443 "Trusted Managers"

      - name: Add CRL issuing point
        run: |
          # convert CA signing cert into PKCS #7 chain
          docker exec ocsp pki pkcs7-cert-import --pkcs7 /certs/ca_signing.p7 --input-file /certs/ca_signing.crt
          docker exec ocsp pki pkcs7-cert-find --pkcs7 /certs/ca_signing.p7

          # create CRL issuing point with the PKCS #7 chain
          docker exec ocsp pki-server ocsp-crl-issuingpoint-add --cert-chain /certs/ca_signing.p7

      - name: Configure OCSP connector in CA
        run: |
          # configure OCSP publisher
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.enableClientAuth true
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.host ocsp.example.com
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.nickName subsystem
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.path /ocsp/agent/ocsp/addCRL
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.pluginName OCSPPublisher
          docker exec ca pki-server ca-config-set ca.publish.publisher.instance.OCSPPublisher.port 8443

          # configure CRL publishing rule
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.enable true
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.mapper NoMap
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.pluginName Rule
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.publisher OCSPPublisher
          docker exec ca pki-server ca-config-set ca.publish.rule.instance.OCSPRule.type crl

          # enable CRL publishing
          docker exec ca pki-server ca-config-set ca.publish.enable true

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec ca pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec ca pki-server ca-crl-ip-mod -D alwaysUpdate=true MasterCRL

      - name: Restart CA
        run: |
          docker restart ca
          sleep 5

          # wait for CA to restart
          docker exec client curl \
              --retry 180 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://ca.example.com:8443

      - name: Create user cert
        run: |
          docker exec client pki \
              -U https://ca.example.com:8443 \
              client-cert-request \
              uid=testuser | tee output

          REQUEST_ID=$(sed -n "s/^\s*Request ID:\s*\(\S*\)$/\1/p" output)
          echo "Request ID: $REQUEST_ID"

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-cert-request-approve \
              --force \
              $REQUEST_ID | tee output

          CERT_ID=$(sed -n "s/^\s*Certificate ID:\s*\(\S*\)$/\1/p" output)
          echo "Cert ID: $CERT_ID"
          echo "$CERT_ID" > cert.id

      - name: Check OCSP responder with initial CRL
        run: |
          CERT_ID=$(cat cert.id)

          # https://github.com/dogtagpki/pki/wiki/UpdateCRL-Service
          docker exec client curl \
              --cert-type P12 \
              --cert $SHARED/ca/certs/admin.p12:Secret.123 \
              -sk \
              -d "xml=true" \
              https://ca.example.com:8443/ca/agent/ca/updateCRL \
              | xmllint --format -

          # wait for CRL update
          sleep 10

          # check cert status using OCSPClient
          docker exec client OCSPClient \
              -d /root/.dogtag/nssdb \
              -h ocsp.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # cert status should be good
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Good > expected
          diff expected actual

      - name: Check OCSP responder with after revocation
        run: |
          CERT_ID=$(cat cert.id)

          # place cert on-hold
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-cert-hold \
              --force \
              $CERT_ID | tee output

          # cert should be revoked
          echo "REVOKED" > expected
          sed -n "s/^\s*Status:\s*\(\S*\)$/\1/p" output > actual
          diff expected actual

          # https://github.com/dogtagpki/pki/wiki/UpdateCRL-Service
          docker exec client curl \
              --cert-type P12 \
              --cert $SHARED/ca/certs/admin.p12:Secret.123 \
              -sk \
              -d "xml=true" \
              https://ca.example.com:8443/ca/agent/ca/updateCRL \
              | xmllint --format -

          # wait for CRL update
          sleep 10

          # check cert status using OCSPClient
          docker exec client OCSPClient \
              -d /root/.dogtag/nssdb \
              -h ocsp.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # cert status should be revoked
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Revoked > expected
          diff expected actual

      - name: Check OCSP responder with after unrevocation
        run: |
          CERT_ID=$(cat cert.id)

          # place cert off-hold
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-cert-release-hold \
              --force \
              $CERT_ID | tee output

          # cert should be valid
          echo "VALID" > expected
          sed -n "s/^\s*Status:\s*\(\S*\)$/\1/p" output > actual
          diff expected actual

          # https://github.com/dogtagpki/pki/wiki/UpdateCRL-Service
          docker exec client curl \
              --cert-type P12 \
              --cert $SHARED/ca/certs/admin.p12:Secret.123 \
              -sk \
              -d "xml=true" \
              https://ca.example.com:8443/ca/agent/ca/updateCRL \
              | xmllint --format -

          # wait for CRL update
          sleep 10

          # check cert status using OCSPClient
          docker exec client OCSPClient \
              -d /root/.dogtag/nssdb \
              -h ocsp.example.com \
              -p 8080 \
              -t /ocsp/ee/ocsp \
              -c ca_signing \
              --serial $CERT_ID | tee output

          # cert status should be good
          sed -n "s/^CertStatus=\(.*\)$/\1/p" output > actual
          echo Good > expected
          diff expected actual

      - name: Restart OCSP
        run: |
          docker restart ocsp
          sleep 5

          # wait for OCSP to restart
          docker exec client curl \
              --retry 180 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://ocsp.example.com:8443

      - name: Check OCSP admin user again
        run: |
          docker exec client pki \
              -U https://ocsp.example.com:8443 \
              -n admin \
              ocsp-user-show \
              admin

      - name: Check CA DS server systemd journal
        if: always()
        run: |
          docker exec cads journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check CA DS container logs
        if: always()
        run: |
          docker logs cads

      - name: Check CA container logs
        if: always()
        run: |
          docker logs ca 2>&1

      - name: Check CA debug logs
        if: always()
        run: |
          docker exec ca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check OCSP DS server systemd journal
        if: always()
        run: |
          docker exec ocspds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check OCSP DS container logs
        if: always()
        run: |
          docker logs ocspds

      - name: Check OCSP container logs
        if: always()
        run: |
          docker logs ocsp 2>&1

      - name: Check OCSP debug logs
        if: always()
        run: |
          docker exec ocsp find /var/lib/pki/pki-tomcat/logs/ocsp -name "debug.*" -exec cat {} \;

      - name: Check client container logs
        if: always()
        run: |
          docker logs client

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh cads

          mkdir -p /tmp/artifacts/ca
          cp -r ca/certs /tmp/artifacts/ca
          cp -r ca/conf /tmp/artifacts/ca
          cp -r ca/logs /tmp/artifacts/ca

          docker logs ca > /tmp/artifacts/ca/container.out 2> /tmp/artifacts/ca/container.err

          tests/bin/ds-artifacts-save.sh ocspds

          mkdir -p /tmp/artifacts/ocsp
          cp -r ocsp/certs /tmp/artifacts/ocsp
          cp -r ocsp/conf /tmp/artifacts/ocsp
          cp -r ocsp/logs /tmp/artifacts/ocsp

          docker logs ocsp > /tmp/artifacts/ocsp/container.out 2> /tmp/artifacts/ocsp/container.err

          mkdir -p /tmp/artifacts/client
          docker logs client > /tmp/artifacts/client/container.out 2> /tmp/artifacts/client/container.err

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ocsp-container
          path: /tmp/artifacts
