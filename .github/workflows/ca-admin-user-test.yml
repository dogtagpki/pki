name: CA admin user

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Check CA users
        run: |
          docker exec pki pki-server ca-user-find

      - name: Check CA groups
        run: |
          docker exec pki pki-server ca-group-find

      - name: Check CA admin user
        run: |
          docker exec pki pki-server ca-user-show caadmin | tee output

          echo "adminType" > expected
          sed -n 's/^ *Type: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check auth with CA admin password
        run: |
          # import CA signing cert
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt

          # correct password should work
          docker exec pki pki -u caadmin -w Secret.123 ca-user-find

          # wrong password should not work
          docker exec pki pki -u caadmin -w wrong ca-user-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "PKIException: Unauthorized" > expected
          diff expected stderr

      - name: Change CA admin password
        run: |
          docker exec pki pki-server ca-user-mod --password new caadmin

          # original password should no longer work
          docker exec pki pki -u caadmin -w Secret.123 ca-user-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "PKIException: Unauthorized" > expected
          diff expected stderr

          # new password should work
          docker exec pki pki -u caadmin -w new ca-user-find

      - name: Change CA admin password with file
        run: |
          echo secret > secret.txt
          docker exec pki pki-server ca-user-mod --password-file $SHARED/secret.txt caadmin

          # password file should work
          docker exec pki pki -u caadmin -w secret ca-user-find

      - name: Remove CA admin password
        run: |
          docker exec pki pki-server ca-user-mod --password "" caadmin

          # old password should no longer work
          docker exec pki pki -u caadmin -w secret ca-user-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "PKIException: Unauthorized" > expected
          diff expected stderr

          # blank password should not work
          docker exec pki pki -u caadmin -w "" ca-user-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "PKIException: Unauthorized" > expected
          diff expected stderr

      - name: Check certs assigned to CA admin user
        run: |
          docker exec pki pki-server ca-user-cert-find caadmin | tee output

          # get admin cert ID
          sed -n 's/^ *Cert ID: *\(.*\)$/\1/p' output > cert.id
          CERT_ID=$(cat cert.id)
          echo "CERT_ID: $CERT_ID"

      - name: Check auth with CA admin cert
        run: |
          # import admin cert
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          # admin cert should work
          docker exec pki pki -n caadmin ca-user-find

      - name: Unassign certs from CA admin user
        run: |
          CERT_ID=$(cat cert.id)
          echo "CERT_ID: $CERT_ID"

          docker exec pki pki-server ca-user-cert-del caadmin "$CERT_ID"

          # admin user should have no certs
          docker exec pki pki-server ca-user-cert-find caadmin | tee actual
          diff /dev/null actual

          # admin cert should no longer work
          docker exec pki pki -n caadmin ca-user-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "PKIException: Unauthorized" > expected
          diff expected stderr

      - name: Reassign certs to CA admin user
        run: |
          CERT_ID=$(cat cert.id)
          echo "CERT_ID: $CERT_ID"

          docker exec pki pki nss-cert-export caadmin > caadmin.crt
          cat caadmin.crt | docker exec -i pki pki-server ca-user-cert-add caadmin

          # new admin cert ID should match the original admin cert ID
          docker exec pki pki-server ca-user-cert-find caadmin | tee output
          sed -n 's/^ *Cert ID: *\(.*\)$/\1/p' output > actual
          diff cert.id actual

          # admin cert should work again
          docker exec pki pki -n caadmin ca-user-find

      - name: Check CA admin roles
        run: |
          docker exec pki pki-server ca-user-role-find caadmin | tee output

          echo "Administrators" > expected
          echo "Certificate Manager Agents" >> expected
          echo "Enterprise CA Administrators" >> expected
          echo "Enterprise KRA Administrators" >> expected
          echo "Enterprise OCSP Administrators" >> expected
          echo "Enterprise RA Administrators" >> expected
          echo "Enterprise TKS Administrators" >> expected
          echo "Enterprise TPS Administrators" >> expected
          echo "Security Domain Administrators" >> expected

          sed -n 's/^ *Role ID: *\(.*\)$/\1/p' output | sort > actual
          diff expected actual

      - name: Remove CA admin role
        run: |
          docker exec pki pki-server ca-user-role-del caadmin Administrators

      - name: Authorization with CA admin cert should not work
        run: |
          docker exec pki pki -n caadmin ca-user-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "ForbiddenException: Authorization Error" > expected
          diff expected stderr

      - name: Restore CA admin role
        run: |
          docker exec pki pki-server ca-user-role-add caadmin Administrators

      - name: Authorization with CA admin cert should work again
        run: |
          docker exec pki pki -n caadmin ca-user-find

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ca-admin-user
          path: /tmp/artifacts
