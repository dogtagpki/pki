name: Installation Tests

on: [push, pull_request]

jobs:
    # "Build" job
    build:
      # This job tries to build PKI from src on a fresh docker container.
      # The docker container is spawned by github itself and we merely just
      # run the build commands. We then upload the artifact for consumption
      # by the test jobs + for the public to consume. This job **does not**
      # upload any build logs as they are visible in the log console itself.

      name: Build PKI
      runs-on: ubuntu-latest
      container: registry.fedoraproject.org/fedora:${{ matrix.os }}
      strategy:
          matrix:
            os: ['31', '32', '33']
      steps:
          - name: Update base image
            run: |
                  set -x &&
                  dnf update -y &&
                  dnf install -y dnf-plugins-core rpm-build git

          - name: Clone the repository
            uses: actions/checkout@v2

          - name: Install PKI build deps
            run: |
                  dnf copr enable -y @pki/master
                  dnf builddep -y --allowerasing --spec ./pki.spec

          - name: Build PKI packages
            run: ./build.sh --with-timestamp --with-commit-id --work-dir=../packages rpm

          - name: Compress RPMS
            run: tar -czf pki-rpms.tar.gz ../packages/RPMS/*

          # upload-artifact runs on host-vm rather than inside the container. Fixed in v2 (unreleased)
          # Bug: https://github.com/actions/upload-artifact/issues/13#issuecomment-532936650
          - name: Upload RPM artifacts
            uses: actions/upload-artifact@v1
            with:
              name: pki-build-${{ matrix.os }}
              path: pki-rpms.tar.gz

    # Code Lint job
    lint:
      # This job depends on the 'build' job and waits till it completes.
      # This job installs the built rpms and executes pylint and flak8 tests
      # on the python files listed in the rpm
      name: Code lint
      needs: build
      runs-on: ubuntu-latest
      env:
        COPR_REPO: "@pki/master"
      container: registry.fedoraproject.org/fedora:${{ matrix.os }}
      strategy:
          matrix:
            os: ['31', '32', '33']
      steps:
        - name: Update base image
          run: |
                set -x &&
                dnf update -y &&
                dnf install -y python3-pylint python3-flake8 python3-pyflakes findutils dnf-plugins-core

        - name: Download PKI binaries from Build job
          uses: actions/download-artifact@v1
          with:
            name: pki-build-${{ matrix.os }}

        - name: Extract tar.gz for rpms
          run: tar -xzf pki-build-${{ matrix.os }}/pki-rpms.tar.gz

        - name: Enable PKI COPR repo
          run: dnf copr enable -y ${COPR_REPO}

        - name: Install newly built PKI packages
          run: find . -name '*.rpm' -and -not -name '*debuginfo*' | xargs dnf -y install

        - name: Run python lint
          run: |
                /usr/share/pki/tests/bin/pki-lint \
                  --rcfile=/usr/share/pki/tests/pylintrc \
                  --config=/usr/share/pki/tests/tox.ini -v

    # Test job
    pki-tests:
      # This job depends on the 'build' job and waits till it completes.
      # This job needs container to be started manually, as Github provided
      # container **does not** use /usr/bin/init as its ENTRYPOINT.
      name: Test PKI
      needs: build
      runs-on: ubuntu-latest
      env:
        BUILDDIR: /tmp/workdir
        PKIDIR: /tmp/workdir/pki
        LOGS: ${GITHUB_WORKSPACE}/logs.txt
        COPR_REPO: "@pki/master"
      strategy:
        matrix:
          os: ['31', '32', '33']
      steps:
        - name: Clone the repository
          uses: actions/checkout@v2

        - name: Build PKI container image with systemd
          run: docker build ci/ -t pki-fedora-${{ matrix.os }} --build-arg OS_VERSION=${{ matrix.os }}

        - name: Run PKI container
          run: |
            IMAGE=pki-fedora-${{ matrix.os }} \
            NAME=pki.example.com \
            HOSTNAME=pki.example.com \
            ci/runner-init.sh

        - name: Download PKI binaries from Build job
          uses: actions/download-artifact@v1
          with:
            name: pki-build-${{ matrix.os }}

        - name: Extract tar.gz for rpms
          run: tar -xzf pki-build-${{ matrix.os }}/pki-rpms.tar.gz

        - name: Install required packages
          run: docker exec -i pki.example.com dnf install -y findutils dnf-plugins-core wget 389-ds-base

        - name: Enable PKI COPR repo
          run: docker exec -i pki.example.com dnf copr enable -y ${COPR_REPO}

        - name: Install PKI packages
          run: docker exec -i pki.example.com bash -c "find ${PKIDIR} -name '*.rpm' -and -not -name '*debuginfo*' | xargs dnf -y install"

        - name: Install DS
          run: docker exec -i pki.example.com ${PKIDIR}/ci/ds-create.sh

        - name: Install CA
          run: docker exec -i pki.example.com pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

        - name: Install KRA
          run: docker exec -i pki.example.com pkispawn -f /usr/share/pki/server/examples/installation/kra.cfg -s KRA -v

        - name: Install OCSP
          run: docker exec -i pki.example.com pkispawn -f /usr/share/pki/server/examples/installation/ocsp.cfg -s OCSP -v

        - name: Install TKS
          run: docker exec -i pki.example.com pkispawn -f /usr/share/pki/server/examples/installation/tks.cfg -s TKS -v

        - name: Install TPS
          run: docker exec -i pki.example.com pkispawn -f /usr/share/pki/server/examples/installation/tps.cfg -s TPS -v

        - name: Run PKI Healthcheck
          run: docker exec -i pki.example.com bash -c "/usr/sbin/pki-healthcheck --debug"

        - name: Gather instance config
          if: always()
          run: docker exec -i pki.example.com bash -c "cp -rf /etc/pki /var/log/pki/etc-pki"

        - name: Remove TPS
          run: docker exec -i pki.example.com pkidestroy -i pki-tomcat -s TPS -v

        - name: Remove TKS
          run: docker exec -i pki.example.com pkidestroy -i pki-tomcat -s TKS -v

        - name: Remove OCSP
          run: docker exec -i pki.example.com pkidestroy -i pki-tomcat -s OCSP -v

        - name: Remove KRA
          run: docker exec -i pki.example.com pkidestroy -i pki-tomcat -s KRA -v

        - name: Remove CA
          run: docker exec -i pki.example.com pkidestroy -i pki-tomcat -s CA -v

        - name: Remove DS
          run: docker exec -i pki.example.com ${PKIDIR}/ci/ds-remove.sh

        - name: Gather logs
          if: always()
          run: |
            docker exec -i pki.example.com bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-journalctl.log"
            docker exec -i pki.example.com bash -c "tar -czf ${PKIDIR}/pki-logs.tar.gz /var/log/pki"

        - name: Upload logs
          if: always()
          uses: actions/upload-artifact@v1
          with:
            name: pki-logs-${{ matrix.os }}
            path: pki-logs.tar.gz
