name: EST with ds realm

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/ca/Installing_CA.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DB_IMAGE }} \
              --hostname=ds.example.com \
              --password=Secret.123 \
              --network=example \
              --network-alias=ds.example.com \
              ds

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh \
          --hostname=pki.example.com \
          --network=example \
          --network-alias=ca.example.com \
          pki

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki pki info

      - name: Add CA EST user
        run: |
          docker exec pki pki -n caadmin ca-group-add "EST RA Agents"
          docker exec pki pki -n caadmin ca-user-add \
              est-ra-1 --fullName "EST RA 1" --password Secret.est
          docker exec pki pki -n caadmin ca-group-member-add "EST RA Agents" est-ra-1

      - name: Configure CA est profile
        run: |
          docker exec pki pki -n caadmin ca-profile-add \
              --raw /usr/share/pki/ca/profiles/ca/estServiceCert.cfg
          docker exec pki pki -n caadmin ca-profile-enable estServiceCert
          docker exec pki pki-server restart --wait

      - name: Set up EST user DB
        run: |
          docker exec -i pki ldapadd -x -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager"  -w Secret.123 \
              -f /usr/share/pki/est/conf/realm/ds/create.ldif

      - name: Install EST
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/est.cfg \
              -s EST \
              -D est_realm_url=ldap://ds.example.com:3389 \
              -v

      - name: Check EST backend config
        if: always()
        run: |
          docker exec pki cat /etc/pki/pki-tomcat/est/backend.conf

      - name: Check EST authorizer config
        if: always()
        run: |
          docker exec pki cat /etc/pki/pki-tomcat/est/authorizer.conf

      - name: Check EST realm config
        if: always()
        run: |
          docker exec pki cat /etc/pki/pki-tomcat/est/realm.conf

      - name: Check webapps
        run: |
          docker exec pki pki-server webapp-find | tee output

          # CA instance should have ROOT, ca, and pki webapps
          echo "ROOT" > expected
          echo "ca" >> expected
          echo "est" >> expected
          echo "pki" >> expected
          sed -n 's/^ *Webapp ID: *\(.*\)$/\1/p' output > actual
          diff expected actual

          docker exec pki pki-server webapp-show ROOT
          docker exec pki pki-server webapp-show ca
          docker exec pki pki-server webapp-show est
          docker exec pki pki-server webapp-show pki

      - name: Check PKI server base dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser alias -> /var/lib/pki/pki-tomcat/conf/alias
          lrwxrwxrwx pkiuser pkiuser bin -> /usr/share/tomcat/bin
          drwxrwx--- pkiuser pkiuser ca
          drwxrwx--- pkiuser pkiuser common
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser est
          lrwxrwxrwx pkiuser pkiuser lib -> /usr/share/pki/server/lib
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser temp
          drwxr-xr-x pkiuser pkiuser webapps
          drwxrwx--- pkiuser pkiuser work
          EOF

          diff expected output

      - name: Check PKI server conf dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          drwxrwx--- pkiuser pkiuser est
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          -rw-rw---- pkiuser pkiuser tomcat.conf
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check PKI server logs dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          drwxrwx--- pkiuser pkiuser est
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Check EST conf dir
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat/est \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          -rw-rw-r-- pkiuser pkiuser CS.cfg
          -rw-rw---- pkiuser pkiuser authorizer.conf
          -rw-rw---- pkiuser pkiuser backend.conf
          -rw-rw-r-- pkiuser pkiuser realm.conf
          -rw-rw-r-- pkiuser pkiuser registry.cfg
          EOF

          diff expected output


      - name: Create EST user
        run: |
          docker exec -i pki ldapadd -x -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager"  -w Secret.123 << EOF
          dn: uid=est-test-user,ou=people,dc=est,dc=pki,dc=example,dc=com
          objectClass: top
          objectClass: person
          objectClass: organizationalPerson
          objectClass: inetOrgPerson
          objectClass: cmsuser
          uid: est-test-user
          sn: test.example.com
          cn: test.example.com
          usertype: undefined
          userPassword: Secret.123
          EOF

      - name: Add EST user to EST Users group
        run: |
          docker exec -i pki ldapmodify -x -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager"  -w Secret.123 << EOF
          dn: cn=EST Users,ou=groups,dc=est,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=est-test-user,ou=People,dc=est,dc=pki,dc=example,dc=com
          EOF

      - name: Test CA certs
        run: |
          docker exec pki curl -o cacert.p7 -k https://pki.example.com:8443/.well-known/est/cacerts
          docker exec pki openssl base64 -d --in cacert.p7 --out cacert.p7.der
          docker exec pki openssl pkcs7 --in cacert.p7.der -inform DER -print_certs -quiet -out cacert.pem
          docker exec pki openssl x509 -in cacert.pem -text -noout | tee actual
          docker exec pki openssl x509 -in ca_signing.crt -text -noout | tee expected
          diff expected actual

      - name: Install est client
        run: |
          docker exec pki dnf copr enable -y @pki/libest
          docker exec pki dnf install -y libest

      - name: Enroll certificate with user/password
        run: |
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -e -s pki.example.com -p 8443 \
              --common-name test.example.com -o . -u est-test-user -h Secret.123

          docker exec pki openssl base64 -d --in cert-0-0.pkcs7 --out cert-0-0.pkcs7.der
          docker exec pki openssl pkcs7 -in cert-0-0.pkcs7.der -inform DER -print_certs -quiet -out cert.pem
          docker exec pki openssl x509 -in cert.pem -subject -noout | tee actual
          echo "subject=CN=test.example.com" > expected
          diff expected actual

      - name: Enroll new certificate with certificate but using different CN
        run: |
          docker exec pki mkdir new_certs0
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -e -s pki.example.com -p 8443 \
              --common-name test-new.example.com -o ./new_certs0 -u est-test-user -h Secret.123 | tee output || true

          # Request should fails with authorization error (status code 403)
          STATUS=$(cat output  | sed -nE 's/.* HTTP response HTTP\/1.1 ([[:digit:]]*).*$/\1/p')
          [ "$STATUS" == "403" ]

      - name: Add certificate to the user
        run: |
          VERSION=$(docker exec pki PrettyPrintCert cert.pem | sed -n 's/\s*Version:\s*v3/2/p')
          SERIAL_HEX=$(docker exec pki PrettyPrintCert cert.pem | sed -n 's/\s*Serial Number:\s*0x\(.*\)/\1/p')
          SERIAL=$(python3 -c 'print(int("'$SERIAL_HEX'", 16))')
          ISSUER=$(docker exec pki PrettyPrintCert cert.pem | sed -n 's/\s*Issuer:\s*\(.*\)/\1/p' | sed 's/, /,/g')
          SUBJECT=$(docker exec pki PrettyPrintCert cert.pem | sed -n 's/\s*Subject:\s*\(.*\)/\1/p' | sed 's/, /,/g')

          docker exec pki openssl x509 -in cert.pem -outform DER -out cert.der
          CERTIFICATE=$(docker exec pki openssl base64 -in cert.der | sed 's/^/ /')

          docker exec -i pki ldapmodify -H ldap://ds.example.com:3389 -D "cn=Directory Manager" -w Secret.123 <<EOF
          dn: uid=est-test-user,ou=people,dc=est,dc=pki,dc=example,dc=com
          changetype: modify
          add: description
          description: $VERSION;$SERIAL;$ISSUER;$SUBJECT
          -
          add: userCertificate
          userCertificate::$CERTIFICATE
          EOF

          docker exec -i pki ldapsearch -H ldap://ds.example.com:3389 -D "cn=Directory Manager" -w Secret.123 -b ou=people,dc=est,dc=pki,dc=example,dc=com

      - name: Enroll new certificate with certificate
        run: |
          docker exec pki mkdir new_certs1
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -e -s pki.example.com -p 8443 \
              --common-name test.example.com -o ./new_certs1 -c cert.pem -k key-x-x.pem

          docker exec pki openssl base64 -d --in new_certs1/cert-0-0.pkcs7 --out new_certs1/cert-0-0.pkcs7.der
          docker exec pki openssl pkcs7 -in new_certs1/cert-0-0.pkcs7.der -inform DER -print_certs -quiet -out new_certs1/cert.pem
          docker exec pki openssl x509 -in new_certs1/cert.pem -subject -noout | tee actual
          echo "subject=CN=test.example.com" > expected
          diff expected actual

      - name: Re-Enroll new certificate with certificate
        run: |
          docker exec pki mkdir re_certs
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -r -s pki.example.com -p 8443 \
              -o ./re_certs -c cert.pem -k key-x-x.pem

          docker exec pki openssl base64 -d --in re_certs/cert-0-0.pkcs7 --out re_certs/cert-0-0.pkcs7.der
          docker exec pki openssl pkcs7 -in re_certs/cert-0-0.pkcs7.der -inform DER -print_certs -quiet -out re_certs/cert.pem
          docker exec pki openssl x509 -in re_certs/cert.pem -subject -noout | tee actual
          echo "subject=CN=test.example.com" > expected
          diff expected actual

      - name: Enroll new certificate with certificate but using different subject
        run: |
          docker exec pki mkdir new_certs2
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -e -s pki.example.com -p 8443 \
              --common-name test-new.example.com -o ./new_certs2 -c cert.pem -k key-x-x.pem | tee output || true

          # Request should fails with authorization error (status code 403)
          STATUS=$(cat output  | sed -nE 's/.* HTTP response HTTP\/1.1 ([[:digit:]]*).*$/\1/p')
          [ "$STATUS" == "403" ]

      - name: Disable subject for enroll
        run: |
          docker exec pki cat /etc/pki/pki-tomcat/est/authorizer.conf > authorizer.conf
          echo "enrollMatchTLSSubjSAN=false" >> authorizer.conf
          docker cp authorizer.conf pki:/etc/pki/pki-tomcat/est/authorizer.conf

          docker exec pki pki-server restart --wait

      - name: Enroll certificate with user/password but using different subject and check disabled
        run: |
          docker exec pki mkdir new_certs3
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -e -s pki.example.com -p 8443 \
              --common-name test-new.example.com -o new_certs3 -u est-test-user -h Secret.123

          docker exec pki openssl base64 -d --in new_certs3/cert-0-0.pkcs7 --out new_certs3/cert-0-0.pkcs7.der
          docker exec pki openssl pkcs7 -in new_certs3/cert-0-0.pkcs7.der -inform DER -print_certs -quiet -out new_certs3/cert.pem
          docker exec pki openssl x509 -in new_certs3/cert.pem -subject -noout | tee actual
          echo "subject=CN=test-new.example.com" > expected
          diff expected actual

      - name: Enroll new certificate with certificate but using different subject and check disabled
        run: |
          docker exec pki mkdir new_certs4
          docker exec -e EST_OPENSSL_CACERT=cacert.pem pki estclient -e -s pki.example.com -p 8443 \
              --common-name test-new.example.com -o ./new_certs4 -c cert.pem -k key-x-x.pem

          docker exec pki openssl base64 -d --in new_certs4/cert-0-0.pkcs7 --out new_certs4/cert-0-0.pkcs7.der
          docker exec pki openssl pkcs7 -in new_certs4/cert-0-0.pkcs7.der -inform DER -print_certs -quiet -out new_certs4/cert.pem
          docker exec pki openssl x509 -in new_certs4/cert.pem -subject -noout | tee actual
          echo "subject=CN=test-new.example.com" > expected
          diff expected actual

      - name: Remove EST
        run: |
          docker exec pki pkidestroy -i pki-tomcat -s EST -v

      - name: Remove CA
        run: |
          docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Check PKI server base dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/pki-tomcat
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          EOF

          diff expected output

      - name: Check PKI server conf dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          drwxrwx--- pkiuser pkiuser est
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          -rw-rw---- pkiuser pkiuser tomcat.conf
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check PKI server logs dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          drwxrwx--- pkiuser pkiuser est
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check EST debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/est -name "debug.*" -exec cat {} \;
