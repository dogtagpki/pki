name: CA container

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # https://github.com/dogtagpki/pki/wiki/Deploying-CA-Container
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Create CA signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --validity-length 1 \
              --validity-unit year \
              --cert ca_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing
          docker exec client pki \
              nss-cert-show \
              ca_signing

      - name: Create OCSP signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr ocsp_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --cert ocsp_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert ocsp_signing.crt \
              ocsp_signing
          docker exec client pki \
              nss-cert-show \
              ocsp_signing

      - name: Create audit signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr audit_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert audit_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert audit_signing.crt \
              --trust ,,P \
              audit_signing
          docker exec client pki \
              nss-cert-show \
              audit_signing

      - name: Create subsystem cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --csr subsystem.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec client pki \
              nss-cert-import \
              --cert subsystem.crt \
              subsystem
          docker exec client pki \
              nss-cert-show \
              subsystem

      - name: Create SSL server cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=ca.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec client pki \
              nss-cert-import \
              --cert sslserver.crt \
              sslserver
          docker exec client pki \
              nss-cert-show \
              sslserver

      - name: Create admin cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Administrator" \
              --ext /usr/share/pki/server/certs/admin.conf \
              --csr admin.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert admin.crt
          docker exec client pki \
              nss-cert-import \
              --cert admin.crt \
              admin
          docker exec client pki \
              nss-cert-show \
              admin

      - name: Export system certs and keys
        run: |
          docker exec client pki \
              pkcs12-export \
              --pkcs12 server.p12 \
              --password Secret.123 \
              ca_signing \
              ocsp_signing \
              audit_signing \
              subsystem \
              sslserver

      - name: Export admin cert and key
        run: |
          docker exec client pki \
              pkcs12-export \
              --pkcs12 admin.p12 \
              --password Secret.123 \
              admin

      - name: Prepare certs folder
        run: |
          mkdir certs
          docker cp client:server.p12 certs
          docker cp client:admin.p12 certs
          docker cp client:ca_signing.csr certs
          docker cp client:ocsp_signing.csr certs
          docker cp client:audit_signing.csr certs
          docker cp client:subsystem.csr certs
          docker cp client:sslserver.csr certs
          docker cp client:admin.csr certs
          ls -la certs

      - name: Prepare data folder
        run: |
          mkdir data
          ls -la data

      - name: Set up CA container
        run: |
          docker run \
              --name ca \
              --hostname=ca.example.com \
              --network=example \
              --network-alias=ca.example.com \
              -v $PWD/certs:/certs \
              -v $PWD/data:/data \
              --detach \
              pki-ca

      - name: Wait for CA container to start
        run: |
          docker exec client curl \
              --retry 180 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://ca.example.com:8443

      - name: Check data dir
        if: always()
        run: |
          ls -l data \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # everything should be owned by pkiuser:root (UID=17, GID=0)
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwxrwx 17 root conf
          drwxrwxrwx 17 root logs
          EOF

          diff expected output

      - name: Check data/conf dir
        if: always()
        run: |
          ls -l data/conf \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # everything should be owned by pkiuser:root (UID=17, GID=0)
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwx--- 17 root Catalina
          drwxrwx--- 17 root alias
          drwxrwx--- 17 root ca
          -rw-rw-rw- 17 root catalina.policy
          lrwxrwxrwx 17 root catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- 17 root certs
          lrwxrwxrwx 17 root context.xml -> /etc/tomcat/context.xml
          lrwxrwxrwx 17 root logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- 17 root password.conf
          -rw-rw---- 17 root server.xml
          -rw-rw---- 17 root serverCertNick.conf
          -rw-rw---- 17 root tomcat.conf
          lrwxrwxrwx 17 root web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check data/logs dir
        if: always()
        run: |
          ls -l data/logs \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # everything should be owned by pkiuser:root (UID=17, GID=0)
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwx--- 17 root backup
          drwxrwx--- 17 root ca
          -rw-rw-r-- 17 root catalina.$DATE.log
          -rw-rw-r-- 17 root host-manager.$DATE.log
          -rw-rw-r-- 17 root localhost.$DATE.log
          -rw-rw-rw- 17 root localhost_access_log.$DATE.txt
          -rw-rw-r-- 17 root manager.$DATE.log
          drwxrwxrwx 17 root pki
          EOF

          diff expected output

      - name: Check basic operations from CA container
        run: |
          # check PKI server info
          docker exec ca pki info

      - name: Check basic operations from client container
        run: |
          # check PKI server info
          docker exec client pki \
              -U https://ca.example.com:8443 \
              info

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database
      - name: Initialize CA database
        run: |
          docker exec ca pki-server ca-db-init -v

      - name: Add CA search indexes
        run: |
          docker exec ca pki-server ca-db-index-add -v

      - name: Rebuild CA search indexes
        run: |
          docker exec ca pki-server ca-db-index-rebuild -v

      - name: Add CA VLV indexes
        run: |
          docker exec ca pki-server ca-db-vlv-add -v

      - name: Rebuild CA VLV indexes
        run: |
          docker exec ca pki-server ca-db-vlv-reindex -v

      - name: Import CA signing cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/ca_signing.csr \
              --profile /usr/share/pki/ca/conf/caCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/ca_signing.crt \
              --profile /usr/share/pki/ca/conf/caCert.profile \
              --request $REQUEST_ID

      - name: Import CA OCSP signing cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/ocsp_signing.csr \
              --profile /usr/share/pki/ca/conf/caOCSPCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/ocsp_signing.crt \
              --profile /usr/share/pki/ca/conf/caOCSPCert.profile \
              --request $REQUEST_ID

      - name: Import CA audit signing cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/audit_signing.csr \
              --profile /usr/share/pki/ca/conf/caAuditSigningCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/audit_signing.crt \
              --profile /usr/share/pki/ca/conf/caAuditSigningCert.profile \
              --request $REQUEST_ID

      - name: Import subsystem cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/subsystem.csr \
              --profile /usr/share/pki/ca/conf/rsaSubsystemCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/subsystem.crt \
              --profile /usr/share/pki/ca/conf/rsaSubsystemCert.profile \
              --request $REQUEST_ID

      - name: Import SSL server cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/sslserver.csr \
              --profile /usr/share/pki/ca/conf/rsaServerCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/sslserver.crt \
              --profile /usr/share/pki/ca/conf/rsaServerCert.profile \
              --request $REQUEST_ID

      - name: Import admin cert into CA database
        run: |
          docker exec ca pki-server ca-cert-request-import \
              --csr /certs/admin.csr \
              --profile /usr/share/pki/ca/conf/rsaAdminCert.profile | tee output
          REQUEST_ID=$(sed -n 's/Request ID: *\(.*\)/\1/p' output)

          docker exec ca pki-server ca-cert-import \
              --cert /certs/admin.crt \
              --profile /usr/share/pki/ca/conf/rsaAdminCert.profile \
              --request $REQUEST_ID

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Admin-User
      - name: Add admin user
        run: |
          docker exec ca pki-server ca-user-add \
              --full-name Administrator \
              --type adminType \
              admin

      - name: Assign admin cert to admin user
        run: |
          docker exec ca pki-server ca-user-cert-add \
              --cert /certs/admin.crt \
              admin

      - name: Add admin user into CA groups
        run: |
          docker exec ca pki-server ca-user-role-add admin "Administrators"
          docker exec ca pki-server ca-user-role-add admin "Certificate Manager Agents"
          docker exec ca pki-server ca-user-role-add admin "Security Domain Administrators"
          docker exec ca pki-server ca-user-role-add admin "Enterprise CA Administrators"
          docker exec ca pki-server ca-user-role-add admin "Enterprise KRA Administrators"
          docker exec ca pki-server ca-user-role-add admin "Enterprise RA Administrators"
          docker exec ca pki-server ca-user-role-add admin "Enterprise TKS Administrators"
          docker exec ca pki-server ca-user-role-add admin "Enterprise OCSP Administrators"
          docker exec ca pki-server ca-user-role-add admin "Enterprise TPS Administrators"

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database-User
      - name: Add database user
        run: |
          docker exec ca pki-server ca-user-add \
              --full-name pkidbuser \
              --type agentType \
              pkidbuser

      - name: Assign subsystem cert to database user
        run: |
          docker exec ca pki-server ca-user-cert-add \
              --cert /certs/subsystem.crt \
              pkidbuser

      - name: Add database user into CA groups
        run: |
          docker exec ca pki-server ca-user-role-add pkidbuser "Subsystem Group"
          docker exec ca pki-server ca-user-role-add pkidbuser "Certificate Manager Agents"

      - name: Grant database user access to CA database
        run: |
          docker exec ca pki-server ca-db-access-grant \
              uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com

      - name: Check public operations from CA container
        run: |
          # check certs in CA
          docker exec ca pki ca-cert-find

      - name: Check admin operations from CA container
        run: |
          # check admin user
          docker exec ca pki \
              -n admin \
              ca-user-show \
              admin

          docker exec ca pki \
              client-cert-request \
              uid=testuser | tee output

          REQUEST_ID=$(sed -n -e 's/^ *Request ID: *\(.*\)$/\1/p' output)
          echo "REQUEST_ID: $REQUEST_ID"

          docker exec ca pki \
              -n admin \
              ca-cert-request-approve \
              $REQUEST_ID \
              --force

      - name: Check public operations from client container
        run: |
          # check certs in CA
          docker exec client pki \
              -U https://ca.example.com:8443 \
              ca-cert-find

      - name: Check admin operations from client container
        run: |
          # check admin user
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-user-show \
              admin

          docker exec client pki \
              -U https://ca.example.com:8443 \
              client-cert-request \
              uid=testuser | tee output

          REQUEST_ID=$(sed -n -e 's/^ *Request ID: *\(.*\)$/\1/p' output)
          echo "REQUEST_ID: $REQUEST_ID"

          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-cert-request-approve \
              $REQUEST_ID \
              --force

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check CA container logs
        if: always()
        run: |
          docker logs ca 2>&1

      - name: Check CA debug logs
        if: always()
        run: |
          docker exec ca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds

          docker exec ca ls -la /etc/pki
          mkdir -p /tmp/artifacts/ca/etc/pki
          docker cp ca:/etc/pki/pki.conf /tmp/artifacts/ca/etc/pki

          docker exec ca ls -la /var/lib/pki/pki-tomcat/conf/
          mkdir -p /tmp/artifacts/ca/var/lib/pki/pki-tomcat/conf
          docker cp ca:/var/lib/pki/pki-tomcat/conf/. /tmp/artifacts/ca/var/lib/pki/pki-tomcat/conf

          docker exec ca ls -la /var/log/pki
          mkdir -p /tmp/artifacts/ca/var/log
          docker cp ca:/var/log/pki /tmp/artifacts/ca/var/log

          docker logs ca > /tmp/artifacts/ca/container.out 2> /tmp/artifacts/ca/container.err

          mkdir -p /tmp/artifacts/client
          docker logs client > /tmp/artifacts/client/container.out 2> /tmp/artifacts/client/container.err

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ca-container
          path: /tmp/artifacts
