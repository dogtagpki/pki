name: TKS Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tks --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-tks-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-tks-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tks-runner.tar

  tks-basic-test:
    name: Basic TKS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/tks-basic-test.yml
    with:
      os: ${{ matrix.os }}

  tks-separate-test:
    name: TKS on separate instance
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/tks-separate-test.yml
    with:
      os: ${{ matrix.os }}

  tks-external-certs-test:
    name: Testing TKS with external certificates
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tks-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tks-runner.tar

      - name: Load runner image
        run: docker load --input pki-tks-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-container-create.sh cads
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: cads.example.com
          PASSWORD: Secret.123

      - name: Connect CA DS container to network
        run: docker network connect example cads --alias cads.example.com

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh ca
        env:
          HOSTNAME: ca.example.com

      - name: Connect CA container to network
        run: docker network connect example ca --alias ca.example.com

      - name: Install CA in CA container
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=cads.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec ca pki-server cert-find

      - name: Initialize CA admin in CA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec ca pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Set up TKS DS container
        run: |
          tests/bin/ds-container-create.sh tksds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tksds.example.com
          PASSWORD: Secret.123

      - name: Connect TKS DS container to network
        run: docker network connect example tksds --alias tksds.example.com

      - name: Set up TKS container
        run: |
          tests/bin/runner-init.sh tks
        env:
          HOSTNAME: tks.example.com

      - name: Connect TKS container to network
        run: docker network connect example tks --alias tks.example.com

      - name: Install TKS in TKS container (step 1)
        run: |
          docker exec tks pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_hostname=tksds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_external=True \
              -D pki_external_step_two=False \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/tks_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/tks_admin.csr \
              -v

      - name: Issue subsystem cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/subsystem.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caSubsystemCert --csr-file ${SHARED}/subsystem.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/subsystem.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat subsystem.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/subsystem.certid"
          docker exec ca bash -c "pki ca-cert-export `cat subsystem.certid` --output-file ${SHARED}/subsystem.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/subsystem.crt

      - name: Issue SSL server cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/sslserver.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caServerCert --csr-file ${SHARED}/sslserver.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/sslserver.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat sslserver.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/sslserver.certid"
          docker exec ca bash -c "pki ca-cert-export `cat sslserver.certid` --output-file ${SHARED}/sslserver.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/sslserver.crt

      - name: Issue TKS audit signing cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/tks_audit_signing.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caAuditSigningCert --csr-file ${SHARED}/tks_audit_signing.csr | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/tks_audit_signing.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat tks_audit_signing.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/tks_audit_signing.certid"
          docker exec ca bash -c "pki ca-cert-export `cat tks_audit_signing.certid` --output-file ${SHARED}/tks_audit_signing.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/tks_audit_signing.crt

      - name: Issue TKS admin cert
        run: |
          docker exec ca openssl req -text -noout -in ${SHARED}/tks_admin.csr
          docker exec ca bash -c "pki ca-cert-request-submit --profile caUserCert --csr-file ${SHARED}/tks_admin.csr --subject uid=tksadmin | sed -n 's/Request ID: *\(.*\)/\1/p' > ${SHARED}/tks_admin.reqid"
          docker exec ca bash -c "pki -n caadmin ca-cert-request-approve `cat tks_admin.reqid` --force | sed -n 's/Certificate ID: *\(.*\)/\1/p' > ${SHARED}/tks_admin.certid"
          docker exec ca bash -c "pki ca-cert-export `cat tks_admin.certid` --output-file ${SHARED}/tks_admin.crt"
          docker exec ca openssl x509 -text -noout -in ${SHARED}/tks_admin.crt

      - name: Install TKS in TKS container (step 2)
        run: |
          docker exec tks pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_ds_hostname=tksds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_external=True \
              -D pki_external_step_two=True \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_sslserver_csr_path=${SHARED}/sslserver.csr \
              -D pki_audit_signing_csr_path=${SHARED}/tks_audit_signing.csr \
              -D pki_admin_csr_path=${SHARED}/tks_admin.csr \
              -D pki_subsystem_cert_path=${SHARED}/subsystem.crt \
              -D pki_sslserver_cert_path=${SHARED}/sslserver.crt \
              -D pki_audit_signing_cert_path=${SHARED}/tks_audit_signing.crt \
              -D pki_admin_cert_path=${SHARED}/tks_admin.crt \
              -v

          docker exec tks pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec tks pki-healthcheck --failures-only

      - name: Verify TKS admin
        run: |
          docker exec tks pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec tks pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/tks_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tks pki -n tksadmin tks-user-show tksadmin

      - name: Gather artifacts from CA containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/ca cads
          tests/bin/pki-artifacts-save.sh ca
        continue-on-error: true

      - name: Gather artifacts from TKS containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tks tksds
          tests/bin/pki-artifacts-save.sh tks
        continue-on-error: true

      - name: Remove TKS
        run: docker exec tks pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove CA
        run: docker exec ca pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from CA containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tks-external-certs-ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/ca

      - name: Upload artifacts from TKS containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tks-external-certs-tks-${{ matrix.os }}
          path: |
            /tmp/artifacts/tks

  # docs/installation/tks/Installing_TKS_Clone.md
  # This test installs DS, CA, and TKS in the primary containers,
  # then installs DS clone, CA clone, and TKS clone in the secondary containers.
  tks-clone-test:
    name: Testing TKS clone
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tks-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tks-runner.tar

      - name: Load runner image
        run: docker load --input pki-tks-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-container-create.sh primaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: primaryds.example.com
          PASSWORD: Secret.123

      - name: Connect primary DS container to network
        run: docker network connect example primaryds --alias primaryds.example.com

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh primary
        env:
          HOSTNAME: primary.example.com

      - name: Connect primary PKI container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec primary pki-server cert-find

      - name: Install TKS in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-container-create.sh secondaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: secondaryds.example.com
          PASSWORD: Secret.123

      - name: Connect secondary DS container to network
        run: docker network connect example secondaryds --alias secondaryds.example.com

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          HOSTNAME: secondary.example.com

      - name: Connect secondary PKI container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec primary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec secondary pki-server cert-find

      - name: Install TKS in secondary PKI container
        run: |
          docker exec primary pki-server tks-clone-prepare --pkcs12-file ${SHARED}/tks-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks-clone.cfg \
              -s TKS \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/tks-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Verify TKS admin in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec secondary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec secondary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin tks-user-show tksadmin

      - name: Set up tertiary DS container
        run: |
          tests/bin/ds-container-create.sh tertiaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tertiaryds.example.com
          PASSWORD: Secret.123

      - name: Connect tertiary DS container to network
        run: docker network connect example tertiaryds --alias tertiaryds.example.com

      - name: Set up tertiary PKI container
        run: |
          tests/bin/runner-init.sh tertiary
        env:
          HOSTNAME: tertiary.example.com

      - name: Connect tertiary PKI container to network
        run: docker network connect example tertiary --alias tertiary.example.com

      - name: Install CA in tertiary PKI container
        run: |
          docker exec secondary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec secondary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=tertiaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec tertiary pki-server cert-find

      - name: Install TKS in tertiary PKI container
        run: |
          docker exec secondary pki-server tks-clone-prepare --pkcs12-file ${SHARED}/tks-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks-clone-of-clone.cfg \
              -s TKS \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/tks-certs.p12 \
              -D pki_ds_hostname=tertiaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Run PKI healthcheck in primary container
        run: docker exec primary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in secondary container
        run: docker exec secondary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in tertiary container
        run: docker exec tertiary pki-healthcheck --failures-only

      - name: Verify TKS admin in tertiary PKI container
        run: |
          docker exec tertiary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec tertiary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tertiary pki -n caadmin tks-user-show tksadmin

      - name: Gather artifacts from primary containers
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/primary primaryds
          tests/bin/pki-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/secondary secondaryds
          tests/bin/pki-artifacts-save.sh secondary
        continue-on-error: true

      - name: Gather artifacts from tertiary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tertiary tertiaryds
          tests/bin/pki-artifacts-save.sh tertiary
        continue-on-error: true

      - name: Remove TKS from tertiary PKI container
        run: docker exec tertiary pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove CA from tertiary PKI container
        run: docker exec tertiary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove TKS from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove CA from secondary PKI container
        run: docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove TKS from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s TKS -v

      - name: Remove CA from primary PKI container
        run: docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from primary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tks-clone-primary-${{ matrix.os }}
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tks-clone-secondary-${{ matrix.os }}
          path: |
            /tmp/artifacts/secondary

      - name: Upload artifacts from tertiary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: tks-clone-tertiary-${{ matrix.os }}
          path: |
            /tmp/artifacts/tertiary
