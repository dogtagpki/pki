name: Server upgrade

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=pki.example.com \
              --network=example \
              --network-alias=pki.example.com \
              pki

      - name: Add upgrade script
        run: |
          MAJOR_VERSION=$(sed -n 's/^%global *major_version *\(.*\)$/\1/p' pki.spec)
          MINOR_VERSION=$(sed -n 's/^%global *minor_version *\(.*\)$/\1/p' pki.spec)
          UPDATE_VERSION=$(sed -n 's/^%global *update_version *\(.*\)$/\1/p' pki.spec)

          VERSION=$MAJOR_VERSION.$MINOR_VERSION.$UPDATE_VERSION
          echo "VERSION: $VERSION"

          UPGRADE_DIR=/usr/share/pki/server/upgrade/$VERSION
          echo "UPGRADE_DIR: $UPGRADE_DIR"

          docker exec pki mkdir -p $UPGRADE_DIR
          docker exec pki ls $UPGRADE_DIR | tee output

          LAST_SCRIPT=$(tail -1 output)
          echo "LAST_SCRIPT: $LAST_SCRIPT"

          LAST_INDEX=$(echo "$LAST_SCRIPT" | sed 's/^\([0-9]*\).*$/\1/')
          echo "LAST_INDEX: $LAST_INDEX"

          if [ -z "$LAST_INDEX" ];then
              INDEX="01"
          else
              INDEX=$((LAST_INDEX + 1))
              if [ "$INDEX" -lt "10" ];then
                  INDEX="0$INDEX"
              fi
          fi
          echo "INDEX: $INDEX"

          docker exec pki cp \
              /usr/share/pki/server/examples/upgrade/01-BasicUpgradeScript.py \
              $UPGRADE_DIR/$INDEX-BasicUpgradeScript.py
          docker exec pki ls $UPGRADE_DIR

      - name: Run pki-server upgrade without any servers
        run: |
          docker exec pki pki-server upgrade \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # upgrade should fail
          cat > expected << EOF
          ERROR: Invalid instance: pki-tomcat
          EOF

          diff expected stderr

      - name: Run pki-server db-schema-upgrade without any servers
        run: |
          docker exec pki pki-server db-schema-upgrade \
              -w Secret.123 \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # upgrade should fail
          cat > expected << EOF
          ERROR: Invalid instance: pki-tomcat
          EOF

          diff expected stderr

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_audit_signing_nickname= \
              -v

      - name: Check CA admin cert
        run: |
          docker exec pki pki-server cert-export \
              --cert-file ca_signing.crt \
              ca_signing

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Run pki-server upgrade with one server
        run: |
          docker exec pki pki-server upgrade -v | tee output

          # verify that the upgrade script was executed
          grep "BasicUpgradeScript:" output | tee actual
          [ -s actual ]

      - name: Run pki-server db-schema-upgrade with one server
        run: |
          docker exec pki pki-server db-schema-upgrade \
              -w Secret.123

      - name: Restart PKI server after upgrade
        run: |
          docker exec pki pki-server restart --wait

      - name: Check CA admin cert after upgrade
        run: |
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Remove CA
        run: |
          docker exec pki pkidestroy -s CA -v
