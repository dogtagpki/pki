name: Server upgrade

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ inputs.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Add upgrade script
        run: |
          MAJOR_VERSION=$(sed -n 's/^%global *major_version *\(.*\)$/\1/p' pki.spec)
          MINOR_VERSION=$(sed -n 's/^%global *minor_version *\(.*\)$/\1/p' pki.spec)
          UPDATE_VERSION=$(sed -n 's/^%global *update_version *\(.*\)$/\1/p' pki.spec)

          VERSION=$MAJOR_VERSION.$MINOR_VERSION.$UPDATE_VERSION
          echo "VERSION: $VERSION"

          UPGRADE_DIR=/usr/share/pki/server/upgrade/$VERSION
          echo "UPGRADE_DIR: $UPGRADE_DIR"

          docker exec pki mkdir -p $UPGRADE_DIR
          docker exec pki ls $UPGRADE_DIR | tee output

          LAST_SCRIPT=$(tail -1 output)
          echo "LAST_SCRIPT: $LAST_SCRIPT"

          LAST_INDEX=$(echo "$LAST_SCRIPT" | sed 's/^\([0-9]*\).*$/\1/')
          echo "LAST_INDEX: $LAST_INDEX"

          if [ -z "$LAST_INDEX" ];then
              INDEX="01"
          else
              INDEX=$((LAST_INDEX + 1))
              if [ "$INDEX" -lt "10" ];then
                  INDEX="0$INDEX"
              fi
          fi
          echo "INDEX: $INDEX"

          docker exec pki cp \
              /usr/share/pki/server/examples/upgrade/01-BasicUpgradeScript.py \
              $UPGRADE_DIR/$INDEX-BasicUpgradeScript.py
          docker exec pki ls $UPGRADE_DIR

      - name: Run upgrade without any servers
        run: |
          docker exec pki pki-server upgrade -v | tee output

          # verify that the upgrade script was not executed
          grep "BasicUpgradeScript" output | tee actual
          [ ! -s actual ]

      - name: Create PKI server
        run: |
          docker exec pki pki-server create -v

      - name: Run upgrade with one server
        run: |
          docker exec pki pki-server upgrade -v | tee output

          # verify that the upgrade script was executed
          grep "BasicUpgradeScript:" output | tee actual
          [ -s actual ]

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: server-upgrade-test-${{ inputs.os }}
          path: |
            /tmp/artifacts/pki
