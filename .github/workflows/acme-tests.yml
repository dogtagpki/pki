name: ACME Tests

on: [push, pull_request]

jobs:
  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Install git
        run: dnf install -y git

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build docker
          dnf copr enable -y @pki/master
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,acme --with-timestamp --with-commit-id --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build container with systemd
        uses: docker/build-push-action@v2
        with:
          file: ci/Dockerfile
          build-args: OS_VERSION=${{ matrix.os }}
          tags: pki:latest
          outputs: type=docker,dest=/tmp/pki.tar

      - name: Upload container
        uses: actions/upload-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp/pki.tar

  # docs/installation/acme/Installing_PKI_ACME_Responder.md
  # docs/user/acme/Using_PKI_ACME_Responder_with_Certbot.md
  acme-certbot-test:
    name: Testing ACME with certbot
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Create network
        run: docker network create example

      - name: Run PKI container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install dependencies in PKI container
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in PKI container
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in PKI container
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Install CA in PKI container
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Install ACME in PKI container
        run: |
          docker exec pki pki-server acme-create
          docker exec pki ldapmodify -h pki.example.com \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/acme/database/ds/schema.ldif
          docker exec pki ldapadd -h pki.example.com \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/acme/database/ds/create.ldif
          docker exec pki ldapadd -h pki.example.com \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/acme/realm/ds/create.ldif
          docker exec pki pki-server acme-database-mod --type ds
          docker exec pki pki-server acme-issuer-mod --type pki
          docker exec pki pki-server acme-realm-mod --type ds
          docker exec pki pki-server acme-deploy --wait

      - name: Gather config files from PKI container
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/pki-conf.tar -C / etc/pki

      - name: Upload config files from PKI container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-conf-${{ matrix.os }}
          path: pki-conf.tar

      - name: Run PKI healthcheck in PKI container
        run: docker exec pki pki-healthcheck --debug

      - name: Verify admin user in PKI container
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Verify ACME in PKI container
        run: docker exec pki pki acme-info

      - name: Run client container
        run: |
          IMAGE=pki \
          NAME=client \
          HOSTNAME=client.example.com \
          ci/runner-init.sh

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Install dependencies in client container
        run: docker exec client dnf install -y certbot

      - name: Verify certbot in client container
        run: |
          docker exec client certbot register \
              --server http://pki.example.com:8080/acme/directory \
              --email user1@example.com \
              --agree-tos \
              --non-interactive
          docker exec client certbot certonly \
              --server http://pki.example.com:8080/acme/directory \
              -d client.example.com \
               --standalone \
              --non-interactive
          docker exec client certbot renew \
              --server http://pki.example.com:8080/acme/directory \
              --cert-name client.example.com \
              --force-renewal \
              --non-interactive
          docker exec client certbot revoke \
              --server http://pki.example.com:8080/acme/directory \
              --cert-name client.example.com \
              --non-interactive
          docker exec client certbot update_account \
              --server http://pki.example.com:8080/acme/directory \
              --email user2@example.com \
              --non-interactive
          docker exec client certbot unregister \
              --server http://pki.example.com:8080/acme/directory \
              --non-interactive

      - name: Remove ACME from PKI container
        run: |
          docker exec pki pki-server acme-undeploy --wait
          docker exec pki pki-server acme-remove

      - name: Remove CA from PKI container
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from PKI container
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files from PKI container
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/pki-logs.tar -C / var/log/pki

      - name: Upload log files from PKI container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-logs-${{ matrix.os }}
          path: pki-logs.tar

  # This test verifies that in a cluster the baseURL parameter can be used
  # to replace a server with another server without affecting the client.
  acme-switchover-test:
    name: Testing ACME server switchover
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Create network
        run: docker network create example

      - name: Run PKI container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com --alias server1.example.com

      - name: Install dependencies in PKI container
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base jq
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in PKI container
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in PKI container
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Install CA in PKI container
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Install ACME in PKI container
        run: |
          docker exec pki pki-server acme-create
          docker exec pki ldapmodify -h pki.example.com \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/acme/database/ds/schema.ldif
          docker exec pki ldapadd -h pki.example.com \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/acme/database/ds/create.ldif
          docker exec pki ldapadd -h pki.example.com \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/acme/realm/ds/create.ldif
          docker exec pki pki-server acme-database-mod --type ds
          docker exec pki pki-server acme-issuer-mod --type pki
          docker exec pki pki-server acme-realm-mod --type ds
          docker exec pki bash -c "echo baseURL=http://server1.example.com:8080/acme >> /etc/pki/pki-tomcat/acme/engine.conf"
          docker exec pki pki-server acme-deploy --wait

      - name: Gather config files from PKI container
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/switchover-conf.tar -C / etc/pki

      - name: Upload config files from PKI container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: switchover-conf-${{ matrix.os }}
          path: switchover-conf.tar

      - name: Run client container
        run: |
          IMAGE=pki \
          NAME=client \
          HOSTNAME=client.example.com \
          ci/runner-init.sh

      - name: Connect client container to network
        run: docker network connect example client --alias client1.example.com --alias client2.example.com

      - name: Install dependencies in client container
        run: docker exec client dnf install -y certbot

      - name: Verify ACME directory before switchover
        run: |
          echo http://server1.example.com:8080/acme/new-nonce > expected
          docker exec pki bash -c "curl -s -k http://pki.example.com:8080/acme/directory | jq -r '.newNonce' > ${PKIDIR}/actual"
          diff expected actual

      - name: Verify registration and enrollment before switchover
        run: |
          docker exec client certbot register \
              --server http://pki.example.com:8080/acme/directory \
              --email user1@example.com \
              --agree-tos \
              --non-interactive
          docker exec client certbot certonly \
              --server http://pki.example.com:8080/acme/directory \
              -d client1.example.com \
               --standalone \
              --non-interactive
          docker exec client certbot certonly \
              --server http://pki.example.com:8080/acme/directory \
              -d client2.example.com \
               --standalone \
              --non-interactive

      - name: Simulate ACME server switchover by replacing the baseURL parameter
        run: |
          docker network disconnect example pki
          docker exec pki pki-server acme-undeploy --wait
          docker exec pki sed -i "s/server1.example.com/server2.example.com/g" /etc/pki/pki-tomcat/acme/engine.conf
          docker exec pki pki-server acme-deploy --wait
          docker network connect example pki --alias pki.example.com --alias server2.example.com

      - name: Verify ACME directory after switchover
        run: |
          echo http://server2.example.com:8080/acme/new-nonce > expected
          docker exec pki bash -c "curl -s -k http://pki.example.com:8080/acme/directory | jq -r '.newNonce' > ${PKIDIR}/actual"
          diff expected actual

      - name: Verify renewal, revocation, account update and deactivation after switchover
        run: |
          docker exec client certbot renew \
              --server http://pki.example.com:8080/acme/directory \
              --cert-name client1.example.com \
              --force-renewal \
              --non-interactive
          docker exec client certbot revoke \
              --server http://pki.example.com:8080/acme/directory \
              --cert-name client2.example.com \
              --non-interactive
          docker exec client certbot update_account \
              --server http://pki.example.com:8080/acme/directory \
              --email user2@example.com \
              --non-interactive
          docker exec client certbot unregister \
              --server http://pki.example.com:8080/acme/directory \
              --non-interactive

      - name: Remove ACME from PKI container
        run: |
          docker exec pki pki-server acme-undeploy --wait
          docker exec pki pki-server acme-remove

      - name: Remove CA from PKI container
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from PKI container
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files from PKI container
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/switchover-logs.tar -C / var/log/pki

      - name: Upload log files from PKI container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: switchover-logs-${{ matrix.os }}
          path: switchover-logs.tar
