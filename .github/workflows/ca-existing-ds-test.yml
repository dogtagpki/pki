name: CA with existing DS

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve PKI images
        uses: actions/cache@v3
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create PKI server
        run: |
          docker exec pki pki-server create
          docker exec pki pki-server nss-create --no-password

      - name: Create CA signing cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              ca_signing
          docker exec pki pki-server cert-create \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              ca_signing
          docker exec pki pki-server cert-import \
              ca_signing

      - name: Create CA OCSP signing cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              ca_ocsp_signing
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              ca_ocsp_signing
          docker exec pki pki-server cert-import \
              ca_ocsp_signing

      - name: Create CA audit signing cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              ca_audit_signing
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              ca_audit_signing
          docker exec pki pki-server cert-import \
              ca_audit_signing

      - name: Create subsystem cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              subsystem
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              subsystem
          docker exec pki pki-server cert-import \
              subsystem

      - name: Create SSL server cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=pki.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              sslserver
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              sslserver
          docker exec pki pki-server cert-import \
              sslserver

      - name: Create CA admin cert in client's NSS database
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=Administrator" \
              --ext /usr/share/pki/server/certs/admin.conf \
              --csr admin.csr
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-issue \
              --issuer ca_signing \
              --csr admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert admin.crt
          docker exec pki pki \
              nss-cert-import \
              --cert admin.crt \
              caadmin

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database
      - name: Configure DS database
        run: |
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/server/database/ds/config.ldif

      - name: Add PKI schema
        run: |
          docker exec ds ldapmodify \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/server/database/ds/schema.ldif

      - name: Add CA base entry
        run: |
          docker exec -i ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: dc=ca,dc=pki,dc=example,dc=com
          objectClass: dcObject
          dc: ca
          EOF

      - name: Add CA database entries
        run: |
          sed \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/create.ldif \
              | tee create.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/create.ldif

      - name: Add CA ACL resources
        run: |
          sed \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/acl.ldif \
              | tee acl.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/acl.ldif

      - name: Add CA search indexes
        run: |
          sed \
              -e 's/{database}/userroot/g' \
              base/ca/database/ds/index.ldif \
              | tee index.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/index.ldif

      - name: Rebuild CA search indexes
        run: |
          # start rebuild task
          sed \
              -e 's/{database}/userroot/g' \
              base/ca/database/ds/indextasks.ldif \
              | tee indextasks.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/indextasks.ldif

          # wait for task to complete
          while true; do
              sleep 1

              docker exec ds ldapsearch \
                  -H ldap://ds.example.com:3389 \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  -b "cn=index1160589770, cn=index, cn=tasks, cn=config" \
                  -LLL \
                  nsTaskExitCode \
                  | tee output

              sed -n -e 's/nsTaskExitCode:\s*\(.*\)/\1/p' output > nsTaskExitCode
              cat nsTaskExitCode

              if [ -s nsTaskExitCode ]; then
                  break
              fi
          done

          echo "0" > expected
          diff expected nsTaskExitCode

      - name: Add CA VLV indexes
        run: |
          sed \
              -e 's/{instanceId}/pki-tomcat/g' \
              -e 's/{database}/userroot/g' \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/vlv.ldif \
              | tee vlv.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/vlv.ldif

      - name: Rebuild CA VLV indexes
        run: |
          # start rebuild task
          sed \
              -e 's/{database}/userroot/g' \
              -e 's/{instanceId}/pki-tomcat/g' \
              base/ca/database/ds/vlvtasks.ldif \
              | tee vlvtasks.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/vlvtasks.ldif

          # wait for task to complete
          while true; do
              sleep 1

              docker exec ds ldapsearch \
                  -H ldap://ds.example.com:3389 \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  -b "cn=index1160589769, cn=index, cn=tasks, cn=config" \
                  -LLL \
                  nsTaskExitCode \
                  | tee output

              sed -n -e 's/nsTaskExitCode:\s*\(.*\)/\1/p' output > nsTaskExitCode
              cat nsTaskExitCode

              if [ -s nsTaskExitCode ]; then
                  break
              fi
          done

          echo "0" > expected
          diff expected nsTaskExitCode

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database-User
      - name: Add database user
        run: |
          docker exec -i ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com
          objectClass: person
          objectClass: organizationalPerson
          objectClass: inetOrgPerson
          objectClass: cmsuser
          cn: pkidbuser
          sn: pkidbuser
          uid: pkidbuser
          userState: 1
          userType: agentType
          nsPagedSizeLimit: 20000
          EOF

      - name: Assign subsystem cert to database user
        run: |
          # convert cert from PEM to DER
          docker cp pki:/etc/pki/pki-tomcat/certs/subsystem.crt subsystem.crt
          openssl x509 -outform der -in subsystem.crt -out subsystem.der

          # get serial number
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              subsystem | tee output
          sed -n 's/^ *Serial Number: *\(.*\)/\1/p' output > subsystem.serial

          HEX_SERIAL=$(cat subsystem.serial)
          echo "HEX_SERIAL: $HEX_SERIAL"

          DEC_SERIAL=$(python -c "print(int('$HEX_SERIAL', 16))")
          echo "DEC_SERIAL: $DEC_SERIAL"

          docker exec -i ds ldapmodify \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: description
          description: 2;$DEC_SERIAL;CN=CA Signing Certificate;CN=Subsystem Certificate
          -
          add: seeAlso
          seeAlso: CN=Subsystem Certificate
          -
          add: userCertificate
          userCertificate:< file:$SHARED/subsystem.der
          -
          EOF

      - name: Add database user into CA groups
        run: |
          docker exec -i ds ldapmodify \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: cn=Subsystem Group,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Certificate Manager Agents,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -
          EOF

      - name: Grant database user access to CA database
        run: |
          sed \
              -e 's/{rootSuffix}/dc=example,dc=com/g' \
              -e 's/{dbuser}/uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com/g' \
              base/server/database/ds/db-access-grant.ldif \
              | tee db-access-grant.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/db-access-grant.ldif \
              -c

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Admin-User
      - name: Add CA admin user
        run: |
          docker exec -i ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          objectClass: person
          objectClass: organizationalPerson
          objectClass: inetOrgPerson
          objectClass: cmsuser
          cn: caadmin
          sn: caadmin
          uid: caadmin
          mail: caadmin@example.com
          userPassword: Secret.123
          userState: 1
          userType: adminType
          EOF

      - name: Assign CA admin cert to CA admin user
        run: |
          # convert cert from PEM to DER
          docker cp pki:admin.crt admin.crt
          openssl x509 -outform der -in admin.crt -out admin.der

          # get serial number
          docker exec pki pki nss-cert-show caadmin | tee output
          sed -n 's/^ *Serial Number: *\(.*\)/\1/p' output > caadmin.serial

          HEX_SERIAL=$(cat caadmin.serial)
          echo "HEX_SERIAL: $HEX_SERIAL"

          DEC_SERIAL=$(python -c "print(int('$HEX_SERIAL', 16))")
          echo "DEC_SERIAL: $DEC_SERIAL"

          docker exec -i ds ldapmodify \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: description
          description: 2;$DEC_SERIAL;CN=CA Signing Certificate;CN=Administrator
          -
          add: userCertificate
          userCertificate:< file:$SHARED/admin.der
          -
          EOF

      - name: Add CA admin user into CA groups
        run: |
          docker exec -i ds ldapmodify \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: cn=Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Certificate Manager Agents,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Security Domain Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Enterprise CA Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Enterprise KRA Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Enterprise RA Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Enterprise TKS Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Enterprise OCSP Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -

          dn: cn=Enterprise TPS Administrators,ou=groups,dc=ca,dc=pki,dc=example,dc=com
          changetype: modify
          add: uniqueMember
          uniqueMember: uid=caadmin,ou=people,dc=ca,dc=pki,dc=example,dc=com
          -
          EOF

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_ds_setup=False \
              -D pki_share_db=True \
              -D pki_admin_setup=False \
              -v

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Check CA admin user
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-existing-ds
          path: |
            /tmp/artifacts/pki
