name: CA with existing DS

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create PKI server
        run: |
          docker exec pki pki-server create
          docker exec pki pki-server nss-create --no-password

      - name: Create CA signing cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              ca_signing
          docker exec pki pki-server cert-create \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              ca_signing
          docker exec pki pki-server cert-import \
              ca_signing

      - name: Create CA OCSP signing cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              ca_ocsp_signing
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              ca_ocsp_signing
          docker exec pki pki-server cert-import \
              ca_ocsp_signing

      - name: Create CA audit signing cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              ca_audit_signing
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              ca_audit_signing
          docker exec pki pki-server cert-import \
              ca_audit_signing

      - name: Create subsystem cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              subsystem
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              subsystem
          docker exec pki pki-server cert-import \
              subsystem

      - name: Create SSL server cert in server's NSS database
        run: |
          docker exec pki pki-server cert-request \
              --subject "CN=pki.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              sslserver
          docker exec pki pki-server cert-create \
              --issuer ca_signing \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              sslserver
          docker exec pki pki-server cert-import \
              sslserver

      - name: Create CA admin cert in client's NSS database
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=Administrator" \
              --ext /usr/share/pki/server/certs/admin.conf \
              --csr admin.csr
          docker exec pki pki \
              -d /var/lib/pki/pki-tomcat/conf/alias \
              nss-cert-issue \
              --issuer ca_signing \
              --csr admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert admin.crt

          docker exec pki pki nss-cert-import \
              --cert admin.crt \
              caadmin

      - name: Create CA subsystem
        run: |
          docker exec pki pki-server ca-create -v

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Configure connection to CA database
        run: |
          # store DS password
          docker exec pki pki-server password-set \
              --password Secret.123 \
              internaldb

          # configure DS connection params
          docker exec pki pki-server ca-db-config-mod \
              --hostname ds.example.com \
              --port 3389 \
              --secure false \
              --auth BasicAuth \
              --bindDN "cn=Directory Manager" \
              --bindPWPrompt internaldb \
              --database userroot \
              --baseDN dc=ca,dc=pki,dc=example,dc=com \
              --multiSuffix false \
              --maxConns 15 \
              --minConns 3

          # configure CA user/group subsystem
          docker exec pki pki-server ca-config-set usrgrp.ldap internaldb

          # configure CA database subsystem
          docker exec pki pki-server ca-config-set dbs.ldap internaldb
          docker exec pki pki-server ca-config-set dbs.newSchemaEntryAdded true
          docker exec pki pki-server ca-config-set dbs.requestDN ou=ca,ou=requests
          docker exec pki pki-server ca-config-set dbs.request.id.generator random
          docker exec pki pki-server ca-config-set dbs.serialDN ou=certificateRepository,ou=ca
          docker exec pki pki-server ca-config-set dbs.cert.id.generator random

      - name: Check connection to CA database
        run: |
          docker exec pki pki-server ca-db-info

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database
      - name: Initialize CA database
        run: |
          docker exec pki pki-server ca-db-init -v

      - name: Add CA search indexes
        run: |
          docker exec pki pki-server ca-db-index-add -v

      - name: Rebuild CA search indexes
        run: |
          docker exec pki pki-server ca-db-index-rebuild -v

      - name: Add CA VLV indexes
        run: |
          docker exec pki pki-server ca-db-vlv-add -v

      - name: Rebuild CA VLV indexes
        run: |
          docker exec pki pki-server ca-db-vlv-reindex -v

      - name: Import CA signing cert into CA database
        run: |
          docker exec pki pki-server ca-cert-import \
              --cert /var/lib/pki/pki-tomcat/conf/certs/ca_signing.crt \
              --csr /var/lib/pki/pki-tomcat/conf/certs/ca_signing.csr \
              --profile /usr/share/pki/ca/conf/caCert.profile

      - name: Import CA OCSP signing cert into CA database
        run: |
          docker exec pki pki-server ca-cert-import \
              --cert /var/lib/pki/pki-tomcat/conf/certs/ca_ocsp_signing.crt \
              --csr /var/lib/pki/pki-tomcat/conf/certs/ca_ocsp_signing.csr \
              --profile /usr/share/pki/ca/conf/caOCSPCert.profile

      - name: Import CA audit signing cert into CA database
        run: |
          docker exec pki pki-server ca-cert-import \
              --cert /var/lib/pki/pki-tomcat/conf/certs/ca_audit_signing.crt \
              --csr /var/lib/pki/pki-tomcat/conf/certs/ca_audit_signing.csr \
              --profile /usr/share/pki/ca/conf/caAuditSigningCert.profile

      - name: Import subsystem cert into CA database
        run: |
          docker exec pki pki-server ca-cert-import \
              --cert /var/lib/pki/pki-tomcat/conf/certs/subsystem.crt \
              --csr /var/lib/pki/pki-tomcat/conf/certs/subsystem.csr \
              --profile /usr/share/pki/ca/conf/rsaSubsystemCert.profile

      - name: Import SSL server cert into CA database
        run: |
          docker exec pki pki-server ca-cert-import \
              --cert /var/lib/pki/pki-tomcat/conf/certs/sslserver.crt \
              --csr /var/lib/pki/pki-tomcat/conf/certs/sslserver.csr \
              --profile /usr/share/pki/ca/conf/rsaServerCert.profile

      - name: Import admin cert into CA database
        run: |
          docker exec pki pki-server ca-cert-import \
              --cert admin.crt \
              --csr admin.csr \
              --profile /usr/share/pki/ca/conf/rsaAdminCert.profile

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database-User
      - name: Add database user
        run: |
          docker exec pki pki-server ca-user-add \
              --full-name pkidbuser \
              --type agentType \
              --cert /var/lib/pki/pki-tomcat/conf/certs/subsystem.crt \
              pkidbuser

      - name: Assign roles to database user
        run: |
          docker exec pki pki-server ca-user-role-add pkidbuser "Subsystem Group"
          docker exec pki pki-server ca-user-role-add pkidbuser "Certificate Manager Agents"

      - name: Grant database access to database user
        run: |
          docker exec pki pki-server ca-db-access-grant \
              uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com

      # https://github.com/dogtagpki/pki/wiki/Setting-up-Security-Domain
      - name: Create security domain database
        run: |
          docker exec pki pki-server sd-create \
              --name EXAMPLE

      - name: Configure security domain manager
        run: |
          # configure CA as security domain manager
          docker exec pki pki-server ca-config-set securitydomain.select new
          docker exec pki pki-server ca-config-set securitydomain.name EXAMPLE
          docker exec pki pki-server ca-config-set securitydomain.host pki.example.com
          docker exec pki pki-server ca-config-set securitydomain.httpport 8080
          docker exec pki pki-server ca-config-set securitydomain.httpsadminport 8443
          docker exec pki pki-server ca-config-set securitydomain.checkIP false
          docker exec pki pki-server ca-config-set securitydomain.checkinterval 300000
          docker exec pki pki-server ca-config-set securitydomain.flushinterval 86400000
          docker exec pki pki-server ca-config-set securitydomain.source ldap

          # register CA as security domain manager
          docker exec pki pki-server sd-subsystem-add \
              --subsystem CA \
              --hostname pki.example.com \
              --unsecure-port 8080 \
              --secure-port 8443 \
              --domain-manager \
              "CA pki.example.com 8443"

      # https://github.com/dogtagpki/pki/wiki/Setting-up-Subsystem-User
      - name: Add subsystem user
        run: |
          docker exec pki pki-server ca-user-add \
              --full-name CA-pki.example.com-8443 \
              --type agentType \
              --cert /var/lib/pki/pki-tomcat/conf/certs/subsystem.crt \
              CA-pki.example.com-8443

      - name: Assign roles to subsystem user
        run: |
          docker exec pki pki-server ca-user-role-add CA-pki.example.com-8443 "Subsystem Group"

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Admin-User
      - name: Add CA admin user
        run: |
          docker exec pki pki-server ca-user-add \
              --full-name Administrator \
              --type adminType \
              --cert admin.crt \
              caadmin

      - name: Assign roles to CA admin user
        run: |
          docker exec pki pki-server ca-user-role-add caadmin "Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Certificate Manager Agents"
          docker exec pki pki-server ca-user-role-add caadmin "Security Domain Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Enterprise CA Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Enterprise KRA Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Enterprise RA Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Enterprise TKS Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Enterprise OCSP Administrators"
          docker exec pki pki-server ca-user-role-add caadmin "Enterprise TPS Administrators"

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_ds_setup=False \
              -D pki_share_db=True \
              -D pki_security_domain_setup=False \
              -D pki_admin_setup=False \
              -v

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Check CA admin user
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check CA security domain
        run: |
          # security domain should be enabled (i.e. securitydomain.select=new)
          cat > expected << EOF
          securitydomain.checkIP=false
          securitydomain.checkinterval=300000
          securitydomain.flushinterval=86400000
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=new
          securitydomain.source=ldap
          EOF

          docker exec pki pki-server ca-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

          # REST API should return security domain info
          cat > expected << EOF
            Domain: EXAMPLE

            CA Subsystem:

              Host ID: CA pki.example.com 8443
              Hostname: pki.example.com
              Port: 8080
              Secure Port: 8443
              Domain Manager: TRUE

          EOF

          docker exec pki pki securitydomain-show | tee output
          diff expected output

      - name: Remove CA
        run: docker exec pki pkidestroy -s CA -v

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ca-existing-ds
          path: /tmp/artifacts
