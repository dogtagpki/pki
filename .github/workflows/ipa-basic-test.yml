name: Basic IPA

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve IPA images
        uses: actions/cache@v4
        with:
          key: ipa-images-${{ github.sha }}
          path: ipa-images.tar

      - name: Load IPA images
        run: docker load --input ipa-images.tar

      - name: Run IPA container
        run: |
          tests/bin/runner-init.sh ipa
        env:
          IMAGE: ipa-runner
          HOSTNAME: ipa.example.com

      - name: Install IPA server
        run: |
          docker exec ipa sysctl net.ipv6.conf.lo.disable_ipv6=0
          docker exec ipa ipa-server-install \
              -U \
              --domain example.com \
              -r EXAMPLE.COM \
              -p Secret.123 \
              -a Secret.123 \
              --no-host-dns \
              --no-ntp
          docker exec ipa bash -c "echo Secret.123 | kinit admin"
          docker exec ipa ipa ping

          docker exec ipa pki-server cert-export ca_signing --cert-file ca_signing.crt

      - name: Check webapps
        run: |
          docker exec ipa pki-server webapp-find | tee output

          # IPA server should have ROOT, acme, ca, and pki webapps
          echo "ROOT" > expected
          echo "acme" >> expected
          echo "ca" >> expected
          echo "pki" >> expected
          sed -n 's/^ *Webapp ID: *\(.*\)$/\1/p' output > actual
          diff expected actual

          docker exec ipa pki-server webapp-show ROOT
          docker exec ipa pki-server webapp-show acme
          docker exec ipa pki-server webapp-show ca
          docker exec ipa pki-server webapp-show pki

      - name: Check subsystems
        run: |
          docker exec ipa pki-server subsystem-find | tee output

          # IPA server should have CA subsystem
          echo "ca" > expected
          sed -n 's/^ *Subsystem ID: *\(.*\)$/\1/p' output > actual
          diff expected actual

          docker exec ipa pki-server subsystem-show ca | tee output

          # CA subsystem should be enabled
          echo "True" > expected
          sed -n 's/^ *Enabled: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check DS certs and keys
        run: |
          docker exec ipa ls -la /etc/dirsrv/slapd-EXAMPLE-COM
          docker exec ipa pki -d /etc/dirsrv/slapd-EXAMPLE-COM nss-cert-find
          docker exec ipa pki -d /etc/dirsrv/slapd-EXAMPLE-COM nss-cert-show "EXAMPLE.COM IPA CA"
          docker exec ipa pki -d /etc/dirsrv/slapd-EXAMPLE-COM nss-cert-show "Server-Cert"
          docker exec ipa pki \
              -d /etc/dirsrv/slapd-EXAMPLE-COM \
              -C /etc/dirsrv/slapd-EXAMPLE-COM/pwdfile.txt \
              nss-key-find
          docker exec ipa certutil -K \
              -d /etc/dirsrv/slapd-EXAMPLE-COM \
              -f /etc/dirsrv/slapd-EXAMPLE-COM/pwdfile.txt

      - name: Check PKI certs and keys
        run: |
          # check certs
          docker exec ipa pki-server cert-find

          # check keys
          docker exec ipa certutil -K \
              -d /var/lib/pki/pki-tomcat/conf/alias \
              -f /var/lib/pki/pki-tomcat/conf/alias/pwdfile.txt | tee output

          # there should be no orphaned keys
          echo "0" > expected
          grep "(orphan)" output | wc -l > actual
          diff expected actual

      - name: Check CA users
        run: |
          docker exec ipa pki-server ca-user-find

          # check CA subsystem user
          docker exec ipa pki-server ca-user-show CA-ipa.example.com-8443
          docker exec ipa pki-server ca-user-cert-find CA-ipa.example.com-8443
          docker exec ipa pki-server ca-user-role-find CA-ipa.example.com-8443

          # check CA admin user
          docker exec ipa pki-server ca-user-show admin
          docker exec ipa pki-server ca-user-cert-find admin
          docker exec ipa pki-server ca-user-role-find admin

          # check PKI database user
          docker exec ipa pki-server ca-user-show pkidbuser
          docker exec ipa pki-server ca-user-cert-find pkidbuser
          docker exec ipa pki-server ca-user-role-find pkidbuser

          # check IPA RA user
          docker exec ipa pki-server ca-user-show ipara
          docker exec ipa pki-server ca-user-cert-find ipara
          docker exec ipa pki-server ca-user-role-find ipara

          # check ACME subsystem user
          docker exec ipa pki-server ca-user-show acme-ipa.example.com
          docker exec ipa pki-server ca-user-cert-find acme-ipa.example.com
          docker exec ipa pki-server ca-user-role-find acme-ipa.example.com

      - name: Check CA admin cert
        run: |
          docker exec ipa ls -la /root/.dogtag/pki-tomcat
          docker exec ipa openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

          # import CA admin cert and key into the client's NSS database
          docker exec ipa pki client-cert-import --ca-cert ca_signing.crt ca_signing
          docker exec ipa pki pkcs12-import \
              --pkcs12 /root/ca-agent.p12 \
              --pkcs12-password Secret.123
          docker exec ipa pki nss-cert-find
          docker exec ipa pki nss-cert-show ipa-ca-agent

          # CA admin should be able to access PKI users
          docker exec ipa pki -n ipa-ca-agent ca-user-find

      - name: Check RA agent cert
        run: |
          docker exec ipa ls -la /var/lib/ipa
          docker exec ipa openssl x509 -text -noout -in /var/lib/ipa/ra-agent.pem

          # import RA agent cert and key into a PKCS #12 file
          # then import it into the client's NSS database
          docker exec ipa openssl pkcs12 -export \
              -in /var/lib/ipa/ra-agent.pem \
              -inkey /var/lib/ipa/ra-agent.key \
              -out ra-agent.p12 \
              -passout pass:Secret.123 \
              -name ipa-ra-agent
          docker exec ipa pki pkcs12-import \
              --pkcs12 ra-agent.p12 \
              --pkcs12-password Secret.123
          docker exec ipa pki nss-cert-find
          docker exec ipa pki nss-cert-show ipa-ra-agent

          # RA agent should be able to access cert requests
          docker exec ipa pki -n ipa-ra-agent ca-cert-request-find

      - name: Check HTTPD certs
        run: |
          docker exec ipa ls -la /var/lib/ipa/certs
          docker exec ipa openssl x509 -text -noout -in /var/lib/ipa/certs/httpd.crt

      - name: Install KRA
        run: |
          docker exec ipa ipa-kra-install -p Secret.123
          docker exec ipa pki-server ca-config-find | grep ca.connector.KRA

      - name: Check PKI certs and keys
        run: |
          # check certs
          docker exec ipa pki-server cert-find

          # check keys
          docker exec ipa certutil -K \
              -d /var/lib/pki/pki-tomcat/conf/alias \
              -f /var/lib/pki/pki-tomcat/conf/alias/pwdfile.txt | tee output

          # there should be no orphaned keys
          echo "0" > expected
          grep "(orphan)" output | wc -l > actual
          diff expected actual

      - name: Check KRA users
        run: |
          docker exec ipa pki-server kra-user-find

          # check KRA admin user
          docker exec ipa pki-server kra-user-show admin
          docker exec ipa pki-server kra-user-cert-find admin
          docker exec ipa pki-server kra-user-role-find admin

          # check KRA subsystem user
          docker exec ipa pki-server kra-user-show CA-ipa.example.com-443
          docker exec ipa pki-server kra-user-cert-find CA-ipa.example.com-443
          docker exec ipa pki-server kra-user-role-find CA-ipa.example.com-443

          # check IPA KRA user
          docker exec ipa pki-server kra-user-show ipakra
          docker exec ipa pki-server kra-user-cert-find ipakra
          docker exec ipa pki-server kra-user-role-find ipakra

      - name: Check RA agent cert
        run: |
          # RA agent should be able to access key requests
          docker exec ipa pki -n ipa-ra-agent kra-key-request-find

      - name: Check webapps
        run: |
          docker exec ipa pki-server webapp-find | tee output

          # IPA server should now have ROOT, acme, ca, kra, and pki webapps
          echo "ROOT" > expected
          echo "acme" >> expected
          echo "ca" >> expected
          echo "kra" >> expected
          echo "pki" >> expected
          sed -n 's/^ *Webapp ID: *\(.*\)$/\1/p' output > actual
          diff expected actual

          docker exec ipa pki-server webapp-show kra

      - name: Check subsystems
        run: |
          docker exec ipa pki-server subsystem-find | tee output

          # IPA server should now have CA and KRA subsystems
          echo "ca" > expected
          echo "kra" >> expected
          sed -n 's/^ *Subsystem ID: *\(.*\)$/\1/p' output > actual
          diff expected actual

          docker exec ipa pki-server subsystem-show kra | tee output

          # KRA subsystem should be enabled
          echo "True" > expected
          sed -n 's/^ *Enabled: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Run PKI healthcheck
        run: docker exec ipa pki-healthcheck --failures-only

      - name: Configure test environment
        run: |
          docker exec ipa bash -c "cp -r /etc/ipa/* ~/.ipa"
          docker exec ipa bash -c "echo Secret.123 > ~/.ipa/.dmpw"
          docker exec ipa bash -c "echo 'wait_for_dns=5' >> ~/.ipa/default.conf"

      - name: Run test_caacl_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_caacl_plugin.py

      - name: Run test_caacl_profile_enforcement.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_caacl_profile_enforcement.py

      - name: Run test_cert_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_cert_plugin.py

      - name: Run test_certprofile_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_certprofile_plugin.py

      - name: Run test_ca_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_ca_plugin.py

      - name: Run test_vault_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_vault_plugin.py

      - name: Check key archival and retrieval
        run: |
          # create a vault
          docker exec ipa ipa vault-add \
              --type symmetric \
              --password Secret.123 \
              testvault

          # there should be 1 active key record initially
          echo "active" > expected
          docker exec ipa pki \
              -n ipa-ra-agent \
              kra-key-find \
              --clientKeyID ipa:/users/admin/testvault | tee output
          sed -n 's/^\s*Status:\s*\(.*\)$/\1/p' output > actual
          diff expected actual

          # retrieve the vault content
          docker exec ipa ipa vault-retrieve \
              --password Secret.123 \
              --out $SHARED/output \
              testvault

          # the vault should be empty initially
          diff /dev/null output

          # generate a private key
          docker exec ipa openssl genrsa -out $SHARED/private.key 2048
          docker exec ipa chmod go+r $SHARED/private.key
          cat private.key

          # archive the private key into the vault
          docker exec ipa ipa vault-archive \
              --password Secret.123 \
              --in $SHARED/private.key \
              testvault

          # the initial key record should be inactive and the new one should be active
          echo "inactive" > expected
          echo "active" >> expected
          docker exec ipa pki \
              -n ipa-ra-agent \
              kra-key-find \
              --clientKeyID ipa:/users/admin/testvault | tee output
          sed -n 's/^\s*Status:\s*\(.*\)$/\1/p' output > actual
          diff expected actual

          # retrieve the vault content
          docker exec ipa ipa vault-retrieve \
              --password Secret.123 \
              --out $SHARED/output \
              testvault

          # the original private key should be identical to the archived one
          diff private.key output

      - name: Remove IPA server
        run: docker exec ipa ipa-server-install --uninstall -U

      - name: Check IPA CA install log
        if: always()
        run: |
          docker exec ipa cat /var/log/ipaserver-install.log

      - name: Check IPA KRA install log
        if: always()
        run: |
          docker exec ipa cat /var/log/ipaserver-kra-install.log

      - name: Remove IPA server
        run: docker exec ipa ipa-server-install --uninstall -U

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec ipa journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec ipa find /var/log/pki/pki-tomcat/ca -name "debug.*" -exec cat {} \;

      - name: Check KRA debug log
        if: always()
        run: |
          docker exec ipa find /var/log/pki/pki-tomcat/kra -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ipa --instance EXAMPLE-COM
          tests/bin/pki-artifacts-save.sh ipa
          tests/bin/ipa-artifacts-save.sh ipa
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ipa-basic-test
          path: /tmp/artifacts
