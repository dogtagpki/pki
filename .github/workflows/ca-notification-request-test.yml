name: CA with request notification

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install mail server and client
        run: |
          docker exec pki dnf install -y postfix mailx

      - name: Start mail server
        run: |
          # use only IPv4 since IPv6 is not available by default
          docker exec pki sed -i \
              -e 's/^inet_protocols = .*$/inet_protocols = ipv4/' \
              /etc/postfix/main.cf

          docker exec pki systemctl start postfix

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      # https://github.com/dogtagpki/pki/wiki/Configuring-Notifications
      - name: Configure request notification
        run: |
          docker exec pki pki-server ca-config-set ca.notification.requestInQ.enabled true
          docker exec pki pki-server ca-config-set ca.notification.requestInQ.recipientEmail root@pki.example.com
          docker exec pki pki-server ca-config-set ca.notification.requestInQ.senderEmail root@pki.example.com

      - name: Restart CA subsystem
        run: |
          docker exec pki pki-server ca-redeploy --wait

      - name: Check CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check messages before enrollment request
        run: |
          sleep 60

          MAILX_PROVIDER=$(docker exec pki rpm -q --whatprovides mailx)
          echo "mailx provider: $MAILX_PROVIDER"

          # check mailbox
          echo -ne "q\n" | docker exec -i pki mail \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # there should be no messages

          if [[ "$MAILX_PROVIDER" =~ ^mailx- ]]; then
              echo "No mail for root" > expected

          elif [[ "$MAILX_PROVIDER" =~ ^s-nail- ]]; then
              echo "s-nail: No mail for root at /var/mail/root" > expected
              echo "s-nail: /var/mail/root: No such entry, file or directory" >> expected

          else
              echo "ERROR: Unknown mailx provider: $MAILX_PROVIDER"
              exit 1
          fi

          diff expected stderr

      - name: Submit enrollment request
        run: |
          docker exec pki pki client-cert-request uid=testuser | tee output

          REQUEST_ID=$(sed -n -e 's/^ *Request ID: *\(.*\)$/\1/p' output)
          echo "REQUEST_ID: $REQUEST_ID"
          echo $REQUEST_ID > request.id

      - name: Check messages after enrollment request
        run: |
          sleep 60

          MAILX_PROVIDER=$(docker exec pki rpm -q --whatprovides mailx)
          echo "mailx provider: $MAILX_PROVIDER"

          # check mailbox
          echo -ne "q\n" | docker exec -i pki mail \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # there should be 1 message

          if [[ "$MAILX_PROVIDER" =~ ^mailx- ]]; then
              echo "Held 1 message in /var/mail/root" > expected

          elif [[ "$MAILX_PROVIDER" =~ ^s-nail- ]]; then
              echo "Held 1 message in /var/spool/mail/root" > expected

          else
              echo "ERROR: Unknown mailx provider: $MAILX_PROVIDER"
              exit 1
          fi

          tail -1 stdout > actual
          diff expected actual

          # print first email
          echo -ne "p\nq\n" | docker exec -i pki mail | tee output

          # check email subject
          REQUEST_ID=$(cat request.id)
          echo "Certificate Request in Queue (request id: $REQUEST_ID)" > expected
          sed -n 's/^Subject:\s\+\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/log/pki/pki-tomcat/ca -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ca-notification-request
          path: /tmp/artifacts
