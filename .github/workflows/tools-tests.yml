name: Tools Tests

on: [push, pull_request]

jobs:
  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Install git
        run: dnf install -y git

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build
          dnf copr enable -y @pki/master
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server --with-timestamp --with-commit-id --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS/

  PKICertImport-test:
    name: PKICertImport test
    needs: build
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Install PKI packages
        run: |
          dnf install -y dnf-plugins-core
          dnf copr enable -y @pki/master
          dnf -y localinstall build/RPMS/*

      - name: Run PKICertImport test
        run: bash base/util/src/test/shell/test_PKICertImport.bash

  # https://github.com/dogtagpki/pki/wiki/PKI-NSS-CLI
  pki-nss-test:
    name: PKI NSS CLI
    needs: build
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Install PKI packages
        run: |
          dnf install -y dnf-plugins-core
          dnf copr enable -y @pki/master
          dnf -y localinstall build/RPMS/*

      - name: Generate CA signing cert request
        run: |
          pki nss-cert-request \
              --subject "CN=Certificate Authority" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr

      - name: Issue self-signed CA signing cert
        run: |
          pki nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt

      - name: Import CA signing cert
        run: |
          pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Verify trust flags
        run: |
          echo "CTu,Cu,Cu" > flags1
          certutil -L -d /root/.dogtag/nssdb | sed -n 's/^ca_signing *\(\S\+\)/\1/p' > flags2
          diff flags1 flags2

  # https://github.com/dogtagpki/pki/wiki/PKI-NSS-CLI
  pki-nss-hsm-test:
    name: PKI NSS CLI with HSM
    needs: build
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        # NSS cannot find the SoftHSM token on F32
        os: ['33']
    steps:
      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Install PKI packages
        run: |
          dnf install -y dnf-plugins-core softhsm
          dnf copr enable -y @pki/master
          dnf -y localinstall build/RPMS/*

      - name: Create HSM token
        run: |
          softhsm2-util --init-token \
              --label HSM \
              --so-pin Secret.123 \
              --pin Secret.123 \
              --free
          softhsm2-util --show-slots

      - name: Generate CA signing cert request with key in HSM
        run: |
          echo "internal=" > password.conf
          echo "hardware-HSM=Secret.123" >> password.conf
          pki --token HSM -f password.conf nss-cert-request \
              --subject "CN=Certificate Authority" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr

      - name: Issue self-signed CA signing cert
        run: |
          pki --token HSM -f password.conf nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt

      - name: Import CA signing cert into internal token and HSM
        run: |
          pki --token HSM -f password.conf nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Verify trust flags in internal token
        run: |
          echo "CT,C,C" > flags.internal1
          echo "Secret.123" > password.txt
          certutil -L -d /root/.dogtag/nssdb | sed -n 's/^ca_signing *\(\S\+\)/\1/p' > flags.internal2
          diff flags.internal1 flags.internal2

      - name: Verify trust flags in HSM
        run: |
          echo "CTu,Cu,Cu" > flags.hsm1
          certutil -L -d /root/.dogtag/nssdb -h HSM -f password.txt | sed -n 's/^HSM:ca_signing *\(\S\+\)/\1/p' > flags.hsm2
          diff flags.hsm1 flags.hsm2

      - name: Remove HSM token
        run: softhsm2-util --delete-token --token HSM

  # docs/user/tools/Using-PKI-PKCS7-CLI.adoc
  pki-pkcs7-test:
    name: PKI PKCS7 CLI
    needs: build
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Install PKI packages
        run: |
          dnf install -y dnf-plugins-core
          dnf copr enable -y @pki/master
          dnf -y localinstall build/RPMS/*

      - name: Generate CA signing cert request
        run: |
          pki nss-cert-request \
              --subject "CN=Certificate Authority" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr

      - name: Issue self-signed CA signing cert
        run: |
          pki nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt

      - name: Import CA signing cert
        run: |
          pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Generate SSL server cert request
        run: |
          pki nss-cert-request \
              --subject "CN=localhost.localdomain" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr

      - name: Issue SSL server cert signed by CA signing cert
        run: |
          pki nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert sslserver.crt

      - name: Import SSL server cert
        run: pki nss-cert-import sslserver --cert sslserver.crt

      - name: "Export SSL server cert chain into PKCS #7 chain"
        run: |
          pki pkcs7-export sslserver --pkcs7 cert_chain.p7b
          pki pkcs7-cert-find --pkcs7 cert_chain.p7b

      - name: Convert cert chain into separate PEM certificates
        run: |
          pki pkcs7-cert-export --pkcs7 cert_chain.p7b --output-prefix cert- --output-suffix .pem
          cat cert-0.pem
          cat cert-1.pem

      - name: "Merge PEM certificates into a PKCS #7 chain"
        run: |
          rm -f cert_chain.p7b
          pki pkcs7-cert-import --pkcs7 cert_chain.p7b --input-file cert-0.pem
          pki pkcs7-cert-import --pkcs7 cert_chain.p7b --input-file cert-1.pem --append
          pki pkcs7-cert-find --pkcs7 cert_chain.p7b

      - name: Remove certs from NSS database
        run: |
          certutil -D -d /root/.dogtag/nssdb -n sslserver
          certutil -D -d /root/.dogtag/nssdb -n ca_signing
          certutil -L -d /root/.dogtag/nssdb

      - name: "Import PKCS #7 chain into NSS database"
        run: |
          pki pkcs7-import sslserver --pkcs7 cert_chain.p7b
          certutil -L -d /root/.dogtag/nssdb

      - name: Verify CA signing cert trust flags
        run: |
          echo "CTu,Cu,Cu" > flags1
          certutil -L -d /root/.dogtag/nssdb | sed -n 's/^Certificate Authority *\(\S\+\)/\1/p' > flags2
          diff flags1 flags2

      - name: Verify SSL server cert trust flags
        run: |
          echo "u,u,u" > flags1
          certutil -L -d /root/.dogtag/nssdb | sed -n 's/^sslserver *\(\S\+\)/\1/p' > flags2
          diff flags1 flags2

      - name: "Convert PKCS #7 chain into a series of PEM certificates"
        run: |
          pki pkcs7-cert-export --pkcs7 cert_chain.p7b --output-file cert_chain.pem
          cat cert_chain.pem

      - name: Remove certs from NSS database
        run: |
          certutil -D -d /root/.dogtag/nssdb -n sslserver
          certutil -D -d /root/.dogtag/nssdb -n "Certificate Authority"
          certutil -L -d /root/.dogtag/nssdb

      - name: Import PEM certificates into NSS database
        run: |
          rm -f cert_chain.p7b
          pki pkcs7-cert-import --pkcs7 cert_chain.p7b --input-file cert_chain.pem
          pki pkcs7-import sslserver --pkcs7 cert_chain.p7b
          certutil -L -d /root/.dogtag/nssdb

      - name: Verify CA signing cert trust flags
        run: |
          echo "CTu,Cu,Cu" > flags1
          certutil -L -d /root/.dogtag/nssdb | sed -n 's/^Certificate Authority *\(\S\+\)/\1/p' > flags2
          diff flags1 flags2

      - name: Verify SSL server cert trust flags
        run: |
          echo "u,u,u" > flags1
          certutil -L -d /root/.dogtag/nssdb | sed -n 's/^sslserver *\(\S\+\)/\1/p' > flags2
          diff flags1 flags2
