name: Tools Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-timestamp --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: |
            build/RPMS/
            build/SRPMS/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-tools-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-tools-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tools-runner.tar

  PKICertImport-test:
    name: PKICertImport
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/PKICertImport-test.yml
    with:
      os: ${{ matrix.os }}

  pki-nss-rsa-test:
    name: PKI NSS CLI with RSA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-nss-rsa-test.yml
    with:
      os: ${{ matrix.os }}

  pki-nss-ecc-test:
    name: PKI NSS CLI with ECC
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-nss-ecc-test.yml
    with:
      os: ${{ matrix.os }}

  pki-nss-aes-test:
    name: PKI NSS CLI with AES
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-nss-aes-test.yml
    with:
      os: ${{ matrix.os }}

  pki-nss-hsm-test:
    name: PKI NSS CLI with HSM
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-nss-hsm-test.yml
    with:
      os: ${{ matrix.os }}

  pki-nss-exts-test:
    name: PKI NSS CLI with Extensions
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-nss-exts-test.yml
    with:
      os: ${{ matrix.os }}

  pki-pkcs7-test:
    name: PKI PKCS7 CLI
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-pkcs7-test.yml
    with:
      os: ${{ matrix.os }}

  pki-pkcs11-test:
    name: PKI PKCS11 CLI
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/pki-pkcs11-test.yml
    with:
      os: ${{ matrix.os }}

  # https://github.com/dogtagpki/pki/wiki/PKI-PKCS12-CLI
  pki-pkcs12-test:
    name: Testing PKI PKCS12 CLI
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-tools-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-tools-runner.tar

      - name: Load runner image
        run: docker load --input pki-tools-runner.tar

      - name: Set up runner container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Generate CA signing cert request in NSS database
        run: |
          docker exec pki pki nss-cert-request \
              --subject "CN=Certificate Authority" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr

      - name: Issue self-signed CA signing cert
        run: |
          docker exec pki pki nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt
          docker exec pki cat ca_signing.crt

      - name: Import CA signing cert into NSS database
        run: |
          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

      - name: Generate SSL server cert request in NSS database
        run: |
          docker exec pki pki nss-cert-request \
              --subject "CN=localhost.localdomain" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr

      - name: Issue SSL server cert signed by CA signing cert
        run: |
          docker exec pki pki nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert sslserver.crt
          docker exec pki cat sslserver.crt

      - name: Import SSL server cert into NSS database
        run: docker exec pki pki nss-cert-import --cert sslserver.crt sslserver

      - name: "Export all certs and keys from NSS database into PKCS #12 file"
        run: |
          docker exec pki pki pkcs12-export \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123

      - name: "List certs in PKCS #12 file"
        run: |
          docker exec pki pki pkcs12-cert-find \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 | tee output

          # compare certs in PKCS #12 file and in NSS database
          sed -n 's/^\s*Friendly Name:\s*\(.\+\)\s*$/\1/p' output | sort > actual
          docker exec pki certutil -L -d /root/.dogtag/nssdb | tee output
          tail -n +5 output | awk '{print $1;}' | sort > expected
          diff actual expected

      - name: "List keys in PKCS #12 file"
        run: |
          docker exec pki pki pkcs12-key-find \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 | tee output

          # compare keys in PKCS #12 file and in NSS database
          sed -n 's/^\s*Key ID:\s*0x\(.\+\)\s*$/\1/p' output | sort > actual
          docker exec pki certutil -K -d /root/.dogtag/nssdb | tee output
          sed -n 's/^<.*>\s\+\S\+\s\+\(\S\+\).*/\1/p' output | sort > expected
          diff actual expected

      - name: "Export SSL server cert from PKCS #12 file"
        run: |
          docker exec pki pki pkcs12-cert-export \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 \
              --cert-file sslserver2.crt \
              sslserver

          # verify exported cert
          docker exec pki diff sslserver.crt sslserver2.crt

      - name: "Remove SSL server cert from PKCS #12 file"
        run: |
          docker exec pki pki pkcs12-cert-del \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 \
              sslserver

          # verify cert removal
          docker exec pki pki pkcs12-cert-find \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 | tee output
          sed -n 's/^\s*Friendly Name:\s*\(.\+\)\s*$/\1/p' output | sort > actual
          echo ca_signing > expected
          diff actual expected

      - name: "Re-import SSL server cert from NSS database into PKCS #12 file"
        run: |
          docker exec pki pki pkcs12-cert-import \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 \
              --append \
              --no-chain \
              sslserver

          # compare certs in PKCS #12 file and in NSS database
          docker exec pki pki pkcs12-cert-find \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 | tee output
          sed -n 's/^\s*Friendly Name:\s*\(.\+\)\s*$/\1/p' output | sort > actual
          docker exec pki certutil -L -d /root/.dogtag/nssdb | tee output
          tail -n +5 output | awk '{print $1;}' | sort > expected
          diff actual expected

          # compare keys in PKCS #12 file and in NSS database
          docker exec pki pki pkcs12-key-find \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123 | tee output
          sed -n 's/^\s*Key ID:\s*0x\(.\+\)\s*$/\1/p' output | sort > actual
          docker exec pki certutil -K -d /root/.dogtag/nssdb | tee output
          sed -n 's/^<.*>\s\+\S\+\s\+\(\S\+\).*/\1/p' output| sort > expected
          diff actual expected

      - name: "Import all certs and keys from PKCS #12 file into a new NSS database"
        run: |
          docker exec pki pki -d nssdb pkcs12-import \
              --pkcs12-file test.p12 \
              --pkcs12-password Secret.123

          # compare certs in new and old NSS databases
          docker exec pki certutil -L -d nssdb | tee output
          tail -n +5 output | awk '{print $1;}' | sort > actual
          docker exec pki certutil -L -d /root/.dogtag/nssdb | tee output
          tail -n +5 output | awk '{print $1;}' | sort > expected
          diff actual expected

          # compare keys in new and old NSS databases
          docker exec pki certutil -K -d nssdb | tee output
          sed -n 's/^<.*>\s\+\S\+\s\+\(\S\+\).*/\1/p' output | sort > actual
          docker exec pki certutil -K -d /root/.dogtag/nssdb | tee output
          sed -n 's/^<.*>\s\+\S\+\s\+\(\S\+\).*/\1/p' output | sort > expected
          diff actual expected

  rpminspect-test:
    name: Run RPMInspect on RPMs
    needs: [init, build]
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: |
            build/

      - name: Install RPMInspect
        run: |
          dnf install -y dnf-plugins-core rpm-build findutils
          dnf copr enable -y copr.fedorainfracloud.org/dcantrell/rpminspect
          dnf install -y rpminspect rpminspect-data-fedora
      - name: Run RPMInspect on SRPM and RPMs
        run: |
          tests/bin/rpminspect.sh
