name: Server Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Build server image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-server
          target: pki-server
          outputs: type=docker,dest=pki-server.tar

      - name: Store server image
        uses: actions/cache@v3
        with:
          key: pki-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-server.tar

  server-basic-test:
    name: Basic server
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/server-basic-test.yml
    with:
      os: ${{ matrix.os }}

  # docs/admin/server/Configuring-HTTPS-Connector-with-PEM-Files.adoc
  pki-server-https-pem-test:
    name: Testing HTTPS connector with PEM files
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create PKI server
        run: |
          docker exec pki pki-server create -v

      - name: Create SSL server cert
        run: |
          docker exec pki openssl req \
              -newkey rsa:2048 \
              -x509 \
              -nodes \
              -days 365 \
              -subj "/CN=$HOSTNAME" \
              -keyout /var/lib/pki/pki-tomcat/conf/sslserver.key \
              -out /var/lib/pki/pki-tomcat/conf/sslserver.crt
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/conf/sslserver.crt
          docker exec pki chmod 660 /var/lib/pki/pki-tomcat/conf/sslserver.crt
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/conf/sslserver.key
          docker exec pki chmod 660 /var/lib/pki/pki-tomcat/conf/sslserver.key

      - name: Create HTTPS connector with PEM files
        run: |
          docker exec pki pki-server http-connector-add \
              --port 8443 \
              --scheme https \
              --secure true \
              --sslEnabled true \
              --sslProtocol SSL \
              Secure
          docker exec pki pki-server http-connector-cert-add \
              --certFile /var/lib/pki/pki-tomcat/conf/sslserver.crt \
              --keyFile /var/lib/pki/pki-tomcat/conf/sslserver.key

      - name: Start PKI server
        run: |
          docker exec pki pki-server start

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Wait for PKI server to start
        run: |
          tests/bin/pki-start-wait.sh client https://pki.example.com:8443

      - name: Stop PKI server
        run: |
          docker exec pki pki-server stop --wait -v

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts from server container
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts from server container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-server-https-pem-test-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/admin/server/Configuring-HTTPS-Connector-with-JKS-File.adoc
  pki-server-https-jks-test:
    name: Testing HTTPS connector with JKS file
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create PKI server
        run: |
          docker exec pki pki-server create -v

      - name: Create SSL server cert
        run: |
          docker exec pki keytool -genkeypair \
              -keystore /var/lib/pki/pki-tomcat/conf/keystore.jks \
              -storepass Secret.123 \
              -alias "sslserver" \
              -dname "CN=$HOSTNAME" \
              -keyalg RSA \
              -keypass Secret.123
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/conf/keystore.jks
          docker exec pki chmod 660 /var/lib/pki/pki-tomcat/conf/keystore.jks

      - name: Create HTTPS connector with JKS file
        run: |
          docker exec pki pki-server http-connector-add \
              --port 8443 \
              --scheme https \
              --secure true \
              --sslEnabled true \
              --sslProtocol SSL \
              Secure
          docker exec pki pki-server http-connector-cert-add \
              --keyAlias sslserver \
              --keystoreFile /var/lib/pki/pki-tomcat/conf/keystore.jks \
              --keystorePassword Secret.123

      - name: Start PKI server
        run: |
          docker exec pki pki-server start

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Wait for PKI server to start
        run: |
          tests/bin/pki-start-wait.sh client https://pki.example.com:8443

      - name: Stop PKI server
        run: |
          docker exec pki pki-server stop --wait -v

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts from server container
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts from server container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-server-https-jks-test-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/admin/server/Configuring-HTTPS-Connector-with-PKCS12-File.adoc
  pki-server-https-pkcs12-test:
    name: "Testing HTTPS connector with PKCS #12 file"
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create PKI server
        run: |
          docker exec pki pki-server create -v

      - name: Create SSL server cert
        run: |
          docker exec pki keytool -genkeypair \
              -keystore /var/lib/pki/pki-tomcat/conf/keystore.p12 \
              -storetype pkcs12 \
              -storepass Secret.123 \
              -alias "sslserver" \
              -dname "CN=$HOSTNAME" \
              -keyalg RSA \
              -keypass Secret.123
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/conf/keystore.p12
          docker exec pki chmod 660 /var/lib/pki/pki-tomcat/conf/keystore.p12

      - name: "Create HTTPS connector with PKCS #12 file"
        run: |
          docker exec pki pki-server http-connector-add \
              --port 8443 \
              --scheme https \
              --secure true \
              --sslEnabled true \
              --sslProtocol SSL \
              Secure
          docker exec pki pki-server http-connector-cert-add \
              --keyAlias sslserver \
              --keystoreType pkcs12 \
              --keystoreFile /var/lib/pki/pki-tomcat/conf/keystore.p12 \
              --keystorePassword Secret.123

      - name: Start PKI server
        run: |
          docker exec pki pki-server start

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Wait for PKI server to start
        run: |
          tests/bin/pki-start-wait.sh client https://pki.example.com:8443

      - name: Stop PKI server
        run: |
          docker exec pki pki-server stop --wait -v

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts from server container
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts from server container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-server-https-pkcs12-test-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/admin/server/Configuring-HTTPS-Connector-with-NSS-Database.adoc
  pki-server-https-nss-test:
    name: Testing HTTPS connector with NSS database
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create PKI server
        run: |
          docker exec pki pki-server create -v

      - name: Create NSS database in PKI server
        run: |
          docker exec pki pki-server nss-create --no-password

      - name: Create SSL server cert
        run: |
          docker exec pki pki -d /var/lib/pki/pki-tomcat/alias \
              nss-cert-request \
              --subject "CN=$HOSTNAME" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr
          docker exec pki pki -d /var/lib/pki/pki-tomcat/alias \
              nss-cert-issue \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec pki pki -d /var/lib/pki/pki-tomcat/alias \
              nss-cert-import \
              --cert sslserver.crt \
              sslserver

      - name: Create HTTPS connector with NSS database
        run: |
          docker exec pki pki-server jss-enable
          docker exec pki pki-server http-connector-add \
              --port 8443 \
              --scheme https \
              --secure true \
              --sslEnabled true \
              --sslProtocol SSL \
              --sslImpl org.dogtagpki.tomcat.JSSImplementation \
              Secure
          docker exec pki pki-server http-connector-cert-add \
              --keyAlias sslserver \
              --keystoreType pkcs11 \
              --keystoreProvider Mozilla-JSS

      - name: Start PKI server
        run: |
          docker exec pki pki-server start

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Wait for PKI server to start
        run: |
          tests/bin/pki-start-wait.sh client https://pki.example.com:8443

      - name: Stop PKI server
        run: |
          docker exec pki pki-server stop --wait -v

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts from server container
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts from server container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-server-https-nss-test-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  pki-server-upgrade-test:
    name: Testing PKI server upgrade
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Add upgrade script
        run: |
          MAJOR_VERSION=$(sed -n 's/^%global *major_version *\(.*\)$/\1/p' pki.spec)
          MINOR_VERSION=$(sed -n 's/^%global *minor_version *\(.*\)$/\1/p' pki.spec)
          UPDATE_VERSION=$(sed -n 's/^%global *update_version *\(.*\)$/\1/p' pki.spec)

          VERSION=$MAJOR_VERSION.$MINOR_VERSION.$UPDATE_VERSION
          echo "VERSION: $VERSION"

          UPGRADE_DIR=/usr/share/pki/server/upgrade/$VERSION
          echo "UPGRADE_DIR: $UPGRADE_DIR"

          docker exec pki mkdir -p $UPGRADE_DIR
          docker exec pki ls $UPGRADE_DIR | tee output

          LAST_SCRIPT=$(tail -1 output)
          echo "LAST_SCRIPT: $LAST_SCRIPT"

          LAST_INDEX=$(echo "$LAST_SCRIPT" | sed 's/^\([0-9]*\).*$/\1/')
          echo "LAST_INDEX: $LAST_INDEX"

          if [ -z "$LAST_INDEX" ];then
              INDEX="01"
          else
              INDEX=$((LAST_INDEX + 1))
              if [ "$INDEX" -lt "10" ];then
                  INDEX="0$INDEX"
              fi
          fi
          echo "INDEX: $INDEX"

          docker exec pki cp \
              /usr/share/pki/server/examples/upgrade/01-BasicUpgradeScript.py \
              $UPGRADE_DIR/$INDEX-BasicUpgradeScript.py
          docker exec pki ls $UPGRADE_DIR

      - name: Run upgrade without any servers
        run: |
          docker exec pki pki-server upgrade -v | tee output

          # verify that the upgrade script was not executed
          grep "BasicUpgradeScript" output | tee actual
          [ ! -s actual ]

      - name: Create PKI server
        run: |
          docker exec pki pki-server create -v

      - name: Run upgrade with one server
        run: |
          docker exec pki pki-server upgrade -v | tee output

          # verify that the upgrade script was executed
          grep "BasicUpgradeScript:" output | tee actual
          [ -s actual ]

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-server-upgrade-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  pki-container-test:
    name: Testing PKI container
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Retrieve server image
        uses: actions/cache@v3
        with:
          key: pki-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-server.tar

      - name: Load server image
        run: docker load --input pki-server.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          docker run --name pki --detach pki-server

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Wait for server container to start
        run: |
          tests/bin/pki-start-wait.sh client https://pki.example.com:8443

      - name: Gather artifacts from server container
        if: always()
        run: |
          mkdir -p /tmp/artifacts/server
          docker logs pki > /tmp/artifacts/server/container.out 2> /tmp/artifacts/server/container.err
          mkdir -p /tmp/artifacts/server/var/lib
          docker cp pki:/var/lib/tomcats /tmp/artifacts/server/var/lib
        continue-on-error: true

      - name: Upload artifacts from server container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-container-test-${{ matrix.os }}
          path: /tmp/artifacts/server
