name: CA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initialization
    uses: ./.github/workflows/init.yml
    secrets: inherit

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        id: cache-buildx
        uses: actions/cache@v3
        with:
          key: buildx-${{ matrix.os }}-${{ hashFiles('pki.spec') }}
          path: /tmp/.buildx-cache

      - name: Build pki-deps image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-deps
          target: pki-deps
          cache-to: type=local,dest=/tmp/.buildx-cache
        if: steps.cache-buildx.outputs.cache-hit != 'true'

      - name: Build pki-builder-deps image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-builder-deps
          target: pki-builder-deps
          cache-to: type=local,dest=/tmp/.buildx-cache
        if: steps.cache-buildx.outputs.cache-hit != 'true'

      - name: Build runner image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          cache-from: type=local,src=/tmp/.buildx-cache
          outputs: type=docker,dest=pki-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Build server image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-ca
          target: pki-ca
          cache-from: type=local,src=/tmp/.buildx-cache
          outputs: type=docker,dest=pki-ca.tar

      - name: Store server image
        uses: actions/cache@v3
        with:
          key: pki-ca-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca.tar

  ca-basic-test:
    name: Basic CA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-basic-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-ecc-test:
    name: CA with ECC
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-ecc-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-rsa-pss-test:
    name: CA with RSA/PSS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-rsa-pss-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-existing-certs-test:
    name: CA with existing certs
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-certs-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-existing-nssdb-test:
    name: CA with existing NSS database
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-nssdb-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-existing-hsm-test:
    name: CA with existing HSM
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-hsm-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-existing-ds-test:
    name: CA with existing DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-ds-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-shared-token-test:
    name: CA with shared token
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-shared-token-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-hsm-test:
    name: CA with HSM
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-hsm-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-container-test:
    name: CA container
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-container-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-ds-connection-test:
    name: CA connection with DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-ds-connection-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  ca-lightweight-test:
    name: Lightweight CA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-lightweight-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  subca-basic-test:
    name: Basic Sub-CA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-basic-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  subca-cmc-test:
    name: Sub-CA with CMC
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-cmc-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  subca-external-test:
    name: Sub-CA with external cert
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-external-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}

  subca-hsm-test:
    name: Sub-CA with HSM
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-hsm-test.yml
    with:
      os: ${{ matrix.os }}
      db-image: ${{ needs.init.outputs.db-image }}
