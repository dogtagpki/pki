name: CA Tests

on: [push, pull_request]

jobs:
  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Install git
        run: dnf install -y git

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build
          dnf copr enable -y @pki/master
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca --with-timestamp --with-commit-id --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS/

  # docs/installation/ca/Installing_CA.md
  ca-test:
    name: Installing CA
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Build container with systemd
        run: docker build ci -t pki --build-arg OS_VERSION=${{ matrix.os }}

      - name: Run container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Install CA
        run: docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Gather config files
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/pki-conf.tar -C / etc/pki

      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-conf-${{ matrix.os }}
          path: pki-conf.tar

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/pki-logs.tar -C / var/log/pki

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki-logs-${{ matrix.os }}
          path: pki-logs.tar

  # docs/installation/ca/Installing_Subordinate_CA.md
  subca-test:
    name: Installing Subordinate CA
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Build container with systemd
        run: docker build ci -t pki --build-arg OS_VERSION=${{ matrix.os }}

      - name: Create network
        run: docker network create example

      - name: Run root container
        run: |
          IMAGE=pki \
          NAME=root \
          HOSTNAME=root.example.com \
          ci/runner-init.sh

      - name: Connect root container to network
        run: docker network connect example root --alias root.example.com

      - name: Install dependencies in root container
        run: |
          docker exec root dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec root dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in root container
        run: docker exec root bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in root container
        run: docker exec root ${PKIDIR}/ci/ds-create.sh

      - name: Install root CA in root container
        run: docker exec root pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Gather config files from root container
        if: always()
        run: docker exec root tar cvf ${PKIDIR}/root-conf.tar -C / etc/pki

      - name: Upload config files from root container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: root-conf-${{ matrix.os }}
          path: root-conf.tar

      - name: Setup subordinate container
        run: |
          IMAGE=pki \
          NAME=subordinate \
          HOSTNAME=sub.example.com \
          ci/runner-init.sh

      - name: Connect subordinate container to network
        run: docker network connect example subordinate --alias sub.example.com

      - name: Install dependencies in subordinate container
        run: |
          docker exec subordinate dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec subordinate dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in subordinate container
        run: docker exec subordinate bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in subordinate container
        run: docker exec subordinate ${PKIDIR}/ci/ds-create.sh

      - name: Install subordinate CA in subordinate container
        run: |
          docker exec root pki-server cert-export ca_signing --cert-file ${PKIDIR}/root-ca_signing.crt
          docker exec subordinate cp ${PKIDIR}/root-ca_signing.crt .
          docker exec subordinate pkispawn -f /usr/share/pki/server/examples/installation/subca.cfg -s CA -v

      - name: Gather config files from subordinate container
        if: always()
        run: docker exec subordinate tar cvf ${PKIDIR}/subordinate-conf.tar -C / etc/pki

      - name: Upload config files from subordinate container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: subordinate-conf-${{ matrix.os }}
          path: subordinate-conf.tar

      - name: Run PKI healthcheck
        run: docker exec subordinate pki-healthcheck --debug

      - name: Verify CA admin
        run: |
          docker exec subordinate pki client-cert-import ca_signing --ca-cert root-ca_signing.crt
          docker exec subordinate pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec subordinate pki -n caadmin ca-user-show caadmin

      - name: Remove subordinate CA from subordinate container
        run: docker exec subordinate pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from subordinate container
        run: docker exec subordinate ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect subordinate container from network
        run: docker network disconnect example subordinate

      - name: Gather logs from subordinate container
        if: always()
        run: |
          docker exec subordinate bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec subordinate tar cvf ${PKIDIR}/subordinate-logs.tar -C / var/log/pki

      - name: Upload log files from subordinate container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: subordinate-logs-${{ matrix.os }}
          path: subordinate-logs.tar

      - name: Remove root CA from root container
        run: docker exec root pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from root container
        run: docker exec root ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect root container from network
        run: docker network disconnect example root

      - name: Remove network
        run: docker network rm example

      - name: Gather logs from root container
        if: always()
        run: |
          docker exec root bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec root tar cvf ${PKIDIR}/root-logs.tar -C / var/log/pki

      - name: Upload logs from root container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: root-logs-${{ matrix.os }}
          path: root-logs.tar

  # docs/installation/ca/Installing_CA_with_External_CA_Signing_Certificate.md
  ca-external-cert-test:
    name: Installing CA with External Signing Certificate
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Build container with systemd
        run: docker build ci -t pki --build-arg OS_VERSION=${{ matrix.os }}

      - name: Setup PKI container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Create root CA in NSS database
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=Root CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr root-ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr root-ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert root-ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert root-ca_signing.crt \
              --trust CT,C,C \
              root-ca_signing

      - name: Install subordinate CA
        run: |
          docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca-external-cert-step1.cfg -s CA -v
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer root-ca_signing \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt
          docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca-external-cert-step2.cfg -s CA -v

      - name: Gather config files
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/ca-external-cert-conf.tar -C / etc/pki

      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-external-cert-conf-${{ matrix.os }}
          path: ca-external-cert-conf.tar

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Verify CA admin
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert root-ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Remove subordinate CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/ca-external-cert-logs.tar -C / var/log/pki

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-external-cert-logs-${{ matrix.os }}
          path: ca-external-cert-logs.tar

  # docs/installation/ca/Installing_CA_with_Existing_Keys_in_Internal_Token.md
  ca-existing-certs-test:
    name: Installing CA with Existing Certificates
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Build container with systemd
        run: docker build ci -t pki --build-arg OS_VERSION=${{ matrix.os }}

      - name: Setup PKI container
        run: |
          IMAGE=pki \
          NAME=pki \
          HOSTNAME=pki.example.com \
          ci/runner-init.sh

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec pki dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages
        run: docker exec pki bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS
        run: docker exec pki ${PKIDIR}/ci/ds-create.sh

      - name: Create CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --serial 1 \
              --cert ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing
          docker exec pki bash -c "certutil -K -d nssdb | grep ca_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_signing.key"

      - name: Create CA OCSP signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr ca_ocsp_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr ca_ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --serial 2 \
              --cert ca_ocsp_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_ocsp_signing.crt \
              ca_ocsp_signing
          docker exec pki bash -c "certutil -K -d nssdb | grep ca_ocsp_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_ocsp_signing.key"

      - name: Create CA audit signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr ca_audit_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr ca_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --serial 3 \
              --cert ca_audit_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_audit_signing.crt \
              --trust ,,P \
              ca_audit_signing
          docker exec pki bash -c "certutil -K -d nssdb | grep ca_audit_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_audit_signing.key"

      - name: Export CA certs
        run: |
          docker exec pki pki -d nssdb pkcs12-export \
              --pkcs12 ca-certs.p12 \
              --password Secret.123
          docker exec pki pki pkcs12-cert-find \
              --pkcs12 ca-certs.p12 \
              --password Secret.123

      - name: Install CA with existing certs
        run: |
          docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca-existing-certs-step1.cfg -s CA -v
          sleep 1  # avoid pkispawn log conflict due to identical timestamps
          docker exec pki pkispawn -f /usr/share/pki/server/examples/installation/ca-existing-certs-step2.cfg -s CA -v

      - name: Gather config files
        if: always()
        run: docker exec pki tar cvf ${PKIDIR}/ca-existing-certs-conf.tar -C / etc/pki

      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-existing-certs-conf-${{ matrix.os }}
          path: ca-existing-certs-conf.tar

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Verify CA keys
        run: |
          docker exec pki bash -c "echo Secret.123 > password.txt"
          docker exec pki bash -c "certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | grep ca_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_signing.key.new"
          docker exec pki diff ca_signing.key ca_signing.key.new
          docker exec pki bash -c "certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | grep ca_ocsp_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_ocsp_signing.key.new"
          docker exec pki diff ca_ocsp_signing.key ca_ocsp_signing.key.new
          docker exec pki bash -c "certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | grep ca_audit_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_audit_signing.key.new"
          docker exec pki diff ca_audit_signing.key ca_audit_signing.key.new

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password-file /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${PKIDIR}/ci/ds-remove.sh

      - name: Gather log files
        if: always()
        run: |
          docker exec pki bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec pki tar cvf ${PKIDIR}/ca-existing-certs-logs.tar -C / var/log/pki

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-existing-certs-logs-${{ matrix.os }}
          path: ca-existing-certs-logs.tar

  # docs/installation/ca/Installing_CA_Clone.md
  ca-clone-test:
    name: Installing CA Clone
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Build container with systemd
        run: docker build ci -t pki --build-arg OS_VERSION=${{ matrix.os }}

      - name: Create network
        run: docker network create example

      - name: Run master container
        run: |
          IMAGE=pki \
          NAME=master \
          HOSTNAME=master.example.com \
          ci/runner-init.sh

      - name: Connect master container to network
        run: docker network connect example master --alias master.example.com

      - name: Install dependencies in master container
        run: |
          docker exec master dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec master dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages in master container
        run: docker exec master bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in master container
        run: docker exec master ${PKIDIR}/ci/ds-create.sh

      - name: Install master CA in master container
        run: docker exec master pkispawn -f /usr/share/pki/server/examples/installation/ca.cfg -s CA -v

      - name: Gather config files from replica container
        if: always()
        run: docker exec master tar cvf ${PKIDIR}/master-conf.tar -C / etc/pki

      - name: Upload config files from replica container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: master-conf-${{ matrix.os }}
          path: master-conf.tar

      - name: Setup replica container
        run: |
          IMAGE=pki \
          NAME=replica \
          HOSTNAME=replica.example.com \
          ci/runner-init.sh

      - name: Connect replica container to network
        run: docker network connect example replica --alias replica.example.com

      - name: Install dependencies in replica container
        run: |
          docker exec replica dnf install -y findutils dnf-plugins-core wget 389-ds-base
          docker exec replica dnf copr enable -y ${COPR_REPO}

      - name: Install PKI packages on replica container
        run: docker exec replica bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Install DS in replica container
        run: docker exec replica ${PKIDIR}/ci/ds-create.sh

      - name: Install CA clone in replica container
        run: |
          docker exec master pki-server cert-export ca_signing --cert-file ${PKIDIR}/master-ca_signing.crt
          docker exec master pki-server ca-clone-prepare --pkcs12-file ${PKIDIR}/master-ca-certs.p12 --pkcs12-password Secret.123
          docker exec replica cp ${PKIDIR}/master-ca_signing.crt .
          docker exec replica cp ${PKIDIR}/master-ca-certs.p12 .
          docker exec replica pkispawn -f /usr/share/pki/server/examples/installation/ca-clone.cfg -s CA -v

      - name: Gather config files from replica container
        if: always()
        run: docker exec replica tar cvf ${PKIDIR}/replica-conf.tar -C / etc/pki

      - name: Upload config files from replica container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: replica-conf-${{ matrix.os }}
          path: replica-conf.tar

      - name: Verify CA admin
        run: |
          docker exec master cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${PKIDIR}/master-ca_admin_cert.p12
          docker exec master cp /root/.dogtag/pki-tomcat/ca/pkcs12_password.conf ${PKIDIR}/master-pkcs12_password.conf
          docker exec replica cp ${PKIDIR}/master-ca_admin_cert.p12 .
          docker exec replica cp ${PKIDIR}/master-pkcs12_password.conf .
          docker exec replica pki client-cert-import ca_signing --ca-cert master-ca_signing.crt
          docker exec replica pki client-cert-import \
              --pkcs12 master-ca_admin_cert.p12 \
              --pkcs12-password-file master-pkcs12_password.conf
          docker exec replica pki -n caadmin ca-user-show caadmin

      - name: Remove CA clone from replica container
        run: docker exec replica pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from replica container
        run: docker exec replica ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect replica container from network
        run: docker network disconnect example replica

      - name: Gather log files from replica container
        if: always()
        run: |
          docker exec replica bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec replica tar cvf ${PKIDIR}/replica-logs.tar -C / var/log/pki

      - name: Upload log files from replica container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: replica-logs-${{ matrix.os }}
          path: replica-logs.tar

      - name: Remove master CA from master container
        run: docker exec master pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS from master container
        run: docker exec master ${PKIDIR}/ci/ds-remove.sh

      - name: Disconnect master container from network
        run: docker network disconnect example master

      - name: Remove network
        run: docker network rm example

      - name: Gather log files from master container
        if: always()
        run: |
          docker exec master bash -c "journalctl -u pki-tomcatd@pki-tomcat > /var/log/pki/pki-tomcat/systemd.log"
          docker exec master tar cvf ${PKIDIR}/master-logs.tar -C / var/log/pki

      - name: Upload log files from master container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: master-logs-${{ matrix.os }}
          path: master-logs.tar
