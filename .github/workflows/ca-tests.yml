name: CA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-ca-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Build server image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-ca
          target: pki-ca
          outputs: type=docker,dest=pki-ca-server.tar

      - name: Store server image
        uses: actions/cache@v3
        with:
          key: pki-ca-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-server.tar

  ca-basic-test:
    name: Basic CA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-basic-test.yml
    with:
      os: ${{ matrix.os }}

  ca-ecc-test:
    name: CA with ECC
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-ecc-test.yml
    with:
      os: ${{ matrix.os }}

  ca-rsa-pss-test:
    name: CA with RSA/PSS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-rsa-pss-test.yml
    with:
      os: ${{ matrix.os }}

  ca-existing-certs-test:
    name: CA with existing certs
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-certs-test.yml
    with:
      os: ${{ matrix.os }}

  ca-existing-nssdb-test:
    name: CA with existing NSS database
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-nssdb-test.yml
    with:
      os: ${{ matrix.os }}

  ca-existing-ds-test:
    name: CA with existing DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-existing-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-shared-token-test:
    name: CA with shared token
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-shared-token-test.yml
    with:
      os: ${{ matrix.os }}

  ca-hsm-test:
    name: Testing CA with HSM
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-hsm-test.yml
    with:
      os: ${{ matrix.os }}

  subca-basic-test:
    name: Basic Sub-CA
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-basic-test.yml
    with:
      os: ${{ matrix.os }}

  subca-cmc-test:
    name: Sub-CA with CMC
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-cmc-test.yml
    with:
      os: ${{ matrix.os }}

  subca-external-test:
    name: Sub-CA with external cert
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/subca-external-test.yml
    with:
      os: ${{ matrix.os }}

  ca-container-test:
    name: Testing CA container
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Retrieve server image
        uses: actions/cache@v3
        with:
          key: pki-ca-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-server.tar

      - name: Load CA image
        run: docker load --input pki-ca-server.tar

      - name: Create network
        run: docker network create example

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Create CA signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --months-valid 12 \
              --cert ca_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing
          docker exec client pki \
              nss-cert-show \
              ca_signing

      - name: Create OCSP signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr ocsp_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --cert ocsp_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert ocsp_signing.crt \
              ocsp_signing
          docker exec client pki \
              nss-cert-show \
              ocsp_signing

      - name: Create audit signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr audit_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert audit_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert audit_signing.crt \
              --trust ,,P \
              audit_signing
          docker exec client pki \
              nss-cert-show \
              audit_signing

      - name: Create subsystem cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --csr subsystem.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec client pki \
              nss-cert-import \
              --cert subsystem.crt \
              subsystem
          docker exec client pki \
              nss-cert-show \
              subsystem

      - name: Create SSL server cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=ca.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec client pki \
              nss-cert-import \
              --cert sslserver.crt \
              sslserver
          docker exec client pki \
              nss-cert-show \
              sslserver

      - name: Create admin cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Administrator" \
              --ext /usr/share/pki/server/certs/admin.conf \
              --csr admin.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert admin.crt
          docker exec client pki \
              nss-cert-import \
              --cert admin.crt \
              admin
          docker exec client pki \
              nss-cert-show \
              admin

      - name: Export system certs and keys
        run: |
          docker exec client pki \
              pkcs12-export \
              --pkcs12 server.p12 \
              --password Secret.123 \
              ca_signing \
              ocsp_signing \
              audit_signing \
              subsystem \
              sslserver

      - name: Export admin cert and key
        run: |
          docker exec client pki \
              pkcs12-export \
              --pkcs12 admin.p12 \
              --password Secret.123 \
              admin

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Configure DS database
        run: |
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/server/database/ds/config.ldif

      - name: Add PKI schema
        run: |
          docker exec ds ldapmodify \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/server/database/ds/schema.ldif

      - name: Add CA base entry
        run: |
          docker exec -i ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: dc=ca,dc=pki,dc=example,dc=com
          objectClass: dcObject
          dc: ca
          EOF

      - name: Add CA database entries
        run: |
          sed \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/create.ldif \
              | tee create.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/create.ldif

      - name: Add CA search indexes
        run: |
          sed \
              -e 's/{database}/userroot/g' \
              base/ca/database/ds/index.ldif \
              | tee index.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/index.ldif

      - name: Rebuild CA search indexes
        run: |
          # start rebuild task
          sed \
              -e 's/{database}/userroot/g' \
              base/ca/database/ds/indextasks.ldif \
              | tee indextasks.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/indextasks.ldif

          # wait for task to complete
          while true; do
              sleep 1

              docker exec ds ldapsearch \
                  -H ldap://ds.example.com:3389 \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  -b "cn=index1160589770, cn=index, cn=tasks, cn=config" \
                  -LLL \
                  nsTaskExitCode \
                  | tee output

              sed -n -e 's/nsTaskExitCode:\s*\(.*\)/\1/p' output > nsTaskExitCode
              cat nsTaskExitCode

              if [ -s nsTaskExitCode ]; then
                  break
              fi
          done

          echo "0" > expected
          diff expected nsTaskExitCode

      - name: Add CA ACL resources
        run: |
          sed \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/acl.ldif \
              | tee acl.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/acl.ldif

      - name: Grant access to PKI database user
        run: |
          sed \
              -e 's/{rootSuffix}/dc=example,dc=com/g' \
              -e 's/{dbuser}/uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com/g' \
              base/server/database/ds/db-access-grant.ldif \
              | tee db-access-grant.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/db-access-grant.ldif \
              -c

      - name: Add CA VLV indexes
        run: |
          sed \
              -e 's/{instanceId}/pki-tomcat/g' \
              -e 's/{database}/userroot/g' \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/vlv.ldif \
              | tee vlv.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/vlv.ldif

      - name: Rebuild CA VLV indexes
        run: |
          # start rebuild task
          sed \
              -e 's/{database}/userroot/g' \
              -e 's/{instanceId}/pki-tomcat/g' \
              base/ca/database/ds/vlvtasks.ldif \
              | tee vlvtasks.ldif
          docker exec ds ldapadd \
              -H ldap://ds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/vlvtasks.ldif

          # wait for task to complete
          while true; do
              sleep 1

              docker exec ds ldapsearch \
                  -H ldap://ds.example.com:3389 \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  -b "cn=index1160589769, cn=index, cn=tasks, cn=config" \
                  -LLL \
                  nsTaskExitCode \
                  | tee output

              sed -n -e 's/nsTaskExitCode:\s*\(.*\)/\1/p' output > nsTaskExitCode
              cat nsTaskExitCode

              if [ -s nsTaskExitCode ]; then
                  break
              fi
          done

          echo "0" > expected
          diff expected nsTaskExitCode

      - name: Set up CA container
        run: |
          mkdir certs
          docker cp client:server.p12 certs
          docker cp client:admin.p12 certs
          docker cp client:ca_signing.csr certs
          docker cp client:ocsp_signing.csr certs
          docker cp client:audit_signing.csr certs
          docker cp client:subsystem.csr certs
          docker cp client:sslserver.csr certs
          docker cp client:admin.csr certs
          ls -la certs

          docker run \
              --name ca \
              --hostname=ca.example.com \
              --network=example \
              --network-alias=ca.example.com \
              -v $PWD/certs:/certs \
              --detach \
              pki-ca

      - name: Wait for CA container to start
        run: |
          tests/bin/pki-start-wait.sh client https://ca.example.com:8443
        env:
          MAX_WAIT: 180

      - name: Check server logs
        if: always()
        run: |
          docker logs ca 2>&1

      - name: Check public operations from CA container
        run: |
          # check PKI server info
          docker exec ca pki info

          # check certs in CA
          docker exec ca pki ca-cert-find

      - name: Check admin operations from CA container
        run: |
          # check admin user
          docker exec ca pki \
              -n admin \
              ca-user-show \
              admin

      - name: Check public operations from client container
        run: |
          # clean the NSS database
          docker exec client pki client-init --force

          # install CA signing cert
          docker cp ca:/certs/ca_signing.crt ca_signing.crt
          docker cp ca_signing.crt client:ca_signing.crt
          docker exec client pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          # check PKI server info
          docker exec client pki \
              -U https://ca.example.com:8443 \
              info

          # check certs in CA
          docker exec client pki \
              -U https://ca.example.com:8443 \
              ca-cert-find

      - name: Check admin operations from client container
        run: |
          # install admin cert
          docker cp ca:/certs/admin.p12 admin.p12
          docker cp admin.p12 client:admin.p12
          docker exec client pki \
              pkcs12-import \
              --pkcs12 admin.p12 \
              --password Secret.123

          # check admin user
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-user-show \
              admin

      - name: Gather artifacts from CA container
        if: always()
        run: |
          mkdir -p /tmp/artifacts/ca
          docker logs ca > /tmp/artifacts/ca/container.out 2> /tmp/artifacts/ca/container.err
          mkdir -p /tmp/artifacts/ca/var/lib
          docker cp ca:/etc/pki /tmp/artifacts/ca/etc
          docker cp ca:/var/lib/pki /tmp/artifacts/ca/var/lib
          docker cp ca:/var/log/pki /tmp/artifacts/ca/var/log
        continue-on-error: true

      - name: Gather artifacts from client container
        if: always()
        run: |
          mkdir -p /tmp/artifacts/client
          docker logs client > /tmp/artifacts/client/container.out 2> /tmp/artifacts/client/container.err

      - name: Upload artifacts from CA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-container-ca-${{ matrix.os }}
          path: /tmp/artifacts/ca

      - name: Upload artifacts from client container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-container-client-${{ matrix.os }}
          path: /tmp/artifacts/client
