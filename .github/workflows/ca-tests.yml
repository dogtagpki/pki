name: CA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: /var/cache/dnf
          key: fedora:${{ matrix.os }}-ca-${{ hashFiles('pki.spec') }}

      - name: Install dependencies
        run: |
          # keep packages after installation
          echo "keepcache=True" >> /etc/dnf/dnf.conf
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck
          # don't cache COPR packages
          rm -f `find /var/cache/dnf -name '*.rpm' | grep '/var/cache/dnf/copr:'`

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=/tmp/pki-runner.tar

      - name: Upload runner image
        uses: actions/upload-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp/pki-runner.tar

  # docs/installation/ca/Installing_CA.md
  ca-test:
    name: Testing CA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

          # set buffer size to 0 so that revocation takes effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # enable signed audit log
          docker exec pki pki-server ca-config-set log.instance.SignedAudit.logSigning true

          # switch cert request ID generator to RSNv3
          docker exec pki pki-server ca-config-unset dbs.beginRequestNumber
          docker exec pki pki-server ca-config-unset dbs.endRequestNumber
          docker exec pki pki-server ca-config-unset dbs.requestIncrement
          docker exec pki pki-server ca-config-unset dbs.requestLowWaterMark
          docker exec pki pki-server ca-config-unset dbs.requestCloneTransferNumber
          docker exec pki pki-server ca-config-unset dbs.requestRangeDN

          docker exec pki pki-server ca-config-set dbs.request.id.generator random
          docker exec pki pki-server ca-config-set dbs.request.id.length 128

          # switch cert ID generator to RSNv3
          docker exec pki pki-server ca-config-unset dbs.beginSerialNumber
          docker exec pki pki-server ca-config-unset dbs.endSerialNumber
          docker exec pki pki-server ca-config-unset dbs.serialIncrement
          docker exec pki pki-server ca-config-unset dbs.serialLowWaterMark
          docker exec pki pki-server ca-config-unset dbs.serialCloneTransferNumber
          docker exec pki pki-server ca-config-unset dbs.serialRangeDN

          docker exec pki pki-server ca-config-set dbs.cert.id.generator random
          docker exec pki pki-server ca-config-set dbs.cert.id.length 128

          # restart PKI server
          docker exec pki pki-server restart --wait

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki info

      - name: Test CA certs
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-signing-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-subsystem-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-certs.sh

      - name: Test CA admin
        run: |
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Test CA agent
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

      - name: Test CA auditor
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-logs.sh

      - name: Check CA profiles
        run: |
          docker exec pki pki -n caadmin ca-profile-find

          # create custom profile
          docker exec pki pki -n caadmin ca-profile-show caUserCert --output ${SHARED}/profile.xml
          sed -i "s/caUserCert/caCustomUser/g" profile.xml
          docker exec pki pki --debug -n caadmin ca-profile-add ${SHARED}/profile.xml
          docker exec pki pki -n caadmin ca-profile-show caCustomUser

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_CA_with_ECC.md
  ca-ecc-test:
    name: Testing CA with ECC
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-ecc.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Verify that system certs have ECC keys
        run: |
          docker exec pki bash -c "echo Secret.123 > password.txt"
          docker exec pki certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | tee output
          echo "ec" > expected

          grep ca_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep ca_ocsp_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep ca_audit_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep subsystem output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep sslserver output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-ecc-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_Subordinate_CA.md
  subca-test:
    name: Testing subordinate CA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up root DS container
        run: |
          tests/bin/ds-container-create.sh rootds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: rootds.example.com
          PASSWORD: Secret.123

      - name: Connect root DS container to network
        run: docker network connect example rootds --alias rootds.example.com

      - name: Set up root PKI container
        run: |
          tests/bin/runner-init.sh root
        env:
          HOSTNAME: root.example.com

      - name: Connect root PKI container to network
        run: docker network connect example root --alias root.example.com

      - name: Install root CA in root container
        run: |
          docker exec root pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=rootds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec root pki-server cert-find

      - name: Set up subordinate DS container
        run: |
          tests/bin/ds-container-create.sh subds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: subds.example.com
          PASSWORD: Secret.123

      - name: Connect subordinate DS container to network
        run: docker network connect example subds --alias subds.example.com

      - name: Set up subordinate PKI container
        run: |
          tests/bin/runner-init.sh subordinate
        env:
          HOSTNAME: sub.example.com

      - name: Connect subordinate PKI container to network
        run: docker network connect example subordinate --alias sub.example.com

      - name: Install subordinate CA in subordinate container
        run: |
          docker exec root pki-server cert-export ca_signing --cert-file ${SHARED}/root-ca_signing.crt
          docker exec subordinate pkispawn \
              -f /usr/share/pki/server/examples/installation/subca.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/root-ca_signing.crt \
              -D pki_ds_hostname=subds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check CA signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec subordinate pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec subordinate openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec subordinate pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec subordinate openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec subordinate openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec subordinate pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec subordinate pki client-cert-import ca_signing --ca-cert ${SHARED}/root-ca_signing.crt
          docker exec subordinate pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec subordinate pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in subordinate CA
        run: |
          docker exec subordinate pki -n caadmin ca-cert-request-find

      - name: Gather artifacts from root containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/root rootds
          tests/bin/pki-artifacts-save.sh root
        continue-on-error: true

      - name: Gather artifacts from subordinate containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/subordinate subds
          tests/bin/pki-artifacts-save.sh subordinate
        continue-on-error: true

      - name: Remove subordinate CA from subordinate container
        run: docker exec subordinate pkidestroy -i pki-tomcat -s CA -v

      - name: Remove root CA from root container
        run: docker exec root pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from root container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-root-${{ matrix.os }}
          path: |
            /tmp/artifacts/root

      - name: Upload artifacts from subordinate container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-subordinate-${{ matrix.os }}
          path: |
            /tmp/artifacts/subordinate

  # docs/installation/ca/Installing_CA_with_External_CA_Signing_Certificate.md
  subca-cmc-test:
    name: Testing subordinate CA with CMC
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up root DS container
        run: |
          tests/bin/ds-container-create.sh rootds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: rootds.example.com
          PASSWORD: Secret.123

      - name: Connect root DS container to network
        run: docker network connect example rootds --alias rootds.example.com

      - name: Set up root PKI container
        run: |
          tests/bin/runner-init.sh root
        env:
          HOSTNAME: root.example.com

      - name: Connect root PKI container to network
        run: docker network connect example root --alias root.example.com

      - name: Install root CA in root container
        run: |
          docker exec root pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=rootds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_security_domain_name=ROOT \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Update caCMCcaCert profile
        run: |
          # Reduce policyset.caCertSet.2.default.params.range such that
          # it generates a subordinate CA cert with shorter validity
          # which will not violate the CAValidityConstraint.
          docker exec root sed -i \
              -e "s/\(policyset.caCertSet.2.default.params.range\)=.*/\1=7300/" \
              /var/lib/pki/pki-tomcat/ca/profiles/ca/caCMCcaCert.cfg
          docker exec root pki-server restart --wait

      - name: Install root CA admin cert
        run: |
          docker exec root pki-server cert-export ca_signing --cert-file $SHARED/root-ca_signing.crt
          docker exec root pki client-cert-import ca_signing --ca-cert $SHARED/root-ca_signing.crt
          docker exec root pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec root pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in root CA
        run: |
          docker exec root pki -n caadmin ca-cert-request-find

      - name: Set up subordinate DS container
        run: |
          tests/bin/ds-container-create.sh subds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: subds.example.com
          PASSWORD: Secret.123

      - name: Connect subordinate DS container to network
        run: docker network connect example subds --alias subds.example.com

      - name: Set up subordinate PKI container
        run: |
          tests/bin/runner-init.sh subordinate
        env:
          HOSTNAME: sub.example.com

      - name: Connect subordinate PKI container to network
        run: docker network connect example subordinate --alias sub.example.com

      - name: Install subordinate CA in subordinate container (step 1)
        run: |
          docker exec subordinate pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step1.cfg \
              -s CA \
              -D pki_ds_hostname=subds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_ca_signing_csr_path=$SHARED/ca_signing.csr \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      # https://github.com/dogtagpki/pki/wiki/Issuing-CA-Signing-Certificate-with-CMC
      - name: Issue subordinate CA signing cert with CMC
        run: |
          # check cert request
          docker exec root openssl req -text -noout -in $SHARED/ca_signing.csr

          # create CMC request
          docker exec root mv $SHARED/ca_signing.csr ca_signing.csr
          docker exec root CMCRequest \
              /usr/share/pki/server/examples/cmc/ca_signing-cmc-request.cfg

          # submit CMC request
          docker exec root HttpClient \
              /usr/share/pki/server/examples/cmc/ca_signing-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec root CMCResponse \
              -d /root/.dogtag/nssdb \
              -i ca_signing.cmc-response \
              -o $SHARED/ca_signing.p7b

          # check issued cert chain
          docker exec root openssl pkcs7 -print_certs -in $SHARED/ca_signing.p7b

      - name: Install subordinate CA in subordinate container (step 2)
        run: |
          docker exec subordinate pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step2.cfg \
              -s CA \
              -D pki_ds_hostname=subds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_chain_path=$SHARED/root-ca_signing.crt \
              -D pki_ca_signing_csr_path=$SHARED/ca_signing.csr \
              -D pki_ca_signing_cert_path=$SHARED/ca_signing.p7b \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check subordinate CA signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_signing.crt

      - name: Check subordinate CA OCSP signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check subordinate CA audit signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subordinate subsystem cert
        run: |
          docker exec subordinate pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec subordinate openssl x509 -text -noout -in subsystem.crt

      - name: Check subordinate SSL server cert
        run: |
          docker exec subordinate pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec subordinate openssl x509 -text -noout -in sslserver.crt

      - name: Check subordinate CA admin cert
        run: |
          docker exec subordinate openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec subordinate pki-healthcheck --failures-only

      - name: Verify subordinate CA admin cert
        run: |
          docker exec subordinate pki client-cert-import ca_signing --ca-cert $SHARED/ca_signing.p7b
          docker exec subordinate pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec subordinate pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in subordinate CA
        run: |
          docker exec subordinate pki -n caadmin ca-cert-request-find

      - name: Gather artifacts from root containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/root rootds
          tests/bin/pki-artifacts-save.sh root
        continue-on-error: true

      - name: Gather artifacts from subordinate containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/subordinate subds
          tests/bin/pki-artifacts-save.sh subordinate
        continue-on-error: true

      - name: Remove subordinate CA from subordinate container
        run: docker exec subordinate pkidestroy -i pki-tomcat -s CA -v

      - name: Remove root CA from root container
        run: docker exec root pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from root container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-root-cmc-${{ matrix.os }}
          path: |
            /tmp/artifacts/root

      - name: Upload artifacts from subordinate container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-subordinate-cmc-${{ matrix.os }}
          path: |
            /tmp/artifacts/subordinate

  # docs/installation/ca/Installing_CA_with_External_CA_Signing_Certificate.md
  ca-external-cert-test:
    name: Testing CA with external signing certificate
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create root CA in NSS database
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=Root CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr root-ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr root-ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert root-ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert root-ca_signing.crt \
              --trust CT,C,C \
              root-ca_signing

      - name: Install subordinate CA (step 1)
        run: |
          # https://github.com/dogtagpki/pki/wiki/Adding-CA-Signing-CSR-Extension
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step1.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_req_ext_add=True \
              -D pki_req_ext_oid=1.3.6.1.4.1.311.20.2 \
              -D pki_req_ext_data=1E0A00530075006200430041 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki /usr/share/pki/tests/ca/bin/test-subca-signing-csr-ext.sh ca_signing.csr

      - name: Issue subordinate CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer root-ca_signing \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/subca_signing.conf \
              --cert ca_signing.crt

      - name: Install subordinate CA (step 2)
        run: |
          # https://github.com/dogtagpki/pki/wiki/Adding-CA-Signing-CSR-Extension
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step2.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_req_ext_add=True \
              -D pki_req_ext_oid=1.3.6.1.4.1.311.20.2 \
              -D pki_req_ext_data=1E0A00530075006200430041 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki /usr/share/pki/tests/ca/bin/test-subca-signing-cert-ext.sh ca_signing.crt

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert root-ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove subordinate CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-external-cert-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_CA_with_Existing_Keys_in_Internal_Token.md
  ca-existing-certs-test:
    name: Testing CA with existing certificates
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --serial 1 \
              --cert ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing
          docker exec pki bash -c "certutil -K -d nssdb | grep ca_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_signing.key"

      - name: Create CA OCSP signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr ca_ocsp_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr ca_ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --serial 2 \
              --cert ca_ocsp_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_ocsp_signing.crt \
              ca_ocsp_signing
          docker exec pki bash -c "certutil -K -d nssdb | grep ca_ocsp_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_ocsp_signing.key"

      - name: Create CA audit signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr ca_audit_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer ca_signing \
              --csr ca_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --serial 3 \
              --cert ca_audit_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert ca_audit_signing.crt \
              --trust ,,P \
              ca_audit_signing
          docker exec pki bash -c "certutil -K -d nssdb | grep ca_audit_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_audit_signing.key"

      - name: Export CA certs
        run: |
          docker exec pki pki -d nssdb pkcs12-export \
              --pkcs12 ca-certs.p12 \
              --password Secret.123
          docker exec pki pki pkcs12-cert-find \
              --pkcs12 ca-certs.p12 \
              --password Secret.123

      - name: Install CA with existing certs
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-existing-certs-step1.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v
          sleep 1  # avoid pkispawn log conflict due to identical timestamps
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-existing-certs-step2.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify CA keys
        run: |
          docker exec pki bash -c "echo Secret.123 > password.txt"
          docker exec pki bash -c "certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | grep ca_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_signing.key.new"
          docker exec pki diff ca_signing.key ca_signing.key.new
          docker exec pki bash -c "certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | grep ca_ocsp_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_ocsp_signing.key.new"
          docker exec pki diff ca_ocsp_signing.key ca_ocsp_signing.key.new
          docker exec pki bash -c "certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | grep ca_audit_signing | sed 's/<.*>\s\+\S\+\s\+\(\S\+\).*/\1/' > ca_audit_signing.key.new"
          docker exec pki diff ca_audit_signing.key ca_audit_signing.key.new

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-existing-certs-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_CA_Clone.md
  ca-clone-test:
    name: Testing CA clone
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-container-create.sh primaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: primaryds.example.com
          PASSWORD: Secret.123

      - name: Connect primary DS container to network
        run: docker network connect example primaryds --alias primaryds.example.com

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh primary
        env:
          HOSTNAME: primary.example.com

      - name: Connect primary PKI container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec primary pki-server cert-find

      - name: Verify users and SD hosts in primary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec primary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec primary pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find

      - name: Check cert requests in primary CA
        run: |
          docker exec primary pki -n caadmin ca-cert-request-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-container-create.sh secondaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: secondaryds.example.com
          PASSWORD: Secret.123

      - name: Connect secondary DS container to network
        run: docker network connect example secondaryds --alias secondaryds.example.com

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          HOSTNAME: secondary.example.com

      - name: Connect secondary PKI container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec secondary pki-server cert-find

      - name: Verify users and SD hosts in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec secondary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec secondary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find

      - name: Check cert requests in secondary CA
        run: |
          docker exec secondary pki -n caadmin ca-cert-request-find

      - name: Set up tertiary DS container
        run: |
          tests/bin/ds-container-create.sh tertiaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: tertiaryds.example.com
          PASSWORD: Secret.123

      - name: Connect tertiary DS container to network
        run: docker network connect example tertiaryds --alias tertiaryds.example.com

      - name: Set up tertiary PKI container
        run: |
          tests/bin/runner-init.sh tertiary
        env:
          HOSTNAME: tertiary.example.com

      - name: Connect tertiary PKI container to network
        run: docker network connect example tertiary --alias tertiary.example.com

      - name: Install CA in tertiary PKI container
        run: |
          docker exec secondary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec secondary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=tertiaryds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec tertiary pki-server cert-find

      - name: Verify users and SD hosts in tertiary PKI container
        run: |
          docker exec tertiary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec tertiary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tertiary pki -n caadmin ca-user-find
          docker exec tertiary pki securitydomain-host-find

      - name: Check cert requests in tertiary CA
        run: |
          docker exec tertiary pki -n caadmin ca-cert-request-find

      - name: Gather artifacts from primary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/primary primaryds
          tests/bin/pki-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/secondary secondaryds
          tests/bin/pki-artifacts-save.sh secondary
        continue-on-error: true

      - name: Gather artifacts from tertiary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/tertiary tertiaryds
          tests/bin/pki-artifacts-save.sh tertiary
        continue-on-error: true

      - name: Remove CA from tertiary PKI container
        run: |
          docker exec tertiary pki -n caadmin ca-user-find
          docker exec tertiary pki securitydomain-host-find
          docker exec tertiary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find
          docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove CA from primary PKI container
        run: |
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find
          docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from primary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-clone-primary-${{ matrix.os }}
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-clone-secondary-${{ matrix.os }}
          path: |
            /tmp/artifacts/secondary

      - name: Upload artifacts from tertiary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-clone-tertiary-${{ matrix.os }}
          path: |
            /tmp/artifacts/tertiary

  # docs/installation/ca/Installing_CA_with_Secure_Database_Connection.md
  ca-secure-ds-test:
    name: Testing CA with secure DS
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create DS signing cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=DS Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ds_signing.csr
          docker exec pki pki \
              nss-cert-issue \
              --csr ds_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ds_signing.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ds_signing.crt \
              --trust CT,C,C \
              Self-Signed-CA
          docker exec pki certutil -L -d /root/.dogtag/nssdb

      - name: Create DS server cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=ds.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr ds_server.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer Self-Signed-CA \
              --csr ds_server.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert ds_server.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ds_server.crt \
              Server-Cert
          docker exec pki certutil -L -d /root/.dogtag/nssdb

      - name: Import certs into DS container
        run: |
          docker exec pki pk12util \
              -d /root/.dogtag/nssdb \
              -o ds_server.p12 \
              -W Secret.123 \
              -n Server-Cert
          docker cp pki:ds_server.p12 ds_server.p12
          tests/bin/ds-container-certs-import.sh ds ds_server.p12
          tests/bin/ds-container-stop.sh ds
          tests/bin/ds-container-start.sh ds

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldaps_port=3636 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify DS connection
        run: |
          docker exec pki pki-server ca-db-config-show > output
          cat output
          echo "ds.example.com" > expected
          sed -n 's/^\s\+Hostname:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "3636" > expected
          sed -n 's/^\s\+Port:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "true" > expected
          sed -n 's/^\s\+Secure:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-secure-ds-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_CA_Clone.md
  # docs/installation/ca/Installing_CA_with_Secure_Database_Connection.md
  ca-clone-secure-ds-test:
    name: Testing CA clone with secure DS
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-container-create.sh primaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: primaryds.example.com
          PASSWORD: Secret.123

      - name: Connect primary DS container to network
        run: docker network connect example primaryds --alias primaryds.example.com

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh primary
        env:
          HOSTNAME: primary.example.com

      - name: Connect primary PKI container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Create DS signing cert in primary PKI container
        run: |
          docker exec primary pki \
              nss-cert-request \
              --subject "CN=DS Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ds_signing.csr
          docker exec primary pki \
              nss-cert-issue \
              --csr ds_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ds_signing.crt
          docker exec primary pki \
              nss-cert-import \
              --cert ds_signing.crt \
              --trust CT,C,C \
              Self-Signed-CA
          docker exec primary certutil -L -d /root/.dogtag/nssdb

      - name: Create DS server cert in primary PKI container
        run: |
          docker exec primary pki \
              nss-cert-request \
              --subject "CN=primaryds.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr ds_server.csr
          docker exec primary pki \
              nss-cert-issue \
              --issuer Self-Signed-CA \
              --csr ds_server.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert ds_server.crt
          docker exec primary pki \
              nss-cert-import \
              --cert ds_server.crt \
              Server-Cert
          docker exec primary certutil -L -d /root/.dogtag/nssdb

      - name: Import certs into primary DS container
        run: |
          docker exec primary pk12util \
              -d /root/.dogtag/nssdb \
              -o ds_server.p12 \
              -W Secret.123 \
              -n Server-Cert
          docker cp primary:ds_server.p12 primaryds_server.p12
          tests/bin/ds-container-certs-import.sh primaryds primaryds_server.p12
          tests/bin/ds-container-stop.sh primaryds
          tests/bin/ds-container-start.sh primaryds

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds-primary.cfg \
              -s CA \
              -D pki_ds_hostname=primaryds.example.com \
              -D pki_ds_ldaps_port=3636 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec primary pki-server cert-find

      - name: Verify DS connection in primary PKI container
        run: |
          docker exec primary pki-server ca-db-config-show > output
          cat output
          echo "primaryds.example.com" > expected
          sed -n 's/^\s\+Hostname:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "3636" > expected
          sed -n 's/^\s\+Port:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "true" > expected
          sed -n 's/^\s\+Secure:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

      - name: Verify users and DS hosts in primary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec primary pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec primary pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find

      - name: Check cert requests in primary CA
        run: |
          docker exec primary pki -n caadmin ca-cert-request-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-container-create.sh secondaryds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: secondaryds.example.com
          PASSWORD: Secret.123

      - name: Connect secondary DS container to network
        run: docker network connect example secondaryds --alias secondaryds.example.com

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          HOSTNAME: secondary.example.com

      - name: Connect secondary PKI container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Import DS signing cert into secondary PKI container
        run: |
          docker exec primary pki \
              pkcs12-export \
              --pkcs12-file ${SHARED}/ds_signing.p12 \
              --pkcs12-password Secret.123 \
              Self-Signed-CA
          docker exec secondary pki \
              pkcs12-import \
              --pkcs12-file ${SHARED}/ds_signing.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki \
              nss-cert-export \
              Self-Signed-CA \
              ds_signing.crt
          docker exec secondary certutil -L -d /root/.dogtag/nssdb

      - name: Create DS server cert in secondary PKI container
        run: |
          docker exec secondary pki \
              nss-cert-request \
              --subject "CN=secondaryds.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr ds_server.csr
          docker exec secondary pki \
              nss-cert-issue \
              --issuer Self-Signed-CA \
              --csr ds_server.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert ds_server.crt
          docker exec secondary pki \
              nss-cert-import \
              --cert ds_server.crt \
              Server-Cert
          docker exec secondary certutil -L -d /root/.dogtag/nssdb

      - name: Import certs into secondary DS container
        run: |
          docker exec secondary pk12util \
              -d /root/.dogtag/nssdb \
              -o ds_server.p12 \
              -W Secret.123 \
              -n Server-Cert
          docker cp secondary:ds_server.p12 secondaryds_server.p12
          tests/bin/ds-container-certs-import.sh secondaryds secondaryds_server.p12
          tests/bin/ds-container-stop.sh secondaryds
          tests/bin/ds-container-start.sh secondaryds

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec primary pki-server ca-clone-prepare --pkcs12-file ${SHARED}/ca-certs.p12 --pkcs12-password Secret.123
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds-secondary.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldaps_port=3636 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec secondary pki-server cert-find

      - name: Run PKI healthcheck in primary PKI container
        run: docker exec primary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in secondary PKI container
        run: docker exec secondary pki-healthcheck --failures-only

      - name: Verify DS connection in secondary PKI container
        run: |
          docker exec secondary pki-server ca-db-config-show > output
          cat output
          echo "secondaryds.example.com" > expected
          sed -n 's/^\s\+Hostname:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "3636" > expected
          sed -n 's/^\s\+Port:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "true" > expected
          sed -n 's/^\s\+Secure:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

      - name: Verify users and SD hosts in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec secondary pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec secondary pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec secondary pki client-cert-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find

      - name: Check cert requests in secondary CA
        run: |
          docker exec secondary pki -n caadmin ca-cert-request-find

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Re-install CA in secondary PKI container
        run: |
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds-secondary.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_ds_hostname=secondaryds.example.com \
              -D pki_ds_ldaps_port=3636 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Gather artifacts from primary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/primary primaryds
          tests/bin/pki-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/secondary secondaryds
          tests/bin/pki-artifacts-save.sh secondary
        continue-on-error: true

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find
          docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove CA from primary PKI container
        run: |
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find
          docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from primary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-secure-ds-primary-${{ matrix.os }}
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary containers
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-secure-ds-secondary-${{ matrix.os }}
          path: |
            /tmp/artifacts/secondary

  # https://github.com/dogtagpki/pki/wiki/Installing-CA-with-Random-Serial-Numbers-v1
  ca-random-v1-test:
    name: Testing CA with Random Serial Number v1
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_random_serial_numbers_enable=True \
              -v

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Check certs in CA
        run: |
          docker exec pki pki ca-cert-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-random-v1-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # https://github.com/dogtagpki/pki/wiki/Installing-CA-with-Random-Serial-Numbers-v3
  ca-random-v3-test:
    name: Testing CA with Random Serial Number v3
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Check certs in CA
        run: |
          docker exec pki pki ca-cert-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-random-v3-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  ca-file-crl-test:
    name: Testing CA with file-based CRL publishing
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      # https://github.com/dogtagpki/pki/wiki/Configuring-File-based-CRL-Publishing
      - name: Configure file-based CRL publishing
        run: |
          # create CRL folder
          docker exec pki mkdir -p /var/lib/pki/pki-tomcat/ca/crl
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/ca/crl

          # enable CRL publishing
          docker exec pki pki-server ca-config-set ca.publish.enable true

          # configure file-based CRL publisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.pluginName FileBasedPublisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.crlLinkExt bin
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.directory /var/lib/pki/pki-tomcat/ca/crl
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.latestCrlLink true
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.timeStamp LocalTime
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.zipCRLs false
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.zipLevel 9
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.Filename.b64 false
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.Filename.der true

          # configure CRL publishing rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.enable true
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.mapper NoMap
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.pluginName Rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.predicate ""
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.publisher FileBasedPublisher
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.type crl

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec pki pki-server ca-config-set ca.crl.MasterCRL.alwaysUpdate true

          # restart PKI server
          docker exec pki pki-server restart --wait

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh

      - name: Check initial CRL
        run: |
          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/ca/crl -name "MasterCRL-*" | tee output

          # there should be no CRL files
          cat output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after cert revocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/ca/crl -name "MasterCRL-*" | tee output

          # there should be one CRL file
          cat output | wc -l > actual
          echo "1" > expected
          diff expected actual

          # check the latest CRL
          docker exec pki openssl crl \
              -in /var/lib/pki/pki-tomcat/ca/crl/MasterCRL.bin \
              -inform DER \
              -text \
              -noout | tee output

          # there should be one cert in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "1" > expected
          diff expected actual

      - name: Check CRL after cert unrevocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/ca/crl -name "MasterCRL-*" | tee output

          # there should be two CRL files
          cat output | wc -l > actual
          echo "2" > expected
          diff expected actual

          # check the latest CRL
          docker exec pki openssl crl \
              -in /var/lib/pki/pki-tomcat/ca/crl/MasterCRL.bin \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-file-crl-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  scep-test:
    name: Testing SCEP responder
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Download runner image
        uses: actions/download-artifact@v2
        with:
          name: pki-runner-${{ matrix.os }}
          path: /tmp

      - name: Load runner image
        run: docker load --input /tmp/pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: |
          docker network connect example client --alias client.example.com
          docker inspect -f '{{ .NetworkSettings.Networks.example.IPAddress }}' client > client.ip
          echo "Client's IP: `cat client.ip`"

      - name: Install CA in PKI container
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      # https://github.com/dogtagpki/pki/wiki/Configuring-SCEP-Responder
      - name: Configure SCEP in CA
        run: |
          docker exec pki pki-server ca-config-set ca.scep.enable true
          docker exec pki bash -c "echo UID:$(cat client.ip) > /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki bash -c "echo PWD:Secret.123 >> /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki pki-server restart --wait

      - name: Install SSCEP in client container
        run: |
          docker exec client dnf install -y sscep

      # https://github.com/dogtagpki/pki/wiki/Certificate-Enrollment-with-SSCEP
      - name: Get CA certificate using SSCEP
        run: |
          docker exec client sscep getca \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt
          docker exec client openssl x509 -text -noout -in ca.crt

      - name: Enroll certificate with IP address using SSCEP
        run: |
          docker exec client mkrequest -ip $(cat client.ip) Secret.123
          docker exec client openssl req -text -noout -in local.csr
          docker exec client sscep enroll \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt \
              -k local.key \
              -r local.csr \
              -l local.crt \
              -E 3des \
              -S sha256
          docker exec client openssl x509 -text -noout -in local.crt

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA from PKI container
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: scep-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki
