name: CA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-ca-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Build server image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-ca
          target: pki-ca
          outputs: type=docker,dest=pki-ca-server.tar

      - name: Store server image
        uses: actions/cache@v3
        with:
          key: pki-ca-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-server.tar

  # docs/installation/ca/Installing_CA.md
  ca-test:
    name: Testing CA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          # set buffer size to 0 so that revocation takes effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # enable signed audit log
          docker exec pki pki-server ca-config-set log.instance.SignedAudit.logSigning true

          # restart PKI server
          docker exec pki pki-server restart --wait

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing \
              --csr-file ca_signing.csr \
              --cert-file ca_signing.crt
          docker exec pki openssl req -text -noout -in ca_signing.csr
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing \
              --csr-file ca_ocsp_signing.csr \
              --cert-file ca_ocsp_signing.crt
          docker exec pki openssl req -text -noout -in ca_ocsp_signing.csr
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing \
              --csr-file ca_audit_signing.csr \
              --cert-file ca_audit_signing.crt
          docker exec pki openssl req -text -noout -in ca_audit_signing.csr
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem \
              --csr-file subsystem.csr \
              --cert-file subsystem.crt
          docker exec pki openssl req -text -noout -in subsystem.csr
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver \
              --csr-file sslserver.csr \
              --cert-file sslserver.crt
          docker exec pki openssl req -text -noout -in sslserver.csr
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki info

      - name: Test CA certs
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-signing-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-subsystem-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-certs.sh

      - name: Test CA admin
        run: |
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Test CA agent
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

      - name: Test CA auditor
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-logs.sh

      - name: Check CA profiles
        run: |
          docker exec pki pki -n caadmin ca-profile-find

          # create custom profile
          docker exec pki pki -n caadmin ca-profile-show caUserCert --output ${SHARED}/profile.xml
          sed -i "s/caUserCert/caCustomUser/g" profile.xml
          docker exec pki pki --debug -n caadmin ca-profile-add ${SHARED}/profile.xml
          docker exec pki pki -n caadmin ca-profile-show caCustomUser

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_CA_with_ECC.md
  ca-ecc-test:
    name: Testing CA with ECC
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-ecc.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Verify that system certs have ECC keys
        run: |
          docker exec pki bash -c "echo Secret.123 > password.txt"
          docker exec pki certutil -K -d /etc/pki/pki-tomcat/alias -f password.txt | tee output
          echo "ec" > expected

          grep ca_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep ca_ocsp_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep ca_audit_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep subsystem output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep sslserver output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-ecc-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing-CA-with-RSA-PSS.adoc
  ca-rsa-pss-test:
    name: Testing CA with RSA/PSS
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_use_pss_rsa_signing_algorithm=True \
              -D pki_ca_signing_key_algorithm=SHA512withRSA/PSS \
              -D pki_ca_signing_signing_algorithm=SHA512withRSA/PSS \
              -D pki_ocsp_signing_key_algorithm=SHA512withRSA/PSS \
              -D pki_ocsp_signing_signing_algorithm=SHA512withRSA/PSS \
              -D pki_audit_signing_key_algorithm=SHA512withRSA/PSS \
              -D pki_audit_signing_signing_algorithm=SHA512withRSA/PSS \
              -D pki_subsystem_key_algorithm=SHA512withRSA/PSS \
              -D pki_subsystem_signing_algorithm=SHA512withRSA/PSS \
              -D pki_sslserver_key_algorithm=SHA512withRSA/PSS \
              -D pki_sslserver_signing_algorithm=SHA512withRSA/PSS \
              -D pki_admin_key_algorithm=SHA512withRSA/PSS \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt | tee output

          echo "rsassaPss" > expected
          sed -n "/^\s*Signature Algorithm:/ {s/^.*:\s*\(\S*\)\s*$/\1/p;q}" output > actual
          diff expected actual

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt | tee output

          echo "rsassaPss" > expected
          sed -n "/^\s*Signature Algorithm:/ {s/^.*:\s*\(\S*\)\s*$/\1/p;q}" output > actual
          diff expected actual

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt | tee output

          echo "rsassaPss" > expected
          sed -n "/^\s*Signature Algorithm:/ {s/^.*:\s*\(\S*\)\s*$/\1/p;q}" output > actual
          diff expected actual

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt | tee output

          echo "rsassaPss" > expected
          sed -n "/^\s*Signature Algorithm:/ {s/^.*:\s*\(\S*\)\s*$/\1/p;q}" output > actual
          diff expected actual

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt | tee output

          echo "rsassaPss" > expected
          sed -n "/^\s*Signature Algorithm:/ {s/^.*:\s*\(\S*\)\s*$/\1/p;q}" output > actual
          diff expected actual

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert | tee output

          echo "rsassaPss" > expected
          sed -n "/^\s*Signature Algorithm:/ {s/^.*:\s*\(\S*\)\s*$/\1/p;q}" output > actual
          diff expected actual

      - name: Verify that system certs have RSA keys
        run: |
          echo Secret.123 > password.txt
          docker exec pki certutil -K -d /etc/pki/pki-tomcat/alias -f ${SHARED}/password.txt | tee output
          echo "rsa" > expected

          grep ca_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep ca_ocsp_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep ca_audit_signing output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep subsystem output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

          grep sslserver output | sed -n 's/<.*>\s\(\S\+\)\s.*/\1/p' > actual
          diff expected actual

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-rsa-pss-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_Subordinate_CA.md
  subca-test:
    name: Testing subordinate CA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up root DS container
        run: |
          tests/bin/ds-container-create.sh rootds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: rootds.example.com
          PASSWORD: Secret.123

      - name: Connect root DS container to network
        run: docker network connect example rootds --alias rootds.example.com

      - name: Set up root PKI container
        run: |
          tests/bin/runner-init.sh root
        env:
          HOSTNAME: root.example.com

      - name: Connect root PKI container to network
        run: docker network connect example root --alias root.example.com

      - name: Install root CA in root container
        run: |
          docker exec root pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=rootds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec root pki-server cert-find

      - name: Install banner in root container
        run: docker exec root cp /usr/share/pki/server/examples/banner/banner.txt /etc/pki/pki-tomcat

      - name: Set up subordinate DS container
        run: |
          tests/bin/ds-container-create.sh subds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: subds.example.com
          PASSWORD: Secret.123

      - name: Connect subordinate DS container to network
        run: docker network connect example subds --alias subds.example.com

      - name: Set up subordinate PKI container
        run: |
          tests/bin/runner-init.sh subordinate
        env:
          HOSTNAME: sub.example.com

      - name: Connect subordinate PKI container to network
        run: docker network connect example subordinate --alias sub.example.com

      - name: Install subordinate CA in subordinate container
        run: |
          docker exec root pki-server cert-export ca_signing --cert-file ${SHARED}/root-ca_signing.crt
          docker exec subordinate pkispawn \
              -f /usr/share/pki/server/examples/installation/subca.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/root-ca_signing.crt \
              -D pki_ds_hostname=subds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Install banner in subordinate container
        run: docker exec subordinate cp /usr/share/pki/server/examples/banner/banner.txt /etc/pki/pki-tomcat

      - name: Check CA signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec subordinate pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec subordinate openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec subordinate pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec subordinate openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec subordinate openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec subordinate pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec subordinate pki client-cert-import ca_signing --ca-cert ${SHARED}/root-ca_signing.crt
          docker exec subordinate pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec subordinate pki -n caadmin --ignore-banner ca-user-show caadmin

      - name: Check cert requests in subordinate CA
        run: |
          docker exec subordinate pki -n caadmin --ignore-banner ca-cert-request-find

      - name: Gather artifacts from root containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/root rootds
          tests/bin/pki-artifacts-save.sh root
        continue-on-error: true

      - name: Gather artifacts from subordinate containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/subordinate subds
          tests/bin/pki-artifacts-save.sh subordinate
        continue-on-error: true

      - name: Remove subordinate CA from subordinate container
        run: docker exec subordinate pkidestroy -i pki-tomcat -s CA -v

      - name: Remove root CA from root container
        run: docker exec root pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from root container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-root-${{ matrix.os }}
          path: |
            /tmp/artifacts/root

      - name: Upload artifacts from subordinate container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-subordinate-${{ matrix.os }}
          path: |
            /tmp/artifacts/subordinate

  # docs/installation/ca/Installing_CA_with_External_CA_Signing_Certificate.md
  subca-cmc-test:
    name: Testing subordinate CA with CMC
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up root DS container
        run: |
          tests/bin/ds-container-create.sh rootds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: rootds.example.com
          PASSWORD: Secret.123

      - name: Connect root DS container to network
        run: docker network connect example rootds --alias rootds.example.com

      - name: Set up root PKI container
        run: |
          tests/bin/runner-init.sh root
        env:
          HOSTNAME: root.example.com

      - name: Connect root PKI container to network
        run: docker network connect example root --alias root.example.com

      - name: Install root CA in root container
        run: |
          docker exec root pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=rootds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_security_domain_name=ROOT \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Update caCMCcaCert profile
        run: |
          # Reduce policyset.caCertSet.2.default.params.range such that
          # it generates a subordinate CA cert with shorter validity
          # which will not violate the CAValidityConstraint.
          docker exec root sed -i \
              -e "s/\(policyset.caCertSet.2.default.params.range\)=.*/\1=7300/" \
              /var/lib/pki/pki-tomcat/ca/profiles/ca/caCMCcaCert.cfg
          docker exec root pki-server restart --wait

      - name: Install root CA admin cert
        run: |
          docker exec root pki-server cert-export ca_signing --cert-file $SHARED/root-ca_signing.crt
          docker exec root pki client-cert-import ca_signing --ca-cert $SHARED/root-ca_signing.crt
          docker exec root pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec root pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in root CA
        run: |
          docker exec root pki -n caadmin ca-cert-request-find

      - name: Set up subordinate DS container
        run: |
          tests/bin/ds-container-create.sh subds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: subds.example.com
          PASSWORD: Secret.123

      - name: Connect subordinate DS container to network
        run: docker network connect example subds --alias subds.example.com

      - name: Set up subordinate PKI container
        run: |
          tests/bin/runner-init.sh subordinate
        env:
          HOSTNAME: sub.example.com

      - name: Connect subordinate PKI container to network
        run: docker network connect example subordinate --alias sub.example.com

      - name: Install subordinate CA in subordinate container (step 1)
        run: |
          docker exec subordinate pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step1.cfg \
              -s CA \
              -D pki_ds_hostname=subds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_ca_signing_csr_path=$SHARED/ca_signing.csr \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      # https://github.com/dogtagpki/pki/wiki/Issuing-CA-Signing-Certificate-with-CMC
      - name: Issue subordinate CA signing cert with CMC
        run: |
          # check cert request
          docker exec root openssl req -text -noout -in $SHARED/ca_signing.csr

          # create CMC request
          docker exec root mv $SHARED/ca_signing.csr ca_signing.csr
          docker exec root CMCRequest \
              /usr/share/pki/server/examples/cmc/ca_signing-cmc-request.cfg

          # submit CMC request
          docker exec root HttpClient \
              /usr/share/pki/server/examples/cmc/ca_signing-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec root CMCResponse \
              -d /root/.dogtag/nssdb \
              -i ca_signing.cmc-response \
              -o $SHARED/ca_signing.p7b

          # check issued cert chain
          docker exec root openssl pkcs7 -print_certs -in $SHARED/ca_signing.p7b

      - name: Install subordinate CA in subordinate container (step 2)
        run: |
          docker exec subordinate pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step2.cfg \
              -s CA \
              -D pki_ds_hostname=subds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_chain_path=$SHARED/root-ca_signing.crt \
              -D pki_ca_signing_csr_path=$SHARED/ca_signing.csr \
              -D pki_ca_signing_cert_path=$SHARED/ca_signing.p7b \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check subordinate CA signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_signing.crt

      - name: Check subordinate CA OCSP signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check subordinate CA audit signing cert
        run: |
          docker exec subordinate pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec subordinate openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subordinate subsystem cert
        run: |
          docker exec subordinate pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec subordinate openssl x509 -text -noout -in subsystem.crt

      - name: Check subordinate SSL server cert
        run: |
          docker exec subordinate pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec subordinate openssl x509 -text -noout -in sslserver.crt

      - name: Check subordinate CA admin cert
        run: |
          docker exec subordinate openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec subordinate pki-healthcheck --failures-only

      - name: Verify subordinate CA admin cert
        run: |
          docker exec subordinate pki client-cert-import ca_signing --ca-cert $SHARED/ca_signing.p7b
          docker exec subordinate pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec subordinate pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in subordinate CA
        run: |
          docker exec subordinate pki -n caadmin ca-cert-request-find

      - name: Gather artifacts from root containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/root rootds
          tests/bin/pki-artifacts-save.sh root
        continue-on-error: true

      - name: Gather artifacts from subordinate containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/subordinate subds
          tests/bin/pki-artifacts-save.sh subordinate
        continue-on-error: true

      - name: Remove subordinate CA from subordinate container
        run: docker exec subordinate pkidestroy -i pki-tomcat -s CA -v

      - name: Remove root CA from root container
        run: docker exec root pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from root container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-root-cmc-${{ matrix.os }}
          path: |
            /tmp/artifacts/root

      - name: Upload artifacts from subordinate container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-subordinate-cmc-${{ matrix.os }}
          path: |
            /tmp/artifacts/subordinate

  # docs/installation/ca/Installing_CA_with_External_CA_Signing_Certificate.md
  ca-external-cert-test:
    name: Testing CA with external signing certificate
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create root CA in NSS database
        run: |
          docker exec pki pki -d nssdb nss-cert-request \
              --subject "CN=Root CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr root-ca_signing.csr
          docker exec pki pki -d nssdb nss-cert-issue \
              --csr root-ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert root-ca_signing.crt
          docker exec pki pki -d nssdb nss-cert-import \
              --cert root-ca_signing.crt \
              --trust CT,C,C \
              root-ca_signing

      - name: Install subordinate CA (step 1)
        run: |
          # https://github.com/dogtagpki/pki/wiki/Adding-CA-Signing-CSR-Extension
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step1.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_req_ski=AEB2FA7A07115A0AB994FF9B5BDA8E75D536BC77 \
              -D pki_req_ext_add=True \
              -D pki_req_ext_oid=1.3.6.1.4.1.311.20.2 \
              -D pki_req_ext_data=1E0A00530075006200430041 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki /usr/share/pki/tests/ca/bin/test-subca-signing-csr-ext.sh ca_signing.csr

      - name: Issue subordinate CA signing cert
        run: |
          docker exec pki pki -d nssdb nss-cert-issue \
              --issuer root-ca_signing \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/subca_signing.conf \
              --cert ca_signing.crt

      - name: Install subordinate CA (step 2)
        run: |
          # https://github.com/dogtagpki/pki/wiki/Adding-CA-Signing-CSR-Extension
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-external-cert-step2.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_req_ski=AEB2FA7A07115A0AB994FF9B5BDA8E75D536BC77 \
              -D pki_req_ext_add=True \
              -D pki_req_ext_oid=1.3.6.1.4.1.311.20.2 \
              -D pki_req_ext_data=1E0A00530075006200430041 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki /usr/share/pki/tests/ca/bin/test-subca-signing-cert-ext.sh ca_signing.crt

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec pki pki client-cert-import ca_signing --ca-cert root-ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove subordinate CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-external-cert-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # docs/installation/ca/Installing_CA_with_Existing_Keys_in_Internal_Token.md
  ca-existing-certs-test:
    name: Testing CA with existing certs
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create CA signing cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec pki pki \
              nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ca_signing.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing
          docker exec pki pki \
              nss-cert-show \
              ca_signing | tee ca_signing.cert
          docker exec pki pki \
              nss-key-find \
              --nickname ca_signing | tee ca_signing.key

      - name: Create CA OCSP signing cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr ca_ocsp_signing.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr ca_ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --cert ca_ocsp_signing.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ca_ocsp_signing.crt \
              ca_ocsp_signing
          docker exec pki pki \
              nss-cert-show \
              ca_ocsp_signing | tee ca_ocsp_signing.cert
          docker exec pki pki \
              nss-key-find \
              --nickname ca_ocsp_signing | tee ca_ocsp_signing.key

      - name: Create CA audit signing cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr ca_audit_signing.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr ca_audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert ca_audit_signing.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ca_audit_signing.crt \
              --trust ,,P \
              ca_audit_signing
          docker exec pki pki \
              nss-cert-show \
              ca_audit_signing | tee ca_audit_signing.cert
          docker exec pki pki \
              nss-key-find \
              --nickname ca_audit_signing | tee ca_audit_signing.key

      - name: Create subsystem cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --csr subsystem.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec pki pki \
              nss-cert-import \
              --cert subsystem.crt \
              subsystem
          docker exec pki pki \
              nss-cert-show \
              subsystem | tee subsystem.cert
          docker exec pki pki \
              nss-key-find \
              --nickname subsystem | tee subsystem.key

      - name: Create SSL server cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=pki.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec pki pki \
              nss-cert-import \
              --cert sslserver.crt \
              sslserver
          docker exec pki pki \
              nss-cert-show \
              sslserver | tee sslserver.cert
          docker exec pki pki \
              nss-key-find \
              --nickname sslserver | tee sslserver.key

      - name: Create admin cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=Administrator" \
              --ext /usr/share/pki/server/certs/admin.conf \
              --csr admin.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert admin.crt
          docker exec pki pki \
              nss-cert-import \
              --cert admin.crt \
              caadmin
          docker exec pki pki \
              nss-cert-show \
              caadmin

      - name: Export system certs
        run: |
          docker exec pki pki \
              pkcs12-export \
              --pkcs12 ca-certs.p12 \
              --password Secret.123 \
              ca_signing \
              ca_ocsp_signing \
              ca_audit_signing \
              subsystem \
              sslserver
          docker exec pki pki \
              pkcs12-cert-find \
              --pkcs12 ca-certs.p12 \
              --password Secret.123

      - name: Install CA with existing certs
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -D pki_external=True \
              -D pki_external_step_two=False \
              -v
          sleep 1  # avoid pkispawn log conflict due to identical timestamps
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -D pki_external=True \
              -D pki_external_step_two=True \
              -D pki_pkcs12_path=ca-certs.p12 \
              -D pki_pkcs12_password=Secret.123 \
              -D pki_ca_signing_csr_path=ca_signing.csr \
              -D pki_ocsp_signing_csr_path=ca_ocsp_signing.csr \
              -D pki_audit_signing_csr_path=ca_audit_signing.csr \
              -D pki_subsystem_csr_path=subsystem.csr \
              -D pki_sslserver_csr_path=sslserver.csr \
              -D pki_admin_cert_path=admin.crt \
              -D pki_admin_csr_path=admin.csr \
              -v

          docker exec pki pki-server cert-find

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Check CA signing cert
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              ca_signing | tee ca_signing.cert.server
          diff ca_signing.cert ca_signing.cert.server

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find \
              --nickname ca_signing | tee ca_signing.key.server
          diff ca_signing.key ca_signing.key.server

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              ca_ocsp_signing | tee ca_ocsp_signing.cert.server
          diff ca_ocsp_signing.cert ca_ocsp_signing.cert.server

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find \
              --nickname ca_ocsp_signing | tee ca_ocsp_signing.key.server
          diff ca_ocsp_signing.key ca_ocsp_signing.key.server

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              ca_audit_signing | tee ca_audit_signing.cert.server
          diff ca_audit_signing.cert ca_audit_signing.cert.server

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find \
              --nickname ca_audit_signing | tee ca_audit_signing.key.server
          diff ca_audit_signing.key ca_audit_signing.key.server

      - name: Check subsystem cert
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              subsystem | tee subsystem.cert.actual
          diff subsystem.cert subsystem.cert.actual

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find \
              --nickname subsystem | tee subsystem.key.server
          diff subsystem.key subsystem.key.server

      - name: Check SSL server cert
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              sslserver | tee sslserver.cert.server
          diff sslserver.cert sslserver.cert.server

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find \
              --nickname sslserver | tee sslserver.key.server
          diff sslserver.key sslserver.key.server

      - name: Check CA admin cert
        run: |
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-existing-certs-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # https://github.com/dogtagpki/pki/wiki/Issuing-User-Certificate-with-CMC-Shared-Token
  cmc-shared-token-test:
    name: Testing CMC shared token
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -v

      - name: Install CA admin cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      # https://github.com/dogtagpki/pki/wiki/Creating-Issuance-Protection-Certificate
      - name: Create issuance protection cert
        run: |
          # generate cert request
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-request \
              --subject "CN=CA Issuance Protection" \
              --csr ca_issuance_protection.csr

          # check generated CSR
          docker exec pki openssl req -text -noout -in ca_issuance_protection.csr

          # create CMC request
          docker exec pki CMCRequest \
              /usr/share/pki/server/examples/cmc/ca_issuance_protection-cmc-request.cfg \

          # submit CMC request
          docker exec pki HttpClient \
              /usr/share/pki/server/examples/cmc/ca_issuance_protection-cmc-submit.cfg \

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec pki CMCResponse \
              -d /etc/pki/pki-tomcat/alias \
              -i ca_issuance_protection.cmc-response \
              -o ca_issuance_protection.p7b

          # check issued cert chain
          docker exec pki openssl pkcs7 \
              -print_certs \
              -in ca_issuance_protection.p7b

          # import cert chain
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              pkcs7-import \
              --pkcs7 ca_issuance_protection.p7b \
              ca_issuance_protection

          # check imported cert chain
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-find

          # configure issuance protection nickname
          docker exec pki pki-server ca-config-set ca.cert.issuance_protection.nickname ca_issuance_protection

      # https://github.com/dogtagpki/pki/wiki/Configuring-CMC-Shared-Token-Authentication
      - name: Configure shared token auth
        run: |
          # update schema
          docker exec pki ldapmodify \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/ca/auth/ds/schema.ldif

          # add user subtree
          docker exec pki ldapadd \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/ca/auth/ds/create.ldif

          # add user records
          docker exec pki ldapadd \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f /usr/share/pki/ca/auth/ds/example.ldif

          # configure CMC shared token authentication
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.basedn ou=people,dc=example,dc=com
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.ldapauth.authtype BasicAuth
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.ldapauth.bindDN "cn=Directory Manager"
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.ldapauth.bindPWPrompt "Rule SharedToken"
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.ldapconn.host ds.example.com
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.ldapconn.port 3389
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.ldap.ldapconn.secureConn false
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.pluginName SharedToken
          docker exec pki pki-server ca-config-set auths.instance.SharedToken.shrTokAttr shrTok

          # enable caFullCMCSharedTokenCert profile
          docker exec pki sed -i \
              -e "s/^\(enable\)=.*/\1=true/" \
              /var/lib/pki/pki-tomcat/ca/profiles/ca/caFullCMCSharedTokenCert.cfg

          # restart CA
          docker exec pki pki-server ca-undeploy --wait
          docker exec pki pki-server ca-deploy --wait

      # https://github.com/dogtagpki/pki/wiki/Generating-CMC-Shared-Token
      - name: Generate shared token for user
        run: |
          # generate shared token
          docker exec pki CMCSharedToken \
              -d /etc/pki/pki-tomcat/alias \
              -p Secret.123 \
              -n ca_issuance_protection \
              -s Secret.123 \
              -o $SHARED/testuser.b64

          # convert into a single line
          SHARED_TOKEN=$(sed -e :a -e 'N;s/\n//;ba' testuser.b64)
          echo "SHARED_TOKEN: $SHARED_TOKEN"

          cat > add.ldif << EOF
          dn: uid=testuser,ou=people,dc=example,dc=com
          changetype: modify
          add: objectClass
          objectClass: extensibleobject
          -
          add: shrTok
          shrTok: $SHARED_TOKEN
          -
          EOF
          cat add.ldif

          # add shared token into user record
          docker exec pki ldapmodify \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/add.ldif

      # https://github.com/dogtagpki/pki/wiki/Issuing-User-Certificate-with-CMC-Shared-Token
      - name: Issue user cert with shared token
        run: |
          # create key
          docker exec pki pki nss-key-create --output-format json | tee output
          KEY_ID=$(jq -r '.keyId' output)
          echo "KEY_ID: $KEY_ID"

          # generated cert request
          docker exec pki pki \
              nss-cert-request \
              --key-id $KEY_ID \
              --subject "uid=testuser" \
              --ext /usr/share/pki/tools/examples/certs/testuser.conf \
              --csr testuser.csr

          # check generated CSR
          docker exec pki openssl req -text -noout -in testuser.csr

          # insert key ID into CMCRequest config
          docker cp \
              pki:/usr/share/pki/tools/examples/cmc/testuser-cmc-request.cfg \
              testuser-cmc-request.cfg
          sed -i \
              -e "s/^\(request.privKeyId\)=.*/\1=$KEY_ID/" \
              testuser-cmc-request.cfg
          cat testuser-cmc-request.cfg

          # create CMC request
          docker exec pki CMCRequest \
              $SHARED/testuser-cmc-request.cfg

          # submit CMC request
          docker exec pki HttpClient \
              /usr/share/pki/tools/examples/cmc/testuser-cmc-submit.cfg

          # convert CMC response (DER PKCS #7) into PEM PKCS #7 cert chain
          docker exec pki CMCResponse \
              -d /root/.dogtag/nssdb \
              -i testuser.cmc-response \
              -o testuser.p7b

          # check issued cert chain
          docker exec pki pki \
              pkcs7-cert-find \
              --pkcs7 testuser.p7b

          # import cert chain
          docker exec pki pki \
              pkcs7-import \
              --pkcs7 testuser.p7b \
              testuser

          # check imported cert chain
          docker exec pki pki nss-cert-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cmc-shared-token-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  ca-container-test:
    name: Testing CA container
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Retrieve server image
        uses: actions/cache@v3
        with:
          key: pki-ca-server-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-server.tar

      - name: Load CA image
        run: docker load --input pki-ca-server.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Create CA signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=CA Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ca_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --csr ca_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --months-valid 12 \
              --cert ca_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing
          docker exec client pki \
              nss-cert-show \
              ca_signing

      - name: Create OCSP signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=OCSP Signing Certificate" \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --csr ocsp_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr ocsp_signing.csr \
              --ext /usr/share/pki/server/certs/ocsp_signing.conf \
              --cert ocsp_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert ocsp_signing.crt \
              ocsp_signing
          docker exec client pki \
              nss-cert-show \
              ocsp_signing

      - name: Create audit signing cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Audit Signing Certificate" \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --csr audit_signing.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr audit_signing.csr \
              --ext /usr/share/pki/server/certs/audit_signing.conf \
              --cert audit_signing.crt
          docker exec client pki \
              nss-cert-import \
              --cert audit_signing.crt \
              --trust ,,P \
              audit_signing
          docker exec client pki \
              nss-cert-show \
              audit_signing

      - name: Create subsystem cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Subsystem Certificate" \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --csr subsystem.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr subsystem.csr \
              --ext /usr/share/pki/server/certs/subsystem.conf \
              --cert subsystem.crt
          docker exec client pki \
              nss-cert-import \
              --cert subsystem.crt \
              subsystem
          docker exec client pki \
              nss-cert-show \
              subsystem

      - name: Create SSL server cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=ca.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr sslserver.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr sslserver.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert sslserver.crt
          docker exec client pki \
              nss-cert-import \
              --cert sslserver.crt \
              sslserver
          docker exec client pki \
              nss-cert-show \
              sslserver

      - name: Create admin cert
        run: |
          docker exec client pki \
              nss-cert-request \
              --subject "CN=Administrator" \
              --ext /usr/share/pki/server/certs/admin.conf \
              --csr admin.csr
          docker exec client pki \
              nss-cert-issue \
              --issuer ca_signing \
              --csr admin.csr \
              --ext /usr/share/pki/server/certs/admin.conf \
              --cert admin.crt
          docker exec client pki \
              nss-cert-import \
              --cert admin.crt \
              admin
          docker exec client pki \
              nss-cert-show \
              admin

      - name: Export system certs and keys
        run: |
          docker exec client pki \
              pkcs12-export \
              --pkcs12 server.p12 \
              --password Secret.123 \
              ca_signing \
              ocsp_signing \
              audit_signing \
              subsystem \
              sslserver

      - name: Export admin cert and key
        run: |
          docker exec client pki \
              pkcs12-export \
              --pkcs12 admin.p12 \
              --password Secret.123 \
              admin

      - name: Set up CA container
        run: |
          mkdir certs
          docker cp client:server.p12 certs
          docker cp client:admin.p12 certs
          docker cp client:ca_signing.csr certs
          docker cp client:ocsp_signing.csr certs
          docker cp client:audit_signing.csr certs
          docker cp client:subsystem.csr certs
          docker cp client:sslserver.csr certs
          docker cp client:admin.csr certs
          ls -la certs

          docker run \
              --name ca \
              --hostname=ca.example.com \
              --network=example \
              --network-alias=ca.example.com \
              -v $PWD/certs:/certs \
              --detach \
              pki-ca

      - name: Wait for CA container to start
        run: |
          tests/bin/pki-start-wait.sh client https://ca.example.com:8443
        env:
          MAX_WAIT: 180

      - name: Check server logs
        if: always()
        run: |
          docker logs ca 2>&1

      - name: Check public operations from CA container
        run: |
          # check PKI server info
          docker exec ca pki info

          # check certs in CA
          docker exec ca pki ca-cert-find

      - name: Check admin operations from CA container
        run: |
          # check admin user
          docker exec ca pki \
              -n admin \
              ca-user-show \
              admin

      - name: Check public operations from client container
        run: |
          # clean the NSS database
          docker exec client pki client-init --force

          # install CA signing cert
          docker cp ca:/certs/ca_signing.crt ca_signing.crt
          docker cp ca_signing.crt client:ca_signing.crt
          docker exec client pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          # check PKI server info
          docker exec client pki \
              -U https://ca.example.com:8443 \
              info

          # check certs in CA
          docker exec client pki \
              -U https://ca.example.com:8443 \
              ca-cert-find

      - name: Check admin operations from client container
        run: |
          # install admin cert
          docker cp ca:/certs/admin.p12 admin.p12
          docker cp admin.p12 client:admin.p12
          docker exec client pki \
              pkcs12-import \
              --pkcs12 admin.p12 \
              --password Secret.123

          # check admin user
          docker exec client pki \
              -U https://ca.example.com:8443 \
              -n admin \
              ca-user-show \
              admin

      - name: Gather artifacts from CA container
        if: always()
        run: |
          mkdir -p /tmp/artifacts/ca
          docker logs ca > /tmp/artifacts/ca/container.out 2> /tmp/artifacts/ca/container.err
          mkdir -p /tmp/artifacts/ca/var/lib
          docker cp ca:/etc/pki /tmp/artifacts/ca/etc
          docker cp ca:/var/lib/pki /tmp/artifacts/ca/var/lib
          docker cp ca:/var/log/pki /tmp/artifacts/ca/var/log
        continue-on-error: true

      - name: Gather artifacts from client container
        if: always()
        run: |
          mkdir -p /tmp/artifacts/client
          docker logs client > /tmp/artifacts/client/container.out 2> /tmp/artifacts/client/container.err

      - name: Upload artifacts from CA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-container-ca-${{ matrix.os }}
          path: /tmp/artifacts/va

      - name: Upload artifacts from client container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-container-client-${{ matrix.os }}
          path: /tmp/artifacts/client

  # docs/installation/ca/Installing_CA_with_HSM.md
  ca-hsm-test:
    name: Testing CA with HSM
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y softhsm

      - name: Create SoftHSM token
        run: |
          # allow PKI user to access SoftHSM files
          docker exec pki usermod pkiuser -a -G ods

          # create SoftHSM token for PKI server
          docker exec pki runuser -u pkiuser -- \
              softhsm2-util \
              --init-token \
              --label HSM \
              --so-pin Secret.123 \
              --pin Secret.123 \
              --free

          docker exec pki ls -laR /var/lib/softhsm/tokens

      - name: Install CA with HSM
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_hsm_enable=True \
              -D pki_token_name=HSM \
              -D pki_token_password=Secret.123 \
              -D pki_server_database_password=Secret.123 \
              -D pki_ca_signing_token=HSM \
              -D pki_ocsp_signing_token=HSM \
              -D pki_audit_signing_token=HSM \
              -D pki_subsystem_token=HSM \
              -D pki_sslserver_token=internal \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check system certs in internal token
        run: |
          # there should be 5 certs
          echo "5" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-find | tee output
          grep "Serial Number:" output | wc -l > actual
          diff expected actual

      - name: Check ca_signing cert in internal token
        run: |
          echo "CT,C,C" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-show \
              ca_signing | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check ca_ocsp_signing cert in internal token
        run: |
          echo ",," > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-show \
              ca_ocsp_signing | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check ca_audit_signing cert in internal token
        run: |
          echo ",,P" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-show \
              ca_audit_signing | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check subsystem cert in internal token
        run: |
          echo ",," > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-show \
              subsystem | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check sslserver cert in internal token
        run: |
          echo "u,u,u" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              nss-cert-show \
              sslserver | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check system certs in HSM
        run: |
          echo Secret.123 > password.txt
          echo "4" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -C ${SHARED}/password.txt \
              --token HSM \
              nss-cert-find | tee output
          grep "Serial Number:" output | wc -l > actual
          diff expected actual

      - name: Check ca_signing cert in HSM
        run: |
          echo "CTu,Cu,Cu" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -C ${SHARED}/password.txt \
              --token HSM \
              nss-cert-show \
              HSM:ca_signing | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check ca_ocsp_signing cert in HSM
        run: |
          echo "u,u,u" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -C ${SHARED}/password.txt \
              --token HSM \
              nss-cert-show \
              HSM:ca_ocsp_signing | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check ca_audit_signing cert in HSM
        run: |
          echo "u,u,Pu" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -C ${SHARED}/password.txt \
              --token HSM \
              nss-cert-show \
              HSM:ca_audit_signing | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Check subsystem cert in HSM
        run: |
          echo "u,u,u" > expected
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -C ${SHARED}/password.txt \
              --token HSM \
              nss-cert-show \
              HSM:subsystem | tee output
          sed -n 's/\s*Trust Flags:\s*\(\S\+\)\s*$/\1/p' output > actual
          diff expected actual

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Check admin cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove SoftHSM token
        run: |
          docker exec pki ls -laR /var/lib/softhsm/tokens
          docker exec pki runuser -u pkiuser -- softhsm2-util --delete-token --token HSM

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-hsm-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki
