name: CA clone

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/ca/Installing_CA.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=primaryds.example.com \
              --network=example \
              --network-alias=primaryds.example.com \
              --password=Secret.123 \
              primaryds

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=primary.example.com \
              --network=example \
              --network-alias=primary.example.com \
              primary

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://primaryds.example.com:3389 \
              -v

      - name: Check primary CA server status
        run: |
          docker exec primary pki-server status | tee output

          # primary CA should be a domain manager
          echo "True" > expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check primary CA system certs
        run: |
          docker exec primary pki-server cert-find

      - name: Verify users and SD hosts in primary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt

          docker exec primary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec primary pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find

      - name: Check cert requests in primary CA
        run: |
          docker exec primary pki -n caadmin ca-cert-request-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=secondaryds.example.com \
              --network=example \
              --network-alias=secondaryds.example.com \
              --password=Secret.123 \
              secondaryds

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=secondary.example.com \
              --network=example \
              --network-alias=secondary.example.com \
              secondary

      - name: Install CA in secondary PKI container
        run: |
          # get CS.cfg from primary CA before cloning
          docker cp primary:/var/lib/pki/pki-tomcat/conf/ca/CS.cfg CS.cfg.primary

          docker exec primary pki-server ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://secondaryds.example.com:3389 \
              -v

      - name: Check secondary CA server status
        run: |
          docker exec secondary pki-server status | tee output

          # secondary CA should be a domain manager
          echo "True" > expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check secondary CA system certs
        run: |
          docker exec secondary pki-server cert-find

      - name: Check schema in primary DS and secondary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b cn=schema \
              -o ldif_wrap=no \
              -LLL \
              objectClasses attributeTypes \
              | grep "\-oid" | sort | tee primaryds.schema

          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b cn=schema \
              -o ldif_wrap=no \
              -LLL \
              objectClasses attributeTypes \
              | grep "\-oid" | sort | tee secondaryds.schema

          diff primaryds.schema secondaryds.schema

      - name: Check replication manager on primary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=Replication Manager masterAgreement1-secondary.example.com-pki-tomcat,ou=csusers,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replication manager on secondary DS
        if: always()
        run: |
          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=Replication Manager cloneAgreement1-secondary.example.com-pki-tomcat,ou=csusers,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replica object on primary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=replica,cn=dc\3Dca\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replica object on secondary DS
        if: always()
        run: |
          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=replica,cn=dc\3Dca\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replication agreement on primary DS
        if: always()
        run: |
          docker exec primaryds ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=masterAgreement1-secondary.example.com-pki-tomcat,cn=replica,cn=dc\3Dca\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check replication agreement on secondary DS
        if: always()
        run: |
          docker exec secondaryds ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -x \
              -b "cn=cloneAgreement1-secondary.example.com-pki-tomcat,cn=replica,cn=dc\3Dca\2Cdc\3Dpki\2Cdc\3Dexample\2Cdc\3Dcom,cn=mapping tree,cn=config" \
              -s base \
              -o ldif_wrap=no \
              -LLL

      - name: Check CS.cfg in primary CA after cloning
        run: |
          # get CS.cfg from primary CA after cloning
          docker cp primary:/var/lib/pki/pki-tomcat/conf/ca/CS.cfg CS.cfg.primary.after

          docker exec primary pki-server ca-config-find | grep ca.crl.MasterCRL

          # normalize expected result:
          # - remove params that cannot be compared
          # - set dbs.enableSerialManagement to true (automatically enabled when cloned)
          sed -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              -e 's/^\(dbs.enableSerialManagement\)=.*$/\1=true/' \
              CS.cfg.primary \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          sed -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              CS.cfg.primary.after \
              | sort > actual

          diff expected actual

      - name: Check CS.cfg in secondary CA
        run: |
          # get CS.cfg from secondary CA
          docker cp secondary:/var/lib/pki/pki-tomcat/conf/ca/CS.cfg CS.cfg.secondary

          docker exec secondary pki-server ca-config-find | grep ca.crl.MasterCRL

          # normalize expected result:
          # - remove params that cannot be compared
          # - replace primary.example.com with secondary.example.com
          # - replace primaryds.example.com with secondaryds.example.com
          # - set ca.crl.MasterCRL.enableCRLCache to false (automatically disabled in the clone)
          # - set ca.crl.MasterCRL.enableCRLUpdates to false (automatically disabled in the clone)
          # - add params for the clone
          sed -e '/^installDate=/d' \
              -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              -e '/^ca.sslserver.cert=/d' \
              -e '/^ca.sslserver.certreq=/d' \
              -e 's/primary.example.com/secondary.example.com/' \
              -e 's/primaryds.example.com/secondaryds.example.com/' \
              -e 's/^\(ca.crl.MasterCRL.enableCRLCache\)=.*$/\1=false/' \
              -e 's/^\(ca.crl.MasterCRL.enableCRLUpdates\)=.*$/\1=false/' \
              -e '$ a ca.certStatusUpdateInterval=0' \
              -e '$ a ca.listenToCloneModifications=false' \
              -e '$ a master.ca.agent.host=primary.example.com' \
              -e '$ a master.ca.agent.port=8443' \
              CS.cfg.primary.after \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          sed -e '/^installDate=/d' \
              -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              -e '/^ca.sslserver.cert=/d' \
              -e '/^ca.sslserver.certreq=/d' \
              CS.cfg.secondary \
              | sort > actual

          diff expected actual

      - name: Verify users and SD hosts in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12

          docker exec secondary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec secondary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find

      - name: Check cert requests in secondary CA
        run: |
          docker exec secondary pki -n caadmin ca-cert-request-find

      - name: Set up tertiary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=tertiaryds.example.com \
              --network=example \
              --network-alias=tertiaryds.example.com \
              --password=Secret.123 \
              tertiaryds

      - name: Set up tertiary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=tertiary.example.com \
              --network=example \
              --network-alias=tertiary.example.com \
              tertiary

      - name: Install CA in tertiary PKI container
        run: |
          # export system certs and keys (except sslserver)
          docker exec secondary pki-server ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          # export CA signing CSR
          docker exec secondary pki-server cert-export ca_signing \
              --csr-file ${SHARED}/ca_signing.csr

          # export CA OCSP signing CSR
          docker exec secondary pki-server cert-export ca_ocsp_signing \
              --csr-file ${SHARED}/ca_ocsp_signing.csr

          # export subsystem CSR
          docker exec secondary pki-server cert-export subsystem \
              --csr-file ${SHARED}/subsystem.csr

          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_ca_signing_csr_path=${SHARED}/ca_signing.csr \
              -D pki_ocsp_signing_csr_path=${SHARED}/ca_ocsp_signing.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://tertiaryds.example.com:3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Check CS.cfg in secondary CA after cloning
        run: |
          # get CS.cfg from secondary CA after cloning
          docker cp secondary:/var/lib/pki/pki-tomcat/conf/ca/CS.cfg CS.cfg.secondary.after

          docker exec secondary pki-server ca-config-find | grep ca.crl.MasterCRL

          # normalize expected result:
          # - remove params that cannot be compared
          sed -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              CS.cfg.secondary \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          sed -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              CS.cfg.secondary.after \
              | sort > actual

          diff expected actual

      - name: Check CS.cfg in tertiary CA
        run: |
          # get CS.cfg from tertiary CA
          docker cp tertiary:/var/lib/pki/pki-tomcat/conf/ca/CS.cfg CS.cfg.tertiary

          docker exec tertiary pki-server ca-config-find | grep ca.crl.MasterCRL

          # normalize expected result:
          # - remove params that cannot be compared
          # - replace secondary.example.com with tertiary.example.com
          # - replace secondaryds.example.com with tertiaryds.example.com
          # - set master.ca.agent.host to secondary.example.com
          sed -e '/^installDate=/d' \
              -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              -e '/^ca.sslserver.cert=/d' \
              -e '/^ca.sslserver.certreq=/d' \
              -e 's/secondary.example.com/tertiary.example.com/' \
              -e 's/secondaryds.example.com/tertiaryds.example.com/' \
              -e 's/^\(master.ca.agent.host\)=.*$/\1=secondary.example.com/' \
              CS.cfg.secondary.after \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          sed -e '/^installDate=/d' \
              -e '/^dbs.beginReplicaNumber=/d' \
              -e '/^dbs.endReplicaNumber=/d' \
              -e '/^dbs.nextBeginReplicaNumber=/d' \
              -e '/^dbs.nextEndReplicaNumber=/d' \
              -e '/^ca.sslserver.cert=/d' \
              -e '/^ca.sslserver.certreq=/d' \
              CS.cfg.tertiary \
              | sort > actual

          diff expected actual

      - name: Verify users and SD hosts in tertiary PKI container
        run: |
          docker exec tertiary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec tertiary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tertiary pki -n caadmin ca-user-find
          docker exec tertiary pki securitydomain-host-find

      - name: Check cert requests in tertiary CA
        run: |
          docker exec tertiary pki -n caadmin ca-cert-request-find

      - name: Remove CA from tertiary PKI container
        run: |
          docker exec tertiary pki -n caadmin ca-user-find
          docker exec tertiary pki securitydomain-host-find
          docker exec tertiary pkidestroy -s CA -v

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find
          docker exec secondary pkidestroy -s CA -v

      - name: Remove CA from primary PKI container
        run: |
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find
          docker exec primary pkidestroy -s CA -v

      - name: Check primary DS server systemd journal
        if: always()
        run: |
          docker exec primaryds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check primary DS container logs
        if: always()
        run: |
          docker logs primaryds

      - name: Check primary PKI server systemd journal
        if: always()
        run: |
          docker exec primary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check primary PKI server access log
        if: always()
        run: |
          docker exec primary find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check primary CA debug log
        if: always()
        run: |
          docker exec primary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check secondary DS server systemd journal
        if: always()
        run: |
          docker exec secondaryds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check secondary DS container logs
        if: always()
        run: |
          docker logs secondaryds

      - name: Check secondary PKI server systemd journal
        if: always()
        run: |
          docker exec secondary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check secondary PKI server access log
        if: always()
        run: |
          docker exec secondary find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check secondary CA debug log
        if: always()
        run: |
          docker exec secondary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check tertiary DS server systemd journal
        if: always()
        run: |
          docker exec tertiaryds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check tertiary DS container logs
        if: always()
        run: |
          docker logs tertiaryds

      - name: Check tertiary PKI server systemd journal
        if: always()
        run: |
          docker exec tertiary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check tertiary PKI server access log
        if: always()
        run: |
          docker exec tertiary find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check tertiary CA debug log
        if: always()
        run: |
          docker exec tertiary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;
