name: QE Tests

on: [push, pull_request]

jobs:
  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    runs-on: ubuntu-latest
    container: fedora:${{ matrix.os }}
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Install git
        run: dnf install -y git

      - name: Clone the repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build docker
          dnf copr enable -y @pki/master
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-timestamp --with-commit-id --work-dir=build rpm

      - name: Upload PKI packages
        uses: actions/upload-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build container with systemd
        uses: docker/build-push-action@v2
        with:
          file: ci/Dockerfile
          build-args: OS_VERSION=${{ matrix.os }}
          tags: pki:latest
          outputs: type=docker,dest=/tmp/pki.tar

      - name: Upload container
        uses: actions/upload-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp/pki.tar

  # Tier 0
  installation-sanity:
    # This job uses Ansible playbooks in the tests/ dir to setup a PKI deployment.
    # All 5 subsystems are deployed on "discrete" instances
    name: installation-sanity
    needs: build
    # TODO: Replace with ubuntu-latest once the rollout is complete:
    # https://github.com/actions/virtual-environments/issues/1816
    runs-on: ubuntu-20.04
    env:
      BUILDDIR: /tmp/workdir
      PKIDIR: /tmp/workdir/pki
      LOGS: ${GITHUB_WORKSPACE}/logs.txt
      COPR_REPO: "@pki/master"
    strategy:
      matrix:
        os: ['32', '33']
    steps:
      - name: Install dependencies
        run: sudo apt-get install ansible python3-pip python3-pytest python3-docutils

      - name: Clone the repository
        uses: actions/checkout@v2

      - name: Download PKI packages
        uses: actions/download-artifact@v2
        with:
          name: pki-build-${{ matrix.os }}
          path: build/RPMS

      - name: Download container
        uses: actions/download-artifact@v2
        with:
          name: pki-${{ matrix.os }}
          path: /tmp

      - name: Load container
        run: docker load --input /tmp/pki.tar

      - name: Run master container
        run: |
          IMAGE=pki \
          NAME=pki1 \
          HOSTNAME=pki1.example.com \
          ci/runner-init.sh

      - name: Install dependencies in master container
        run: |
          docker exec pki1 dnf install -y dnf-plugins-core wget 389-ds-base
          docker exec pki1 dnf copr enable -y ${COPR_REPO}
          docker exec pki1 bash -c "dnf -y localinstall ${PKIDIR}/build/RPMS/*"

      - name: Set up inventory
        run: |
          sed -e "s/TOPOLOGY/topology-02/g" ci/inventory > inventory
          ansible -i inventory -m setup master

      - name: Set up topology-02
        run: |
          mkdir -p /tmp/test_dir
          ansible-playbook \
              -b \
              -i inventory \
              -l all \
              -M tests/dogtag/pytest-ansible/common-modules \
              -vvv \
              tests/dogtag/pytest-ansible/installation/main.yml

      - name: Run sanity test
        run: |
          pip3 install -r tests/dogtag/pytest-ansible/requirements.txt
          pip3 install -e tests/dogtag/pytest-ansible
          pytest-3 \
              --ansible-host-pattern master \
              --ansible-inventory inventory \
              --ansible-module-path tests/dogtag/pytest-ansible/common-modules \
              --junit-xml pki_cert_junit.xml \
              -qsvvv \
              tests/dogtag/pytest-ansible/pytest/sanity/test_role_users.py

      - name: Gather log files from master container
        if: always()
        run: |
          docker exec pki1 bash -c "journalctl -u pki-tomcatd@topology-02-CA > /var/log/pki/topology-02-CA/systemd.log"
          docker exec pki1 bash -c "journalctl -u pki-tomcatd@topology-02-KRA > /var/log/pki/topology-02-KRA/systemd.log"
          docker exec pki1 bash -c "journalctl -u pki-tomcatd@topology-02-OCSP > /var/log/pki/topology-02-OCSP/systemd.log"
          docker exec pki1 bash -c "journalctl -u pki-tomcatd@topology-02-TKS > /var/log/pki/topology-02-TKS/systemd.log"
          docker exec pki1 bash -c "journalctl -u pki-tomcatd@topology-02-TPS > /var/log/pki/topology-02-TPS/systemd.log"
          docker exec pki1 tar cvf ${PKIDIR}/pki1-logs.tar -C / var/log/pki

      - name: Upload log files from master container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: pki1-logs-${{ matrix.os }}
          path: pki1-logs.tar
