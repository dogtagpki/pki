name: CA clone with secure DS

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/ca/Installing_CA_Clone.md
  # docs/installation/ca/Installing_CA_with_Secure_Database_Connection.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=primaryds.example.com \
              --network=example \
              --network-alias=primaryds.example.com \
              --password=Secret.123 \
              primaryds

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=primary.example.com \
              --network=example \
              --network-alias=primary.example.com \
              primary

      - name: Create DS signing cert in primary PKI container
        run: |
          docker exec primary pki \
              nss-cert-request \
              --subject "CN=DS Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ds_signing.csr

          docker exec primary pki \
              nss-cert-issue \
              --csr ds_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ds_signing.crt

          docker exec primary pki nss-cert-import \
              --cert ds_signing.crt \
              --trust CT,C,C \
              Self-Signed-CA

          docker exec primary pki nss-cert-find

      - name: Create DS server cert in primary PKI container
        run: |
          docker exec primary pki \
              nss-cert-request \
              --subject "CN=primaryds.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr ds_server.csr

          docker exec primary pki \
              nss-cert-issue \
              --issuer Self-Signed-CA \
              --csr ds_server.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert ds_server.crt

          docker exec primary pki nss-cert-import \
              --cert ds_server.crt \
              Server-Cert

          docker exec primary pki nss-cert-find

      - name: Import DS certs into primary DS container
        run: |
          docker exec primary pk12util \
              -d /root/.dogtag/nssdb \
              -o $SHARED/primaryds_server.p12 \
              -W Secret.123 \
              -n Server-Cert

          sudo chmod go+r primaryds_server.p12

          tests/bin/ds-certs-import.sh \
              --image=${{ env.DS_IMAGE }} \
              --input=primaryds_server.p12 \
              --password=Secret.123 \
              primaryds

          tests/bin/ds-stop.sh \
              --image=${{ env.DS_IMAGE }} \
              primaryds

          tests/bin/ds-start.sh \
              --image=${{ env.DS_IMAGE }} \
              primaryds

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds-primary.cfg \
              -s CA \
              -D pki_ds_url=ldaps://primaryds.example.com:3636 \
              -v

      - name: Check NSS database in primary PKI container
        run: |
          # NSS database should contain DS cert and PKI certs
          docker exec primary pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-find \
              | tee output

          sed -n \
              -e 's/^ *\(Nickname: .*\)$/\1/p' \
              -e 's/^ *\(Trust Flags: .*\)$/\1/p' \
              -e 's/^$//p' \
              output > actual

          cat > expected << EOF
          Nickname: ds_signing
          Trust Flags: CT,C,C

          Nickname: ca_signing
          Trust Flags: CTu,Cu,Cu

          Nickname: ca_ocsp_signing
          Trust Flags: u,u,u

          Nickname: sslserver
          Trust Flags: u,u,u

          Nickname: subsystem
          Trust Flags: u,u,u

          Nickname: ca_audit_signing
          Trust Flags: u,u,Pu
          EOF

          diff expected actual

      - name: Create external cert in primary PKI container
        run: |
          docker exec primary pki \
              nss-cert-request \
              --subject "CN=External Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr external.csr

          docker exec primary pki \
              nss-cert-issue \
              --csr external.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert external.crt

          docker exec primary pki nss-cert-import \
              --cert external.crt \
              --trust CT,C,C \
              external

          docker exec primary pki nss-cert-find

      - name: Import external cert into primary PKI server
        run: |
          docker exec primary pki-server \
              instance-externalcert-add \
              --cert-file external.crt \
              --nickname external \
              --trust-args CT,C,C

          # NSS database should contain the external cert
          docker exec primary pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              external \
              | tee output

          sed -n \
              -e 's/^ *\(Nickname: .*\)$/\1/p' \
              -e 's/^ *\(Trust Flags: .*\)$/\1/p' \
              output > actual

          cat > expected << EOF
          Nickname: external
          Trust Flags: CT,C,C
          EOF

          diff expected actual

          # external_certs.conf should contain the external cert
          docker exec primary cat /etc/pki/pki-tomcat/external_certs.conf | tee output

          cat > expected << EOF
          0.nickname=external
          0.token=internal
          EOF

          diff expected output

      - name: Verify DS connection in primary PKI container
        run: |
          docker exec primary pki-server ca-db-config-show | tee output

          echo "primaryds.example.com" > expected
          sed -n 's/^\s\+Hostname:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

          echo "3636" > expected
          sed -n 's/^\s\+Port:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

          echo "true" > expected
          sed -n 's/^\s\+Secure:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

      - name: Verify users and DS hosts in primary PKI container
        run: |
          docker exec primary pki-server cert-export \
              --cert-file ca_signing.crt \
              ca_signing

          docker exec primary pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec primary pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --password Secret.123

          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find

      - name: Check cert requests in primary CA
        run: |
          docker exec primary pki -n caadmin ca-cert-request-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=secondaryds.example.com \
              --network=example \
              --network-alias=secondaryds.example.com \
              --password=Secret.123 \
              secondaryds

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=secondary.example.com \
              --network=example \
              --network-alias=secondary.example.com \
              secondary

      - name: Import DS signing cert into secondary PKI container
        run: |
          docker exec primary pki \
              pkcs12-export \
              --pkcs12 $SHARED/ds_signing.p12 \
              --password Secret.123 \
              Self-Signed-CA

          docker exec secondary pki \
              pkcs12-import \
              --pkcs12 $SHARED/ds_signing.p12 \
              --password Secret.123

          docker exec secondary pki \
              nss-cert-export \
              --output-file ds_signing.crt \
              Self-Signed-CA

          docker exec secondary pki nss-cert-find

      - name: Create DS server cert in secondary PKI container
        run: |
          docker exec secondary pki \
              nss-cert-request \
              --subject "CN=secondaryds.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr ds_server.csr

          docker exec secondary pki \
              nss-cert-issue \
              --issuer Self-Signed-CA \
              --csr ds_server.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert ds_server.crt

          docker exec secondary pki nss-cert-import \
              --cert ds_server.crt \
              Server-Cert

          docker exec secondary pki nss-cert-find

      - name: Import DS certs into secondary DS container
        run: |
          docker exec secondary pk12util \
              -d /root/.dogtag/nssdb \
              -o $SHARED/secondaryds_server.p12 \
              -W Secret.123 \
              -n Server-Cert

          sudo chmod go+r secondaryds_server.p12

          tests/bin/ds-certs-import.sh \
              --image=${{ env.DS_IMAGE }} \
              --input=secondaryds_server.p12 \
              --password=Secret.123 \
              secondaryds

          tests/bin/ds-stop.sh \
              --image=${{ env.DS_IMAGE }} \
              secondaryds

          tests/bin/ds-start.sh \
              --image=${{ env.DS_IMAGE }} \
              secondaryds

      - name: Export certs for cloning from primary PKI container
        run: |
          # export CA signing cert
          docker exec primary pki-server \
              cert-export \
              --cert-file $SHARED/ca_signing.crt \
              ca_signing

          # export PKI certs including external cert but without sslserver cert
          docker exec primary pki-server \
              ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec primary pki \
              pkcs12-cert-find \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --password Secret.123 \
              | tee output

          sed -n \
              -e 's/^ *\(Friendly Name: .*\)$/\1/p' \
              -e 's/^ *\(Trust Flags: .*\)$/\1/p' \
              -e 's/^$//p' \
              output > actual

          cat > expected << EOF
          Friendly Name: subsystem
          Trust Flags: u,u,u

          Friendly Name: ca_signing
          Trust Flags: CTu,Cu,Cu

          Friendly Name: ca_ocsp_signing
          Trust Flags: u,u,u

          Friendly Name: ca_audit_signing
          Trust Flags: u,u,Pu

          Friendly Name: external
          Trust Flags: CT,C,C
          EOF

          diff expected actual

          # export external_certs.conf
          docker cp primary:/etc/pki/pki-tomcat/external_certs.conf .

      - name: Install CA in secondary PKI container
        run: |
          # install secondary CA with the same DS cert, PKI certs, and external cert
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds-secondary.cfg \
              -s CA \
              -D pki_cert_chain_path=$SHARED/ca_signing.crt \
              -D pki_clone_pkcs12_path=$SHARED/ca-certs.p12 \
              -D pki_ds_url=ldaps://secondaryds.example.com:3636 \
              -D pki_server_external_certs_path=$SHARED/external_certs.conf \
              -v

      - name: Check NSS database in secondary PKI container
        run: |
          # NSS database should contain DS cert, PKI certs, and external cert
          docker exec secondary pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-find \
              | tee output

          sed -n \
              -e 's/^ *\(Nickname: .*\)$/\1/p' \
              -e 's/^ *\(Trust Flags: .*\)$/\1/p' \
              -e 's/^$//p' \
              output > actual

          cat > expected << EOF
          Nickname: external
          Trust Flags: CT,C,C

          Nickname: subsystem
          Trust Flags: u,u,u

          Nickname: ca_signing
          Trust Flags: CTu,Cu,Cu

          Nickname: ca_ocsp_signing
          Trust Flags: u,u,u

          Nickname: ca_audit_signing
          Trust Flags: u,u,Pu

          Nickname: ds_signing
          Trust Flags: CT,C,C

          Nickname: sslserver
          Trust Flags: u,u,u
          EOF

          diff expected actual

      - name: Check external cert in secondary PKI server
        run: |
          # external_certs.conf should contain the external cert
          docker exec secondary cat /etc/pki/pki-tomcat/external_certs.conf | tee output

          cat > expected << EOF
          0.nickname=external
          0.token=internal
          EOF

          diff expected output

      - name: Run PKI healthcheck in primary PKI container
        run: docker exec primary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in secondary PKI container
        run: docker exec secondary pki-healthcheck --failures-only

      - name: Verify DS connection in secondary PKI container
        run: |
          docker exec secondary pki-server ca-db-config-show | tee output

          echo "secondaryds.example.com" > expected
          sed -n 's/^\s\+Hostname:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

          echo "3636" > expected
          sed -n 's/^\s\+Port:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

          echo "true" > expected
          sed -n 's/^\s\+Secure:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

      - name: Verify users and SD hosts in secondary PKI container
        run: |
          docker exec primary cp \
              /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              $SHARED/ca_admin_cert.p12

          docker exec secondary pki-server \
              cert-export \
              --cert-file ca_signing.crt \
              ca_signing

          docker exec secondary pki \
              nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec secondary pki \
              pkcs12-import \
              --pkcs12 $SHARED/ca_admin_cert.p12 \
              --password Secret.123

          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find

      - name: Check cert requests in secondary CA
        run: |
          docker exec secondary pki -n caadmin ca-cert-request-find

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pkidestroy -s CA -v

      - name: Re-install CA in secondary PKI container
        run: |
          # create cert bundle containing CA and DS signing certs
          docker exec secondary sed \
              -n wcert_bundle.pem \
              $SHARED/ca_signing.crt \
              ds_signing.crt
          docker exec secondary cat cert_bundle.pem

          # re-install secondary CA with cert bundle, PKI certs, and external cert
          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds-secondary.cfg \
              -s CA \
              -D pki_cert_chain_path=cert_bundle.pem \
              -D pki_clone_pkcs12_path=$SHARED/ca-certs.p12 \
              -D pki_ds_url=ldaps://secondaryds.example.com:3636 \
              -D pki_server_external_certs_path=$SHARED/external_certs.conf \
              -v

      - name: Check NSS database in secondary PKI container again
        run: |
          # NSS database should contain DS cert, PKI certs, and external cert
          docker exec secondary pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-find \
              | tee output

          sed -n \
              -e 's/^ *\(Nickname: .*\)$/\1/p' \
              -e 's/^ *\(Trust Flags: .*\)$/\1/p' \
              -e 's/^$//p' \
              output > actual

          cat > expected << EOF
          Nickname: external
          Trust Flags: CT,C,C

          Nickname: subsystem
          Trust Flags: u,u,u

          Nickname: ca_signing
          Trust Flags: CTu,Cu,Cu

          Nickname: ca_ocsp_signing
          Trust Flags: u,u,u

          Nickname: ca_audit_signing
          Trust Flags: u,u,Pu

          Nickname: ds_signing
          Trust Flags: CT,C,C

          Nickname: sslserver
          Trust Flags: u,u,u
          EOF

          diff expected actual

      - name: Remove external cert from secondary PKI server
        run: |
          docker exec secondary pki-server \
              instance-externalcert-del \
              --nickname external

          # NSS database should not contain the external cert
          docker exec secondary pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-show \
              external \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ERROR: Certificate not found: external
          EOF

          diff expected stderr

          # external_certs.conf should be removed
          docker exec secondary cat /etc/pki/pki-tomcat/external_certs.conf \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          cat: /etc/pki/pki-tomcat/external_certs.conf: No such file or directory
          EOF

          diff expected stderr

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find
          docker exec secondary pkidestroy -s CA -v

      - name: Remove CA from primary PKI container
        run: |
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find
          docker exec primary pkidestroy -s CA -v
