name: Basic KRA

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/kra/Installing_KRA.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=pki.example.com \
              --network=example \
              --network-alias=pki.example.com \
              pki

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_audit_signing_nickname= \
              -v

      - name: Check security domain config in CA
        run: |
          # CA should run security domain service
          cat > expected << EOF
          securitydomain.checkIP=false
          securitydomain.checkinterval=300000
          securitydomain.flushinterval=86400000
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=new
          securitydomain.source=ldap
          EOF

          docker exec pki pki-server ca-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

          docker exec pki pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          # REST API should return security domain info
          cat > expected << EOF
            Domain: EXAMPLE

            CA Subsystem:

              Host ID: CA pki.example.com 8443
              Hostname: pki.example.com
              Port: 8080
              Secure Port: 8443
              Domain Manager: TRUE

          EOF
          docker exec pki pki securitydomain-show | tee output
          diff expected output

      - name: Check CA admin cert
        run: |
          docker exec pki ls -la /root/.dogtag/pki-tomcat
          docker exec pki cat /root/.dogtag/pki-tomcat/ca_admin.cert
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Install KRA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_audit_signing_nickname= \
              -v

      - name: Check PKI server base dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser alias -> /var/lib/pki/pki-tomcat/conf/alias
          lrwxrwxrwx pkiuser pkiuser bin -> /usr/share/tomcat/bin
          drwxrwx--- pkiuser pkiuser ca
          drwxrwx--- pkiuser pkiuser common
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser kra
          lrwxrwxrwx pkiuser pkiuser lib -> /usr/share/pki/server/lib
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser temp
          drwxr-xr-x pkiuser pkiuser webapps
          drwxrwx--- pkiuser pkiuser work
          EOF

          diff expected output

      - name: Check PKI server conf dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          drwxrwx--- pkiuser pkiuser kra
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          -rw-rw---- pkiuser pkiuser tomcat.conf
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check server.xml
        if: always()
        run: |
          docker exec pki cat /etc/pki/pki-tomcat/server.xml

      - name: Check PKI server logs dir after installation
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          drwxrwx--- pkiuser pkiuser kra
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Check KRA base dir
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat/kra \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser alias -> /var/lib/pki/pki-tomcat/alias
          lrwxrwxrwx pkiuser pkiuser conf -> /var/lib/pki/pki-tomcat/conf/kra
          lrwxrwxrwx pkiuser pkiuser logs -> /var/lib/pki/pki-tomcat/logs/kra
          lrwxrwxrwx pkiuser pkiuser registry -> /etc/sysconfig/pki/tomcat/pki-tomcat
          EOF

          diff expected output

      - name: Check KRA conf dir
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat/conf/kra \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          -rw-rw-r-- pkiuser pkiuser CS.cfg
          -rw-rw-r-- pkiuser pkiuser registry.cfg
          EOF

          diff expected output

      - name: Check PKI server system certs
        run: |
          docker exec pki pki-server cert-find

      - name: Check PKI server status
        run: |
          docker exec pki pki-server status | tee output

          # CA should be a domain manager, but KRA should not
          echo "True" > expected
          echo "False" >> expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check security domain config in KRA
        run: |
          # KRA should join security domain in CA
          cat > expected << EOF
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=existing
          EOF

          docker exec pki pki-server kra-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

      - name: Check KRA storage cert
        run: |
          docker exec pki pki-server cert-export kra_storage \
              --cert-file kra_storage.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/kra_storage.csr
          docker exec pki openssl x509 -text -noout -in kra_storage.crt

      - name: Check KRA transport cert
        run: |
          docker exec pki pki-server cert-export kra_transport \
              --cert-file kra_transport.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/kra_transport.csr
          docker exec pki openssl x509 -text -noout -in kra_transport.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem \
              --cert-file subsystem.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/subsystem.csr
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver \
              --cert-file sslserver.crt
          docker exec pki openssl req -text -noout \
              -in /var/lib/pki/pki-tomcat/conf/certs/sslserver.csr
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert after installing KRA
        run: |
          docker exec pki ls -la /root/.dogtag/pki-tomcat
          docker exec pki cat /root/.dogtag/pki-tomcat/ca_admin.cert
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Check accesing KRA using CA admin cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin kra-user-show kraadmin

      - name: Check KRA connector in CA
        run: |
          docker exec pki pki-server ca-config-find | grep ^ca.connector.KRA. | sort | tee output

          # KRA connector should be configured
          cat > expected << EOF
          ca.connector.KRA.enable=true
          ca.connector.KRA.host=pki.example.com
          ca.connector.KRA.local=false
          ca.connector.KRA.nickName=subsystem
          ca.connector.KRA.port=8443
          ca.connector.KRA.timeout=30
          ca.connector.KRA.uri=/kra/agent/kra/connector
          EOF
          sed -e '/^ca.connector.KRA.transportCert=/d' output > actual
          diff expected actual

          # REST API should return KRA connector info
          docker exec pki pki -n caadmin ca-kraconnector-show | tee output
          sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' output > actual
          echo pki.example.com > expected
          diff expected actual

      - name: Check cert enrollment with key archival
        run: |
          # import transport cert
          docker exec pki pki nss-cert-import \
              --cert kra_transport.crt \
              kra_transport

          # generate key and cert request
          # https://github.com/dogtagpki/pki/wiki/Generating-Certificate-Request-with-PKI-NSS
          docker exec pki pki \
              nss-cert-request \
              --type crmf \
              --subject UID=testuser \
              --transport kra_transport \
              --csr testuser.csr

          docker exec pki cat testuser.csr

          # issue cert
          # https://github.com/dogtagpki/pki/wiki/Issuing-Certificates
          docker exec pki pki \
              -u caadmin \
              -w Secret.123 \
              ca-cert-issue \
              --request-type crmf \
              --profile caUserCert \
              --subject UID=testuser \
              --csr-file testuser.csr \
              --output-file testuser.crt

          # import cert into NSS database
          docker exec pki pki nss-cert-import --cert testuser.crt testuser

          # the cert should match the key (trust flags must be u,u,u)
          echo "u,u,u" > expected
          docker exec pki pki nss-cert-show testuser | tee output
          sed -n "s/^\s*Trust Flags:\s*\(\S*\)$/\1/p" output > actual
          diff expected actual

      - name: Check archived key
        run: |
          # find archived key by owner
          docker exec pki pki \
              -u kraadmin \
              -w Secret.123 \
              kra-key-find --owner UID=testuser | tee output

          KEY_ID=$(sed -n "s/^\s*Key ID:\s*\(\S*\)$/\1/p" output)
          echo "Key ID: $KEY_ID"
          echo $KEY_ID > key.id

          DEC_KEY_ID=$(python -c "print(int('$KEY_ID', 16))")
          echo "Dec Key ID: $DEC_KEY_ID"

          # get key record
          docker exec ds ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "cn=$DEC_KEY_ID,ou=keyRepository,ou=kra,dc=kra,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -LLL | tee output

          # encryption mode should be "false" by default
          echo "false" > expected
          sed -n 's/^metaInfo:\s*payloadEncrypted:\(.*\)$/\1/p' output > actual
          diff expected actual

          # key wrap algorithm should be "AES KeyWrap/Padding" by default
          echo "AES KeyWrap/Padding" > expected
          sed -n 's/^metaInfo:\s*payloadWrapAlgorithm:\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check key retrieval
        run: |
          KEY_ID=$(cat key.id)
          echo "Key ID: $KEY_ID"

          BASE64_CERT=$(docker exec pki pki nss-cert-export --format DER testuser | base64 --wrap=0)
          echo "Cert: $BASE64_CERT"

          cat > request.json <<EOF
          {
            "ClassName" : "com.netscape.certsrv.key.KeyRecoveryRequest",
            "Attributes" : {
              "Attribute" : [ {
                "name" : "keyId",
                "value" : "$KEY_ID"
              }, {
                "name" : "certificate",
                "value" : "$BASE64_CERT"
              }, {
                "name" : "passphrase",
                "value" : "Secret.123"
              } ]
            }
          }
          EOF

          # retrieve archived cert and key into PKCS #12 file
          # https://github.com/dogtagpki/pki/wiki/Retrieving-Archived-Key
          docker exec pki pki \
              -n caadmin \
              kra-key-retrieve \
              --input $SHARED/request.json \
              --output-data archived.p12

          # import PKCS #12 file into NSS database
          docker exec pki pki \
              -d nssdb \
              pkcs12-import \
              --pkcs12 archived.p12 \
              --password Secret.123

          # remove archived cert from NSS database
          docker exec pki pki -d nssdb nss-cert-del UID=testuser

          # import original cert into NSS database
          docker exec pki pki -d nssdb nss-cert-import --cert testuser.crt testuser

          # the original cert should match the archived key (trust flags must be u,u,u)
          echo "u,u,u" > expected
          docker exec pki pki -d nssdb nss-cert-show testuser | tee output
          sed -n "s/^\s*Trust Flags:\s*\(\S*\)$/\1/p" output > actual
          diff expected actual

      - name: Remove KRA
        run: docker exec pki pkidestroy -s KRA -v

      - name: Remove CA
        run: docker exec pki pkidestroy -s CA -v

      - name: Check PKI server base dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/pki-tomcat
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          EOF

          diff expected output

      - name: Check PKI server conf dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          drwxrwx--- pkiuser pkiuser kra
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          -rw-rw---- pkiuser pkiuser tomcat.conf
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check PKI server logs dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          drwxrwx--- pkiuser pkiuser kra
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check KRA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;
