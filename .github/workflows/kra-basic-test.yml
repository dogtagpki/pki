name: Basic KRA

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/kra/Installing_KRA.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve PKI images
        uses: actions/cache@v3
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

          docker exec pki pki-server cert-find

      - name: Check security domain config in CA
        run: |
          # CA should run security domain service
          cat > expected << EOF
          securitydomain.checkIP=false
          securitydomain.checkinterval=300000
          securitydomain.flushinterval=86400000
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=new
          securitydomain.source=ldap
          EOF

          docker exec pki pki-server ca-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

          docker exec pki pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt

          # REST API should return security domain info
          cat > expected << EOF
            Domain: EXAMPLE

            CA Subsystem:

              Host ID: CA pki.example.com 8443
              Hostname: pki.example.com
              Port: 8080
              Secure Port: 8443
              Domain Manager: TRUE

          EOF
          docker exec pki pki securitydomain-show | tee output
          diff expected output

      - name: Install KRA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Check security domain config in KRA
        run: |
          # KRA should join security domain in CA
          cat > expected << EOF
          securitydomain.host=pki.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=existing
          EOF

          docker exec pki pki-server kra-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

      - name: Check KRA storage cert
        run: |
          docker exec pki pki-server cert-export kra_storage \
              --cert-file kra_storage.crt
          docker exec pki openssl req -text -noout \
              -in /etc/pki/pki-tomcat/certs/kra_storage.csr
          docker exec pki openssl x509 -text -noout -in kra_storage.crt

      - name: Check KRA transport cert
        run: |
          docker exec pki pki-server cert-export kra_transport \
              --cert-file kra_transport.crt
          docker exec pki openssl req -text -noout \
              -in /etc/pki/pki-tomcat/certs/kra_transport.csr
          docker exec pki openssl x509 -text -noout -in kra_transport.crt

      - name: Check KRA audit signing cert
        run: |
          docker exec pki pki-server cert-export kra_audit_signing \
              --cert-file kra_audit_signing.crt
          docker exec pki openssl req -text -noout \
              -in /etc/pki/pki-tomcat/certs/kra_audit_signing.csr
          docker exec pki openssl x509 -text -noout -in kra_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem \
              --cert-file subsystem.crt
          docker exec pki openssl req -text -noout \
              -in /etc/pki/pki-tomcat/certs/subsystem.csr
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver \
              --cert-file sslserver.crt
          docker exec pki openssl req -text -noout \
              -in /etc/pki/pki-tomcat/certs/sslserver.csr
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check KRA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Verify KRA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin kra-user-show kraadmin

      - name: Check KRA connector in CA
        run: |
          docker exec pki pki-server ca-config-find | grep ^ca.connector.KRA. | sort | tee output

          # KRA connector should be configured
          cat > expected << EOF
          ca.connector.KRA.enable=true
          ca.connector.KRA.host=pki.example.com
          ca.connector.KRA.local=false
          ca.connector.KRA.nickName=subsystem
          ca.connector.KRA.port=8443
          ca.connector.KRA.timeout=30
          ca.connector.KRA.uri=/kra/agent/kra/connector
          EOF
          sed -e '/^ca.connector.KRA.transportCert=/d' output > actual
          diff expected actual

          # REST API should return KRA connector info
          docker exec pki pki -n caadmin ca-kraconnector-show | tee output
          sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' output > actual
          echo pki.example.com > expected
          diff expected actual

      - name: Verify cert key archival
        run: |
          docker exec pki /usr/share/pki/tests/kra/bin/test-cert-key-archival.sh

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove KRA
        run: docker exec pki pkidestroy -i pki-tomcat -s KRA -v

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: kra-basic
          path: |
            /tmp/artifacts/pki
