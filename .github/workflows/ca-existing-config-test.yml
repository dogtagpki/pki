name: CA with existing config

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_instance_name=localhost \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Check instance
        run: |
          docker exec pki pki-server instance-find | tee output

          cat > expected << EOF
          -----------------
          1 entries matched
          -----------------
            Instance ID: localhost
            Active: True
          EOF

          diff expected output

          docker exec pki pki-server instance-show localhost | tee output

          cat > expected << EOF
            Instance ID: localhost
            Active: True
          EOF

          diff expected output

      - name: Check system certs
        run: |
          docker exec pki pki \
              -d /var/lib/pki/localhost/conf/alias \
              nss-cert-find | tee system-certs.orig

      - name: Check CA admin
        run: |
          docker exec pki pki-server \
              cert-export \
              -i localhost \
              --cert-file ca_signing.crt \
              ca_signing

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/localhost/ca_admin_cert.p12 \
              --password Secret.123

          docker exec pki pki nss-cert-show caadmin | tee admin-cert.orig

          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Remove CA
        run: |
          docker exec pki pkidestroy \
              -i localhost \
              -s CA \
              -v

      - name: Check instance
        run: |
          docker exec pki pki-server instance-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          -----------------
          0 entries matched
          -----------------
          EOF

          diff expected stdout

          docker exec pki pki-server instance-show localhost \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ERROR: Invalid instance localhost.
          EOF

          diff expected stderr

      - name: Check PKI server base dir after first removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/localhost \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # Tomcat and CA should be removed leaving just the conf and logs folders
          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/localhost
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/localhost
          EOF

          diff expected output

      - name: Check PKI server conf dir after first removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/localhost \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # all config files should be retained
          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          -rw-rw---- pkiuser pkiuser tomcat.conf
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

          # save the original config
          docker exec pki cp -r /etc/pki/localhost /etc/pki/localhost.orig

      - name: Check PKI server logs dir after first removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/localhost \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # all log files should be retained
          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          drwxr-xr-x pkiuser pkiuser pki
          EOF

          diff expected output

      - name: Check admin cert after first removal
        run: |
          docker exec pki ls -l /root/.dogtag/localhost

          docker exec pki pki nss-cert-show \
              --cert-file /root/.dogtag/localhost/ca_admin.cert

          docker exec pki pki pkcs12-cert-find \
              --pkcs12 /root/.dogtag/localhost/ca_admin_cert.p12 \
              --password Secret.123

      - name: Install CA with the same config
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_instance_name=localhost \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Check instance
        run: |
          docker exec pki pki-server instance-find | tee output

          cat > expected << EOF
          -----------------
          1 entries matched
          -----------------
            Instance ID: localhost
            Active: True
          EOF

          diff expected output

          docker exec pki pki-server instance-show localhost | tee output

          cat > expected << EOF
            Instance ID: localhost
            Active: True
          EOF

          diff expected output

      - name: Check PKI server config after second installation
        run: |
          # server config should not change
          docker exec pki diff /etc/pki/localhost.orig/server.xml /etc/pki/localhost/server.xml

          # passwords should not change
          docker exec pki diff /etc/pki/localhost.orig/password.conf /etc/pki/localhost/password.conf

      - name: Check CA config after second installation
        run: |
          # TODO: remove timestamps from config files

          # normalize expected result:
          # - remove params that cannot be compared
          docker exec pki sed \
              -e '/^installDate=/d' \
              /etc/pki/localhost.orig/ca/CS.cfg \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          docker exec pki sed \
              -e '/^installDate=/d' \
              /etc/pki/localhost/ca/CS.cfg \
              | sort > actual

          # CA config should not change
          diff expected actual

      - name: Check system certs again
        run: |
          docker exec pki pki \
              -d /var/lib/pki/localhost/conf/alias \
              nss-cert-find | tee system-certs.new

          # system certs should not change
          diff system-certs.orig system-certs.new

      - name: Check CA admin again
        run: |
          docker exec pki pki nss-cert-show caadmin | tee admin-cert.new

          # admin cert should not change
          diff admin-cert.orig admin-cert.new

          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/log/pki/localhost/ca -name "debug.*" -exec cat {} \;

      - name: Remove CA again
        run: |
          docker exec pki pkidestroy \
              -i localhost \
              -s CA \
              --remove-conf \
              --remove-logs \
              -v

      - name: Check instance
        run: |
          docker exec pki pki-server instance-find \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          -----------------
          0 entries matched
          -----------------
          EOF

          diff expected stdout

          docker exec pki pki-server instance-show localhost \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ERROR: Invalid instance localhost.
          EOF

          diff expected stderr

      - name: Check PKI server base dir after second removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/localhost \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/var/lib/pki/localhost': No such file or directory
          EOF

          diff expected stderr

      - name: Check PKI server conf dir after second removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/localhost \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/etc/pki/localhost': No such file or directory
          EOF

          diff expected stderr

      - name: Check PKI server logs dir after second removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/localhost \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/var/log/pki/localhost': No such file or directory
          EOF

          diff expected stderr

      - name: Check admin cert after second removal
        run: |
          docker exec pki ls -l /root/.dogtag/localhost

          docker exec pki pki nss-cert-show \
              --cert-file /root/.dogtag/localhost/ca_admin.cert

          docker exec pki pki pkcs12-cert-find \
              --pkcs12 /root/.dogtag/localhost/ca_admin_cert.p12 \
              --password Secret.123

      - name: Install CA with new config and old admin cert
        run: |
          rc=0
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_instance_name=localhost \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v \
              || rc=$?

          # pkispawn should fail
          [ $rc -ne 0 ]

      - name: Remove old admin cert
        run: |
          docker exec pki rm -f /root/.dogtag/localhost/ca_admin.cert
          docker exec pki rm -f /root/.dogtag/localhost/ca_admin_cert.p12

      - name: Install CA with new config and no admin cert
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_instance_name=localhost \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

          # pkispawn should succeed

      - name: Check system certs again
        run: |
          docker exec pki pki \
              -d /var/lib/pki/localhost/conf/alias \
              nss-cert-find | tee system-certs.new

          # system certs should be different
          rc=0
          diff system-certs.orig system-certs.new || rc=$?

          [ $rc -ne 0 ]

      - name: Check CA admin
        run: |
          # remove old certs
          docker exec pki pki nss-cert-del caadmin
          docker exec pki pki nss-cert-del ca_signing

          # export new CA signing cert
          docker exec pki pki-server \
              cert-export \
              -i localhost \
              --cert-file ca_signing.crt \
              ca_signing

          # import new CA signing cert
          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          # import new admin cert
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/localhost/ca_admin_cert.p12 \
              --password Secret.123

          docker exec pki pki nss-cert-show caadmin | tee admin-cert.new

          # admin cert should be different
          rc=0
          diff admin-cert.orig admin-cert.new || rc=$?

          [ $rc -ne 0 ]

          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Remove CA again
        run: |
          docker exec pki pkidestroy \
              -i localhost \
              -s CA \
              --remove-conf \
              --remove-logs \
              -v

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@localhost.service

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ca-existing-config
          path: /tmp/artifacts
