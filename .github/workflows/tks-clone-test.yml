name: TKS clone

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/tks/Installing_TKS_Clone.md
  # This test installs DS, CA, and TKS in the primary containers,
  # then installs DS clone, CA clone, and TKS clone in the secondary containers.
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up primary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=primaryds.example.com \
              --network=example \
              --network-alias=primaryds.example.com \
              --password=Secret.123 \
              primaryds

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=primary.example.com \
              --network=example \
              --network-alias=primary.example.com \
              primary

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://primaryds.example.com:3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Install TKS in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://primaryds.example.com:3389 \
              -v

          docker exec primary pki-server cert-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=secondaryds.example.com \
              --network=example \
              --network-alias=secondaryds.example.com \
              --password=Secret.123 \
              secondaryds

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=secondary.example.com \
              --network=example \
              --network-alias=secondary.example.com \
              secondary

      - name: Install CA in secondary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt

          docker exec primary pki-server ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://secondaryds.example.com:3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Install TKS in secondary PKI container
        run: |
          docker exec primary pki-server tks-clone-prepare \
              --pkcs12-file $SHARED/tks-certs.p12 \
              --pkcs12-password Secret.123

          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks-clone.cfg \
              -s TKS \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/tks-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://secondaryds.example.com:3389 \
              -v

          docker exec secondary pki-server cert-find

      - name: Verify TKS admin in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12

          docker exec secondary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec secondary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin tks-user-show tksadmin

      - name: Set up tertiary DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=tertiaryds.example.com \
              --network=example \
              --network-alias=tertiaryds.example.com \
              --password=Secret.123 \
              tertiaryds

      - name: Set up tertiary PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=tertiary.example.com \
              --network=example \
              --network-alias=tertiary.example.com \
              tertiary

      - name: Install CA in tertiary PKI container
        run: |
          docker exec secondary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt

          docker exec secondary pki-server ca-clone-prepare \
              --pkcs12-file $SHARED/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone-of-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://tertiaryds.example.com:3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Install TKS in tertiary PKI container
        run: |
          docker exec secondary pki-server tks-clone-prepare \
              --pkcs12-file $SHARED/tks-certs.p12 \
              --pkcs12-password Secret.123

          docker exec tertiary pkispawn \
              -f /usr/share/pki/server/examples/installation/tks-clone-of-clone.cfg \
              -s TKS \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/tks-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://tertiaryds.example.com:3389 \
              -v

          docker exec tertiary pki-server cert-find

      - name: Run PKI healthcheck in primary container
        run: docker exec primary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in secondary container
        run: docker exec secondary pki-healthcheck --failures-only

      - name: Run PKI healthcheck in tertiary container
        run: docker exec tertiary pki-healthcheck --failures-only

      - name: Verify TKS admin in tertiary PKI container
        run: |
          docker exec tertiary pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec tertiary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec tertiary pki -n caadmin tks-user-show tksadmin

      - name: Gather artifacts
        run: |
          tests/bin/ds-artifacts-save.sh primaryds
          tests/bin/pki-artifacts-save.sh primary
          tests/bin/ds-artifacts-save.sh secondaryds
          tests/bin/pki-artifacts-save.sh secondary
          tests/bin/ds-artifacts-save.sh tertiaryds
          tests/bin/pki-artifacts-save.sh tertiary
        continue-on-error: true

      - name: Remove TKS from tertiary PKI container
        run: docker exec tertiary pkidestroy -s TKS -v

      - name: Remove CA from tertiary PKI container
        run: docker exec tertiary pkidestroy -s CA -v

      - name: Remove TKS from secondary PKI container
        run: docker exec secondary pkidestroy -s TKS -v

      - name: Remove CA from secondary PKI container
        run: docker exec secondary pkidestroy -s CA -v

      - name: Remove TKS from primary PKI container
        run: docker exec primary pkidestroy -s TKS -v

      - name: Remove CA from primary PKI container
        run: docker exec primary pkidestroy -s CA -v

      - name: Check primary DS server systemd journal
        if: always()
        run: |
          docker exec primaryds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check primary DS container logs
        if: always()
        run: |
          docker logs primaryds

      - name: Check primary PKI server systemd journal
        if: always()
        run: |
          docker exec primary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check primary CA debug log
        if: always()
        run: |
          docker exec primary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check primary TKS debug log
        if: always()
        run: |
          docker exec secondary find /var/lib/pki/pki-tomcat/logs/tks -name "debug.*" -exec cat {} \;

      - name: Check secondary DS server systemd journal
        if: always()
        run: |
          docker exec secondaryds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check secondary DS container logs
        if: always()
        run: |
          docker logs secondaryds

      - name: Check secondary PKI server systemd journal
        if: always()
        run: |
          docker exec secondary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check secondary CA debug log
        if: always()
        run: |
          docker exec secondary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check secondary TKS debug log
        if: always()
        run: |
          docker exec secondary find /var/lib/pki/pki-tomcat/logs/tks -name "debug.*" -exec cat {} \;

      - name: Check tertiary DS server systemd journal
        if: always()
        run: |
          docker exec tertiaryds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check tertiary DS container logs
        if: always()
        run: |
          docker logs tertiaryds

      - name: Check tertiary PKI server systemd journal
        if: always()
        run: |
          docker exec tertiary journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check tertiary CA debug log
        if: always()
        run: |
          docker exec tertiary find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check tertiary TKS debug log
        if: always()
        run: |
          docker exec tertiary find /var/lib/pki/pki-tomcat/logs/tks -name "debug.*" -exec cat {} \;

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tks-clone
          path: /tmp/artifacts
