name: Lightweight CA

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      db-image:
        required: false
        type: string

jobs:
  # docs/installation/ca/Installing_CA.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ inputs.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ inputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install dependencies
        run: |
          docker exec pki dnf install -y softhsm

      - name: Create SoftHSM token
        run: |
          # allow PKI user to access SoftHSM files
          docker exec pki usermod pkiuser -a -G ods

          # create SoftHSM token for PKI server
          docker exec pki runuser -u pkiuser -- \
              softhsm2-util \
              --init-token \
              --label HSM \
              --so-pin Secret.HSM \
              --pin Secret.HSM \
              --free

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_hsm_enable=True \
              -D pki_token_name=HSM \
              -D pki_token_password=Secret.HSM \
              -D pki_server_database_password=Secret.123 \
              -D pki_ca_signing_token=HSM \
              -D pki_ocsp_signing_token=HSM \
              -D pki_audit_signing_token=HSM \
              -D pki_subsystem_token=HSM \
              -D pki_sslserver_token=internal \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Check admin user
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check host CA
        run: |
          docker exec pki pki -n caadmin ca-authority-find | tee output

          # there should be 1 authority initially
          echo "1" > expected
          sed -n 's/^\s*ID:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

          # it should be a host CA
          echo "true" > expected
          sed -n 's/^\s*Host authority:\s*\(.*\)$/\1/p' output > actual
          diff expected actual

          # store host CA ID
          sed -n 's/^\s*ID:\s*\(.*\)$/\1/p' output > hostca-id

      - name: Check host CA's LDAP entry
        run: |
          HOSTCA_ID=$(cat hostca-id)

          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "cn=$HOSTCA_ID,ou=authorities,ou=ca,dc=ca,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -LLL \
              "(objectClass=*)" | tee output

          # check authorityKeyNickname
          echo "HSM:ca_signing" > expected
          sed -n 's/^authorityKeyNickname:\s*\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check certs and keys in internal token
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-find | tee output

          # there should be 5 certs
          echo "5" > expected
          sed -n 's/^\s*Nickname:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find | tee output

          # there should be 1 key
          echo "1" > expected
          sed -n 's/^\s*Key ID:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

      - name: Check certs and keys in HSM
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              --token HSM \
              nss-cert-find | tee output

          # there should be 4 certs now
          echo "4" > expected
          sed -n 's/^\s*Nickname:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              --token HSM \
              nss-key-find | tee output

          # there should be 4 keys now
          echo "4" > expected
          sed -n 's/^\s*Key ID:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

      - name: Create lightweight CA
        run: |
          HOSTCA_ID=$(cat hostca-id)

          # create a LWCA under the host CA
          docker exec pki pki -n caadmin ca-authority-create \
              --parent $HOSTCA_ID \
              CN="Lightweight CA" | tee output

          # store LWCA ID
          sed -n 's/^\s*ID:\s*\(.*\)$/\1/p' output > lwca-id

          docker exec pki pki -n caadmin ca-authority-find | tee output

          # there should be 2 authorities now
          echo "2" > expected
          sed -n 's/^\s*ID:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

      - name: Check lightweight CA's LDAP entry
        run: |
          LWCA_ID=$(cat lwca-id)

          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "cn=$LWCA_ID, ou=authorities,ou=ca,dc=ca,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -LLL \
              "(objectClass=*)" | tee output

          # check authorityKeyNickname
          echo "ca_signing $LWCA_ID" > expected
          sed -n 's/^authorityKeyNickname:\s*\(.*\)$/\1/p' output > actual
          diff expected actual
        # TODO: remove continue-on-error once this issue is fixed:
        # https://github.com/dogtagpki/pki/issues/2412
        continue-on-error: true

      - name: Check certs and keys in internal token
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-cert-find | tee output

          # there should be 6 certs now
          echo "6" > expected
          sed -n 's/^\s*Nickname:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              nss-key-find | tee output

          # there should be 2 keys now
          echo "2" > expected
          sed -n 's/^\s*Key ID:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

      - name: Check certs and keys in HSM
        run: |
          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              --token HSM \
              nss-cert-find | tee output

          # there should be 4 certs now
          echo "4" > expected
          sed -n 's/^\s*Nickname:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

          docker exec pki pki \
              -d /etc/pki/pki-tomcat/alias \
              -f /etc/pki/pki-tomcat/password.conf \
              --token HSM \
              nss-key-find | tee output

          # there should be 4 keys now
          echo "4" > expected
          sed -n 's/^\s*Key ID:\s*\(.*\)$/\1/p' output | wc -l > actual
          diff expected actual

      - name: Check enrollment against lightweight CA
        run: |
          LWCA_ID=$(cat lwca-id)

          # submit enrollment request against LWCA
          docker exec pki pki client-cert-request \
              --issuer-id $LWCA_ID \
              UID=testuser | tee output

          # get request ID
          REQUEST_ID=$(sed -n -e 's/^\s*Request ID:\s*\(.*\)$/\1/p' output)

          # approve request
          docker exec pki pki \
              -n caadmin \
              ca-cert-request-approve \
              $REQUEST_ID \
              --force | tee output

          # get cert ID
          CERT_ID=$(sed -n -e 's/^\s*Certificate ID:\s*\(.*\)$/\1/p' output)

          docker exec pki pki ca-cert-show $CERT_ID | tee output

          # verify that it's signed by LWCA
          echo "CN=Lightweight CA" > expected
          sed -n -e 's/^\s*Issuer DN:\s*\(.*\)$/\1/p' output > actual
          diff expected actual
        # TODO: remove continue-on-error once this issue is fixed:
        # https://github.com/dogtagpki/pki/issues/2412
        continue-on-error: true

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove SoftHSM token
        run: |
          docker exec pki ls -laR /var/lib/softhsm/tokens
          docker exec pki runuser -u pkiuser -- softhsm2-util --delete-token --token HSM

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-lightweight-hsm-${{ inputs.os }}
          path: |
            /tmp/artifacts/pki
