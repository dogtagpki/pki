name: TPS with existing config

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Install KRA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Install TKS
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

      - name: Install TPS
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_authdb_url=ldap://ds.example.com:3389 \
              -D pki_enable_server_side_keygen=True \
              -v

      - name: Check system certs
        run: |
          docker exec pki pki \
              -d /var/lib/pki/pki-tomcat/conf/alias \
              nss-cert-find | tee system-certs.orig

      - name: Check TPS admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki pki nss-cert-find | tee admin-cert.orig

          docker exec pki pki -n caadmin tps-user-show tpsadmin

      - name: Remove TPS
        run: docker exec pki pkidestroy -i pki-tomcat -s TPS -v

      - name: Check PKI server base dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # TPS subsystem should be removed
          # TODO: review permissions
          cat > expected << EOF
          lrwxrwxrwx pkiuser pkiuser alias -> /var/lib/pki/pki-tomcat/conf/alias
          lrwxrwxrwx pkiuser pkiuser bin -> /usr/share/tomcat/bin
          drwxrwx--- pkiuser pkiuser ca
          drwxrwx--- pkiuser pkiuser common
          lrwxrwxrwx pkiuser pkiuser conf -> /etc/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser kra
          lrwxrwxrwx pkiuser pkiuser lib -> /usr/share/pki/server/lib
          lrwxrwxrwx pkiuser pkiuser logs -> /var/log/pki/pki-tomcat
          drwxrwx--- pkiuser pkiuser temp
          drwxrwx--- pkiuser pkiuser tks
          drwxr-xr-x pkiuser pkiuser webapps
          drwxrwx--- pkiuser pkiuser work
          EOF

          diff expected output

      - name: Check PKI server conf dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          # all config files should be retained
          # TODO: review permissions
          cat > expected << EOF
          drwxrwx--- pkiuser pkiuser Catalina
          drwxrwx--- pkiuser pkiuser alias
          drwxrwx--- pkiuser pkiuser ca
          -rw-r--r-- pkiuser pkiuser catalina.policy
          lrwxrwxrwx pkiuser pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwx--- pkiuser pkiuser certs
          lrwxrwxrwx pkiuser pkiuser context.xml -> /etc/tomcat/context.xml
          drwxrwx--- pkiuser pkiuser kra
          lrwxrwxrwx pkiuser pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw---- pkiuser pkiuser password.conf
          -rw-rw---- pkiuser pkiuser server.xml
          -rw-rw---- pkiuser pkiuser serverCertNick.conf
          drwxrwx--- pkiuser pkiuser tks
          -rw-rw---- pkiuser pkiuser tomcat.conf
          drwxrwx--- pkiuser pkiuser tps
          lrwxrwxrwx pkiuser pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

          # save the original config
          docker exec pki cp -r /etc/pki/pki-tomcat /etc/pki/pki-tomcat.orig

      - name: Check PKI server logs dir after removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\(\S*\) *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3 \4/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # all log files should be retained
          # TODO: review permissions
          cat > expected << EOF
          drwxr-x--- pkiuser pkiuser backup
          drwxrwx--- pkiuser pkiuser ca
          -rw-rw-r-- pkiuser pkiuser catalina.$DATE.log
          -rw-rw-r-- pkiuser pkiuser host-manager.$DATE.log
          drwxrwx--- pkiuser pkiuser kra
          -rw-rw-r-- pkiuser pkiuser localhost.$DATE.log
          -rw-r--r-- pkiuser pkiuser localhost_access_log.$DATE.txt
          -rw-rw-r-- pkiuser pkiuser manager.$DATE.log
          drwxr-xr-x pkiuser pkiuser pki
          drwxrwx--- pkiuser pkiuser tks
          drwxrwx--- pkiuser pkiuser tps
          EOF

          diff expected output

      - name: Install TPS again
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_authdb_url=ldap://ds.example.com:3389 \
              -D pki_enable_server_side_keygen=True \
              -v

      - name: Check PKI server config after second installation
        run: |
          # server config should not change
          docker exec pki diff /etc/pki/pki-tomcat.orig/server.xml /etc/pki/pki-tomcat/server.xml

          # passwords should not change
          docker exec pki diff /etc/pki/pki-tomcat.orig/password.conf /etc/pki/pki-tomcat/password.conf

      - name: Check TPS config after second installation
        run: |
          # TODO: remove timestamps from config files

          # normalize expected result:
          # - remove params that cannot be compared
          docker exec pki sed \
              -e '/^installDate=/d' \
              -e '/^config\.Subsystem_Connections\..*\.timestamp=/d' \
              /etc/pki/pki-tomcat.orig/tps/CS.cfg \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          docker exec pki sed \
              -e '/^installDate=/d' \
              -e '/^config\.Subsystem_Connections\..*\.timestamp=/d' \
              /etc/pki/pki-tomcat/tps/CS.cfg \
              | sort > actual

          # TPS config should not change
          diff expected actual

      - name: Check system certs again
        run: |
          docker exec pki pki \
              -d /var/lib/pki/pki-tomcat/conf/alias \
              nss-cert-find | tee system-certs.new

          # system certs should not change
          diff system-certs.orig system-certs.new

      - name: Check TPS admin again
        run: |
          docker exec pki pki nss-cert-find | tee admin-cert.new

          # admin cert should not change
          diff admin-cert.orig admin-cert.new

          docker exec pki pki -n caadmin tps-user-show tpsadmin

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check KRA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;

      - name: Check TKS debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/tks -name "debug.*" -exec cat {} \;

      - name: Check TPS debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/tps -name "debug.*" -exec cat {} \;

      - name: Remove TPS again
        run: |
          docker exec pki pkidestroy \
              -i pki-tomcat \
              -s TPS \
              --remove-conf \
              --remove-logs \
              -v

      - name: Remove TKS
        run: |
          docker exec pki pkidestroy \
              -i pki-tomcat \
              -s TKS \
              --remove-conf \
              --remove-logs \
              -v

      - name: Remove KRA
        run: |
          docker exec pki pkidestroy \
              -i pki-tomcat \
              -s KRA \
              --remove-conf \
              --remove-logs \
              -v

      - name: Remove CA
        run: |
          docker exec pki pkidestroy \
              -i pki-tomcat \
              -s CA \
              --remove-conf \
              --remove-logs \
              -v

      - name: Check PKI server base dir after second removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/lib/pki/pki-tomcat \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/var/lib/pki/pki-tomcat': No such file or directory
          EOF

          diff expected stderr

      - name: Check PKI server conf dir after second removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /etc/pki/pki-tomcat \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/etc/pki/pki-tomcat': No such file or directory
          EOF

          diff expected stderr

      - name: Check PKI server logs dir after second removal
        run: |
          # check file types, owners, and permissions
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          ls: cannot access '/var/log/pki/pki-tomcat': No such file or directory
          EOF

          diff expected stderr

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tps-existing-config
          path: /tmp/artifacts
