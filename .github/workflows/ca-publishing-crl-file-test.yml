name: CA with file-based CRL publishing

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      db-image:
        required: false
        type: string

jobs:
  # https://github.com/dogtagpki/pki/wiki/Publishing-CRL-to-File-System
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libxml2-utils

      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ inputs.os }}-${{ github.run_id }}
          path: pki-runner.tar

      - name: Load runner image
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ inputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Configure file-based CRL publishing
        run: |
          # create CRL folder
          docker exec pki mkdir -p /var/lib/pki/pki-tomcat/crl
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/crl

          # configure file-based CRL publisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.pluginName FileBasedPublisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.crlLinkExt bin
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.directory /var/lib/pki/pki-tomcat/crl
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.latestCrlLink true
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.timeStamp LocalTime
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.zipCRLs false
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.zipLevel 9
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.Filename.b64 false
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.Filename.der true

          # configure CRL publishing rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.enable true
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.mapper NoMap
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.pluginName Rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.predicate ""
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.publisher FileBasedPublisher
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.type crl

          # enable CRL publishing
          docker exec pki pki-server ca-config-set ca.publish.enable true

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec pki pki-server ca-config-set ca.crl.MasterCRL.alwaysUpdate true

          # restart CA subsystem
          docker exec pki pki-server ca-redeploy --wait

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh

      - name: Check initial CRL
        run: |
          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | tee output

          # there should be no CRL files
          cat output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after update
        run: |
          # https://github.com/dogtagpki/pki/wiki/UpdateCRL-Service
          docker exec pki curl \
              -d "xml=true" \
              --cert-type P12 \
              --cert /root/.dogtag/pki-tomcat/ca_admin_cert.p12:Secret.123 \
              -sk \
              https://pki.example.com:8443/ca/agent/ca/updateCRL \
              | xmllint --format -

          # wait for CRL update
          sleep 10

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | tee output

          # there should be one CRL file
          cat output | wc -l > actual
          echo "1" > expected
          diff expected actual

          FILENAME=$(cat output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in $FILENAME \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after cert revocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | sort | tee output

          # there should be two CRL files
          cat output | wc -l > actual
          echo "2" > expected
          diff expected actual

          FILENAME=$(tail -1 output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in $FILENAME \
              -inform DER \
              -text \
              -noout | tee output

          # there should be one cert in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "1" > expected
          diff expected actual

      - name: Check CRL after cert unrevocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | sort | tee output

          # there should be three CRL files
          cat output | wc -l > actual
          echo "3" > expected
          diff expected actual

          FILENAME=$(tail -1 output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in $FILENAME \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-publishing-crl-file-${{ inputs.os }}
          path: |
            /tmp/artifacts/pki
