name: IPA Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: /var/cache/dnf
          key: fedora:${{ matrix.os }}-ipa-${{ hashFiles('pki.spec') }}

      - name: Install dependencies
        run: |
          # keep packages after installation
          echo "keepcache=True" >> /etc/dnf/dnf.conf
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck
          # don't cache COPR packages
          rm -f `find /var/cache/dnf -name '*.rpm' | grep '/var/cache/dnf/copr:'`

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,kra,acme --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: tests/ipa/Dockerfile
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: ipa-runner
          target: ipa-runner
          outputs: type=docker,dest=ipa-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: ipa-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ipa-runner.tar

  ipa-test:
    name: Testing IPA
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: ipa-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ipa-runner.tar

      - name: Load runner image
        run: docker load --input ipa-runner.tar

      - name: Run IPA container
        run: |
          tests/bin/runner-init.sh ipa
        env:
          IMAGE: ipa-runner
          HOSTNAME: ipa.example.com

      - name: Install IPA server
        run: |
          docker exec ipa sysctl net.ipv6.conf.lo.disable_ipv6=0
          docker exec ipa ipa-server-install \
              -U \
              --domain example.com \
              -r EXAMPLE.COM \
              -p Secret.123 \
              -a Secret.123 \
              --no-host-dns \
              --no-ntp
          docker exec ipa bash -c "echo Secret.123 | kinit admin"
          docker exec ipa ipa ping

          docker exec ipa pki-server cert-export ca_signing --cert-file ca_signing.crt

      - name: Check DS certs
        run: |
          docker exec ipa ls -la /etc/dirsrv/slapd-EXAMPLE-COM
          docker exec ipa pki -d /etc/dirsrv/slapd-EXAMPLE-COM nss-cert-find
          docker exec ipa pki -d /etc/dirsrv/slapd-EXAMPLE-COM nss-cert-show "EXAMPLE.COM IPA CA"
          docker exec ipa pki -d /etc/dirsrv/slapd-EXAMPLE-COM nss-cert-show "Server-Cert"
          docker exec ipa pki \
              -d /etc/dirsrv/slapd-EXAMPLE-COM \
              -C /etc/dirsrv/slapd-EXAMPLE-COM/pwdfile.txt \
              nss-key-find

      - name: Check PKI certs
        run: |
          docker exec ipa ls -la /etc/pki/pki-tomcat/alias
          docker exec ipa pki-server cert-find

      - name: Check CA admin cert
        run: |
          docker exec ipa ls -la /root/.dogtag/pki-tomcat
          docker exec ipa openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: "Check CA admin PKCS #12 file"
        run: |
          docker exec ipa pki client-cert-import --ca-cert ca_signing.crt ca_signing
          docker exec ipa pki client-cert-import \
              --pkcs12 /root/ca-agent.p12 \
              --pkcs12-password Secret.123
          docker exec ipa pki nss-cert-find
          docker exec ipa pki nss-cert-show ipa-ca-agent

      - name: Check CA admin user
        run: |
          docker exec ipa pki -n ipa-ca-agent ca-user-find
          docker exec ipa pki -n ipa-ca-agent ca-user-show admin
          docker exec ipa pki -n ipa-ca-agent ca-user-membership-find admin

      - name: Check RA agent cert
        run: |
          docker exec ipa ls -la /var/lib/ipa
          docker exec ipa openssl x509 -text -noout -in /var/lib/ipa/ra-agent.pem

          # import RA agent cert and key into a PKCS #12 file
          # then import it into the client's NSS database
          docker exec ipa openssl pkcs12 -export \
              -in /var/lib/ipa/ra-agent.pem \
              -inkey /var/lib/ipa/ra-agent.key \
              -out ra-agent.p12 \
              -passout pass:Secret.123 \
              -name ipa-ra-agent
          docker exec ipa pki client-cert-import \
              --pkcs12 ra-agent.p12 \
              --pkcs12-password Secret.123
          docker exec ipa pki nss-cert-find
          docker exec ipa pki nss-cert-show ipa-ra-agent

      - name: Check RA agent user
        run: |
          docker exec ipa pki -n ipa-ca-agent ca-user-show ipara
          docker exec ipa pki -n ipa-ca-agent ca-user-membership-find ipara

      - name: Check HTTPD certs
        run: |
          docker exec ipa ls -la /var/lib/ipa/certs
          docker exec ipa openssl x509 -text -noout -in /var/lib/ipa/certs/httpd.crt

      - name: Install KRA
        run: |
          docker exec ipa ipa-kra-install -p Secret.123
          docker exec ipa pki-server ca-config-find | grep ca.connector.KRA

      - name: Run PKI healthcheck
        run: docker exec ipa pki-healthcheck --failures-only

      - name: Configure test environment
        run: |
          docker exec ipa bash -c "cp -r /etc/ipa/* ~/.ipa"
          docker exec ipa bash -c "echo Secret.123 > ~/.ipa/.dmpw"
          docker exec ipa bash -c "echo 'wait_for_dns=5' >> ~/.ipa/default.conf"

      - name: Run test_caacl_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_caacl_plugin.py

      - name: Run test_caacl_profile_enforcement.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_caacl_profile_enforcement.py

      - name: Run test_cert_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_cert_plugin.py

      - name: Run test_certprofile_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_certprofile_plugin.py

      - name: Run test_ca_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_ca_plugin.py

      - name: Run test_vault_plugin.py
        run: |
          docker exec ipa ipa-run-tests -x --verbose \
              test_xmlrpc/test_vault_plugin.py

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ipa --instance EXAMPLE-COM
          tests/bin/pki-artifacts-save.sh ipa
          tests/bin/ipa-artifacts-save.sh ipa
        continue-on-error: true

      - name: Remove IPA server
        run: docker exec ipa ipa-server-install --uninstall -U

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ipa-${{ matrix.os }}
          path: |
            /tmp/artifacts/ipa

  ipa-acme-test:
    name: Testing IPA ACME
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: ipa-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ipa-runner.tar

      - name: Load runner image
        run: docker load --input ipa-runner.tar

      - name: Create network
        run: docker network create example

      - name: Run IPA container
        run: |
          tests/bin/runner-init.sh ipa
        env:
          IMAGE: ipa-runner
          HOSTNAME: ipa.example.com

      - name: Connect IPA container to network
        run: docker network connect example ipa --alias ipa.example.com --alias ipa-ca.example.com

      - name: Install IPA server in IPA container
        run: |
          docker exec ipa sysctl net.ipv6.conf.lo.disable_ipv6=0
          docker exec ipa ipa-server-install \
              -U \
              --domain example.com \
              -r EXAMPLE.COM \
              -p Secret.123 \
              -a Secret.123 \
              --no-host-dns \
              --no-ntp
          docker exec ipa bash -c "echo Secret.123 | kinit admin"
          docker exec ipa ipa ping

      - name: Install KRA in IPA container
        run: |
          docker exec ipa ipa-kra-install -p Secret.123
          docker exec ipa pki-server ca-config-find | grep ca.connector.KRA

      - name: Verify CA admin in IPA container
        run: |
          docker exec ipa pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec ipa pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec ipa pki client-cert-import \
              --pkcs12 /root/ca-agent.p12 \
              --pkcs12-password Secret.123
          docker exec ipa pki -n ipa-ca-agent ca-user-show admin

      - name: Enable ACME in IPA container
        run: |
          docker exec ipa ipa-acme-manage enable
          docker exec ipa ipa-acme-manage status
          echo "Available" > expected
          docker exec ipa bash -c "pki acme-info | sed -n 's/\s*Status:\s\+\(\S\+\).*/\1/p' > ${SHARED}/actual"
          diff expected actual

      - name: Run client container
        run: |
          docker run \
              --detach \
              --name=client \
              --hostname=client.example.com \
              --privileged \
              --tmpfs /tmp \
              --tmpfs /run \
              ipa-runner \
              /usr/sbin/init

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Install IPA client in client container
        run: |
          docker exec client sysctl net.ipv6.conf.lo.disable_ipv6=0
          docker exec client ipa-client-install \
              -U \
              --server=ipa.example.com \
              --domain=example.com \
              --realm=EXAMPLE.COM \
              -p admin \
              -w Secret.123 \
              --no-ntp
          docker exec client bash -c "echo Secret.123 | kinit admin"
          docker exec client klist

      - name: Verify certbot in client container
        run: |
          docker exec client certbot register \
              --server https://ipa-ca.example.com/acme/directory \
              --email user1@example.com \
              --agree-tos \
              --non-interactive
          docker exec client certbot certonly \
              --server https://ipa-ca.example.com/acme/directory \
              -d client.example.com \
               --standalone \
              --non-interactive
          docker exec client certbot renew \
              --server https://ipa-ca.example.com/acme/directory \
              --cert-name client.example.com \
              --force-renewal \
              --non-interactive
          docker exec client certbot revoke \
              --server https://ipa-ca.example.com/acme/directory \
              --cert-name client.example.com \
              --non-interactive
          docker exec client certbot update_account \
              --server https://ipa-ca.example.com/acme/directory \
              --email user2@example.com \
              --non-interactive
          docker exec client certbot unregister \
              --server https://ipa-ca.example.com/acme/directory \
              --non-interactive

      - name: Disable ACME in IPA container
        run: |
          docker exec ipa ipa-acme-manage disable
          docker exec ipa ipa-acme-manage status
          echo "Unavailable" > expected
          docker exec ipa bash -c "pki acme-info | sed -n 's/\s*Status:\s\+\(\S\+\).*/\1/p' > ${SHARED}/actual"
          diff expected actual

      - name: Gather artifacts from IPA container
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ipa --instance EXAMPLE-COM
          tests/bin/pki-artifacts-save.sh ipa
          tests/bin/ipa-artifacts-save.sh ipa
        continue-on-error: true

      - name: Remove IPA server from IPA container
        run: docker exec ipa ipa-server-install --uninstall -U

      - name: Upload artifacts from IPA container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ipa-acme-${{ matrix.os }}
          path: |
            /tmp/artifacts/ipa

  ipa-clone-test:
    name: Testing IPA clone
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: ipa-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ipa-runner.tar

      - name: Load runner image
        run: docker load --input ipa-runner.tar

      - name: Create network
        run: docker network create example

      - name: Run primary container
        run: |
          tests/bin/runner-init.sh primary
        env:
          IMAGE: ipa-runner
          HOSTNAME: primary.example.com

      - name: Connect primary container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install IPA server in primary container
        run: |
          docker exec primary sysctl net.ipv6.conf.lo.disable_ipv6=0
          docker exec primary ipa-server-install \
              -U \
              --domain example.com \
              -r EXAMPLE.COM \
              -p Secret.123 \
              -a Secret.123 \
              --no-host-dns \
              --no-ntp
          docker exec primary bash -c "echo Secret.123 | kinit admin"
          docker exec primary klist

      - name: Install KRA in primary container
        run: |
          docker exec primary ipa-kra-install -p Secret.123
          docker exec primary pki-server ca-config-find | grep ca.connector.KRA

      - name: Run secondary container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          IMAGE: ipa-runner
          HOSTNAME: secondary.example.com

      - name: Connect secondary container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install IPA client in secondary container
        run: |
          docker exec secondary sysctl net.ipv6.conf.lo.disable_ipv6=0
          docker exec secondary ipa-client-install \
              -U \
              --server=primary.example.com \
              --domain=example.com \
              --realm=EXAMPLE.COM \
              -p admin \
              -w Secret.123 \
              --no-ntp
          docker exec secondary bash -c "echo Secret.123 | kinit admin"
          docker exec secondary klist

      - name: Promote IPA client into IPA replica in secondary container
        run: |
          docker exec secondary ipa-replica-install \
              --no-host-dns \
              --setup-ca
          docker exec secondary pki-server ca-user-find

      - name: Install KRA in secondary container
        run: |
          docker exec secondary ipa-kra-install -p Secret.123
          docker exec secondary pki-server ca-config-find | grep ca.connector.KRA
          docker exec primary pki-server ca-config-find | grep ca.connector.KRA

      # TODO: Enable the following tests after the following issue is fixed:
      # https://pagure.io/freeipa/issue/9099
      #
      # - name: Run PKI healthcheck in primary container
      #   run: docker exec primary pki-healthcheck --failures-only
      #
      # - name: Run PKI healthcheck in secondary container
      #   run: docker exec secondary pki-healthcheck --failures-only

      - name: Verify CA admin
        run: |
          docker exec primary cp /root/ca-agent.p12 ${SHARED}/ca-agent.p12
          docker exec secondary pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec secondary pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec secondary pki client-cert-import --pkcs12 ${SHARED}/ca-agent.p12 --pkcs12-password Secret.123
          docker exec secondary pki -n ipa-ca-agent ca-user-show admin

      - name: Remove IPA server from secondary container
        run: docker exec secondary ipa-server-install --uninstall -U

      - name: Remove IPA server from primary container
        run: docker exec primary ipa-server-install --uninstall -U --ignore-last-of-role

      - name: Gather artifacts from primary container
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh primary --instance EXAMPLE-COM
          tests/bin/pki-artifacts-save.sh primary
          tests/bin/ipa-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary container
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh secondary --instance EXAMPLE-COM
          tests/bin/pki-artifacts-save.sh secondary
          tests/bin/ipa-artifacts-save.sh secondary
        continue-on-error: true

      - name: Disconnect secondary container from network
        run: docker network disconnect example secondary

      - name: Disconnect primary container from network
        run: docker network disconnect example primary

      - name: Remove network
        run: docker network rm example

      - name: Upload artifacts from primary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ipa-clone-primary-${{ matrix.os }}
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary container
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ipa-clone-secondary-${{ matrix.os }}
          path: |
            /tmp/artifacts/secondary
