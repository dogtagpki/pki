name: CA migration to container

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh \
              --image=${{ env.DB_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=pki.example.com \
              --network=example \
              --network-alias=pki.example.com \
              pki

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_ds_password=Secret.123 \
              -v

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh \
              --hostname=client.example.com \
              --network=example \
              --network-alias=client.example.com \
              client

      - name: Check admin user
        run: |
          # install CA signing cert
          docker exec pki pki-server cert-export \
              --cert-file $SHARED/ca_signing.crt \
              ca_signing
          docker exec client pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          # install admin cert
          docker exec pki cp \
              /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              $SHARED/admin.p12
          docker exec client pki pkcs12-import \
              --pkcs12 $SHARED/admin.p12 \
              --password Secret.123

          docker exec client pki \
              -U https://pki.example.com:8443 \
              -n caadmin \
              ca-user-show \
              caadmin

      - name: Remove CA
        run: |
          docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Install Podman
        run: |
          docker exec pki dnf install -y podman
          docker exec pki podman info

      - name: Load PKI images into root user's space
        run: |
          docker exec pki podman load --input $SHARED/pki-images.tar
          docker exec pki podman images

      - name: Create PKI CA systemd service
        run: |
          # create container unit file
          # https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html
          docker exec -i pki tee /etc/containers/systemd/pki-ca.container << EOF
          [Unit]
          Description=PKI CA

          [Container]
          Image=pki-ca
          Network=host
          # run container as PKI user
          User=pkiuser
          Group=pkiuser
          # use shared folders in PKI home directory
          Volume=/etc/pki/pki-tomcat:/conf
          Volume=/var/log/pki/pki-tomcat:/logs
          # configure database
          Environment=PKI_DS_URL=ldap://ds.example.com:3389
          Environment=PKI_DS_PASSWORD=Secret.123
          # configure cert nicknames
          Environment=PKI_CA_SIGNING_NICKNAME=ca_signing
          Environment=PKI_OCSP_SIGNING_NICKNAME=ca_ocsp_signing
          Environment=PKI_AUDIT_SIGNING_NICKNAME=ca_audit_signing
          Environment=PKI_SUBSYSTEM_NICKNAME=subsystem
          Environment=PKI_SSLSERVER_NICKNAME=sslserver
          Environment=PKI_ADMIN_NICKNAME=caadmin

          [Install]
          WantedBy=multi-user.target
          EOF

          # check service unit file generated by Quadlet
          docker exec pki /usr/libexec/podman/quadlet -dryrun

          # reload service unit files
          docker exec pki systemctl daemon-reload

      - name: Run PKI CA systemd service
        run: |
          docker exec pki systemctl start pki-ca.service
          docker exec pki podman ps

          # wait for server to start
          docker exec pki curl \
              --retry 180 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://pki.example.com:8443

          # wait for CA to start
          sleep 10

      - name: Check conf dir
        if: always()
        run: |
          docker exec pki ls -l /etc/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
              | tee output

          # everything should be owned by pkiuser group
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwxrwx pkiuser Catalina
          drwxrwxrwx pkiuser alias
          drwxrwxrwx pkiuser ca
          -rw-rw-rw- pkiuser catalina.policy
          lrwxrwxrwx pkiuser catalina.properties -> /usr/share/pki/server/conf/catalina.properties
          drwxrwxrwx pkiuser certs
          lrwxrwxrwx pkiuser context.xml -> /etc/tomcat/context.xml
          lrwxrwxrwx pkiuser logging.properties -> /usr/share/pki/server/conf/logging.properties
          -rw-rw-rw- pkiuser password.conf
          -rw-rw-rw- pkiuser server.xml
          -rw-rw-rw- pkiuser serverCertNick.conf
          -rw-rw-rw- pkiuser tomcat.conf
          lrwxrwxrwx pkiuser web.xml -> /etc/tomcat/web.xml
          EOF

          diff expected output

      - name: Check conf/alias dir
        if: always()
        run: |
          docker exec pki ls -l /etc/pki/pki-tomcat/alias \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
              | tee output

          # everything should be owned by pkiuser group
          # TODO: review owners/permissions
          cat > expected << EOF
          -rw-rw-rw- pkiuser ca.crt
          -rw-rw-rw- pkiuser cert9.db
          -rw-rw-rw- pkiuser key4.db
          -rw-rw-rw- pkiuser pkcs11.txt
          EOF

          diff expected output

      - name: Check conf/ca dir
        if: always()
        run: |
          docker exec pki ls -l /etc/pki/pki-tomcat/ca \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
                  -e '/^\S* *\S* *\S* *CS.cfg.bak /d' \
              | tee output

          # everything should be owned by pkiuser group
          # TODO: review owners/permissions
          cat > expected << EOF
          -rw-rw-rw- pkiuser CS.cfg
          -rw-rw-rw- pkiuser adminCert.profile
          drwxrwxrwx pkiuser archives
          -rw-rw-rw- pkiuser caAuditSigningCert.profile
          -rw-rw-rw- pkiuser caCert.profile
          -rw-rw-rw- pkiuser caOCSPCert.profile
          drwxrwxrwx pkiuser emails
          -rw-rw-rw- pkiuser flatfile.txt
          drwxrwxrwx pkiuser profiles
          -rw-rw-rw- pkiuser proxy.conf
          -rw-rw-rw- pkiuser registry.cfg
          -rw-rw-rw- pkiuser serverCert.profile
          -rw-rw-rw- pkiuser subsystemCert.profile
          EOF

          diff expected output

      - name: Check logs dir
        if: always()
        run: |
          docker exec pki ls -l /var/log/pki/pki-tomcat \
              | sed \
                  -e '/^total/d' \
                  -e 's/^\(\S*\) *\S* *\S* *\(\S*\) *\S* *\S* *\S* *\S* *\(.*\)$/\1 \2 \3/' \
              | tee output

          DATE=$(date +'%Y-%m-%d')

          # everything should be owned by pkiuser group
          # TODO: review owners/permissions
          cat > expected << EOF
          drwxrwxrwx pkiuser backup
          drwxrwxrwx pkiuser ca
          -rw-rw-rw- pkiuser catalina.$DATE.log
          -rw-rw-rw- pkiuser host-manager.$DATE.log
          -rw-rw-rw- pkiuser localhost.$DATE.log
          -rw-rw-rw- pkiuser localhost_access_log.$DATE.txt
          -rw-rw-rw- pkiuser manager.$DATE.log
          drwxrwxrwx pkiuser pki
          EOF

          diff expected output

      - name: Check CA admin user
        run: |
          docker exec client pki \
              -U https://pki.example.com:8443 \
              -n caadmin \
              ca-user-show \
              caadmin

      - name: Check cert enrollment
        run: |
          docker exec client pki \
              -U https://pki.example.com:8443 \
              client-cert-request \
              uid=testuser | tee output

          REQUEST_ID=$(sed -n -e 's/^ *Request ID: *\(.*\)$/\1/p' output)
          echo "REQUEST_ID: $REQUEST_ID"

          docker exec client pki \
              -U https://pki.example.com:8443 \
              -n caadmin \
              ca-cert-request-approve \
              $REQUEST_ID \
              --force

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI Tomcat systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check PKI CA systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-ca.service

      - name: Check PKI CA container logs
        if: always()
        run: |
          docker exec pki podman logs systemd-pki-ca 2>&1

      - name: Check CA debug logs
        if: always()
        run: |
          docker exec pki find /var/log/pki/pki-tomcat/ca -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds
          tests/bin/pki-artifacts-save.sh pki

          mkdir -p /tmp/artifacts/ca
          docker exec pki podman logs systemd-pki-ca > /tmp/artifacts/ca/container.out 2> /tmp/artifacts/ca/container.err

          mkdir -p /tmp/artifacts/client
          docker logs client > /tmp/artifacts/client/container.out 2> /tmp/artifacts/client/container.err

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ca-container-migration
          path: /tmp/artifacts
