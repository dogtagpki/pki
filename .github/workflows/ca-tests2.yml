name: CA Tests 2

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-ca-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

  ca-clone-test:
    name: CA clone
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-clone-test.yml
    with:
      os: ${{ matrix.os }}

  ca-secure-ds-test:
    name: CA with secure DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-secure-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-clone-secure-ds-test:
    name: CA clone with secure DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-clone-secure-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-rsnv1-test:
    name: CA with RSNv1
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-rsnv1-test.yml
    with:
      os: ${{ matrix.os }}

  ca-sequential-test:
    name: CA with Sequential Serial Numbers
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-sequential-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-ca-cert-test:
    name: CA with CA cert publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-ca-cert-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-user-cert-test:
    name: CA with user cert publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-user-cert-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-crl-file-test:
    name: CA with file-based CRL publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-crl-file-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-crl-ldap-test:
    name: CA with LDAP-based CRL publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-crl-ldap-test.yml
    with:
      os: ${{ matrix.os }}

  ca-notification-request-test:
    name: CA with request notification
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-notification-request-test.yml
    with:
      os: ${{ matrix.os }}

  scep-test:
    name: SCEP responder
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/scep-test.yml
    with:
      os: ${{ matrix.os }}
