name: CA Tests 2

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-ca-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

  ca-clone-test:
    name: CA clone
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-clone-test.yml
    with:
      os: ${{ matrix.os }}

  ca-secure-ds-test:
    name: CA with secure DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-secure-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-clone-secure-ds-test:
    name: CA clone with secure DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-clone-secure-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-rsnv1-test:
    name: CA with RSNv1
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-rsnv1-test.yml
    with:
      os: ${{ matrix.os }}

  ca-sequential-test:
    name: Testing CA with Sequential Serial Numbers
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=legacy \
              -D pki_request_id_generator=legacy \
              -v

      # https://github.com/dogtagpki/pki/wiki/Configuring-CA-with-Random-Serial-Numbers-v3
      - name: Switch to RSNv3
        run: |
          # switch cert request ID generator to RSNv3
          docker exec pki pki-server ca-config-unset dbs.beginRequestNumber
          docker exec pki pki-server ca-config-unset dbs.endRequestNumber
          docker exec pki pki-server ca-config-unset dbs.requestIncrement
          docker exec pki pki-server ca-config-unset dbs.requestLowWaterMark
          docker exec pki pki-server ca-config-unset dbs.requestCloneTransferNumber
          docker exec pki pki-server ca-config-unset dbs.requestRangeDN

          docker exec pki pki-server ca-config-set dbs.request.id.generator random
          docker exec pki pki-server ca-config-set dbs.request.id.length 128

          # switch cert ID generator to RSNv3
          docker exec pki pki-server ca-config-unset dbs.beginSerialNumber
          docker exec pki pki-server ca-config-unset dbs.endSerialNumber
          docker exec pki pki-server ca-config-unset dbs.serialIncrement
          docker exec pki pki-server ca-config-unset dbs.serialLowWaterMark
          docker exec pki pki-server ca-config-unset dbs.serialCloneTransferNumber
          docker exec pki pki-server ca-config-unset dbs.serialRangeDN

          docker exec pki pki-server ca-config-set dbs.cert.id.generator random
          docker exec pki pki-server ca-config-set dbs.cert.id.length 128

          # restart PKI server
          docker exec pki pki-server restart --wait

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Check cert requests in CA
        run: |
          docker exec pki pki -n caadmin ca-cert-request-find

      - name: Check certs in CA
        run: |
          docker exec pki pki ca-cert-find

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-sequential-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # https://github.com/dogtagpki/pki/wiki/Publishing-CA-Certificate-to-LDAP-Server
  ca-publishing-ca-cert-test:
    name: Testing CA with CA cert publishing
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Export CA cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 \
              -in ca_signing.crt \
              -text \
              -noout | tee ca_signing.txt

      - name: Prepare CA cert publishing subtree
        run: |
          docker exec -i pki ldapadd \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: dc=crl,dc=pki,dc=example,dc=com
          objectClass: domain
          dc: crl
          EOF

      - name: Configure CA cert publishing
        run: |
          # configure LDAP connection
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.enable true
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapauth.authtype BasicAuth
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapauth.bindDN "cn=Directory Manager"
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapauth.bindPWPrompt internaldb
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapconn.host ds.example.com
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapconn.port 3389
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapconn.secureConn false

          # configure LDAP-based CA cert publisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.LdapCaCertPublisher.caCertAttr "cACertificate;binary"
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.LdapCaCertPublisher.caObjectClass pkiCA
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.LdapCaCertPublisher.pluginName LdapCaCertPublisher

          # configure CA cert mapper
          docker exec pki pki-server ca-config-set ca.publish.mapper.instance.LdapCaCertMap.createCAEntry true
          docker exec pki pki-server ca-config-set ca.publish.mapper.instance.LdapCaCertMap.dnPattern "cn=\$subj.cn,dc=crl,dc=pki,dc=example,dc=com"
          docker exec pki pki-server ca-config-set ca.publish.mapper.instance.LdapCaCertMap.pluginName LdapCaSimpleMap

          # configure CA cert publishing rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCaCertRule.enable true
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCaCertRule.mapper LdapCaCertMap
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCaCertRule.pluginName Rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCaCertRule.predicate ""
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCaCertRule.publisher LdapCaCertPublisher
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCaCertRule.type cacert

          # enable publishing
          docker exec pki pki-server ca-config-set ca.publish.enable true

          # restart CA subsystem
          docker exec pki pki-server ca-undeploy --wait
          docker exec pki pki-server ca-deploy --wait

      - name: Check published CA cert
        run: |
          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=crl,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -t \
              "(objectClass=pkiCA)" | tee output

          # there should be one CA cert attribute
          grep "cACertificate;binary:" output | wc -l > actual
          echo "1" > expected
          diff expected actual

          FILENAME=$(sed -n 's/cACertificate;binary:< file:\/\/\(.*\)$/\1/p' output)
          echo "FILENAME: $FILENAME"

          # compare exported and published CA certs
          docker exec pki openssl x509 \
              -in "$FILENAME" \
              -inform DER \
              -text \
              -noout | tee output
          diff ca_signing.txt output

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ca-ldap-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  ca-publishing-user-cert-test:
    name: CA with user cert publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-user-cert-test.yml
    with:
      os: ${{ matrix.os }}

  # https://github.com/dogtagpki/pki/wiki/Publishing-CRL-to-File-System
  ca-publishing-crl-file-test:
    name: Testing CA with file-based CRL publishing
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get -y install libxml2-utils

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Configure file-based CRL publishing
        run: |
          # create CRL folder
          docker exec pki mkdir -p /var/lib/pki/pki-tomcat/crl
          docker exec pki chown pkiuser.pkiuser /var/lib/pki/pki-tomcat/crl

          # configure file-based CRL publisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.pluginName FileBasedPublisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.crlLinkExt bin
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.directory /var/lib/pki/pki-tomcat/crl
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.latestCrlLink true
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.timeStamp LocalTime
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.zipCRLs false
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.zipLevel 9
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.Filename.b64 false
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.FileBasedPublisher.Filename.der true

          # configure CRL publishing rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.enable true
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.mapper NoMap
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.pluginName Rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.predicate ""
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.publisher FileBasedPublisher
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.FileCrlRule.type crl

          # enable CRL publishing
          docker exec pki pki-server ca-config-set ca.publish.enable true

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec pki pki-server ca-config-set ca.crl.MasterCRL.alwaysUpdate true

          # restart PKI server
          docker exec pki pki-server restart --wait

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh

      - name: Check initial CRL
        run: |
          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | tee output

          # there should be no CRL files
          cat output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after update
        run: |
          # https://github.com/dogtagpki/pki/wiki/UpdateCRL-Service
          docker exec pki curl \
              -d "xml=true" \
              --cert-type P12 \
              --cert /root/.dogtag/pki-tomcat/ca_admin_cert.p12:Secret.123 \
              -sk \
              https://pki.example.com:8443/ca/agent/ca/updateCRL \
              | xmllint --format -

          # wait for CRL update
          sleep 10

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | tee output

          # there should be one CRL file
          cat output | wc -l > actual
          echo "1" > expected
          diff expected actual

          FILENAME=$(cat output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in $FILENAME \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after cert revocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | sort | tee output

          # there should be two CRL files
          cat output | wc -l > actual
          echo "2" > expected
          diff expected actual

          FILENAME=$(tail -1 output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in $FILENAME \
              -inform DER \
              -text \
              -noout | tee output

          # there should be one cert in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "1" > expected
          diff expected actual

      - name: Check CRL after cert unrevocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

          # check CRL files
          docker exec pki find /var/lib/pki/pki-tomcat/crl -name "MasterCRL-*" | sort | tee output

          # there should be three CRL files
          cat output | wc -l > actual
          echo "3" > expected
          diff expected actual

          FILENAME=$(tail -1 output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in $FILENAME \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: crl-file-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  # https://github.com/dogtagpki/pki/wiki/Publishing-CRL-to-LDAP-Server
  ca-publishing-crl-ldap-test:
    name: Testing CA with LDAP-based CRL publishing
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get -y install libxml2-utils

      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          COPR_REPO: ${{ needs.init.outputs.repo }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Prepare CRL publishing subtree
        run: |
          docker exec -i pki ldapadd \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: dc=crl,dc=pki,dc=example,dc=com
          objectClass: domain
          dc: crl
          EOF

      - name: Configure CRL publishing
        run: |
          # configure LDAP connection
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.enable true
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapauth.authtype BasicAuth
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapauth.bindDN "cn=Directory Manager"
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapauth.bindPWPrompt internaldb
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapconn.host ds.example.com
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapconn.port 3389
          docker exec pki pki-server ca-config-set ca.publish.ldappublish.ldap.ldapconn.secureConn false

          # configure LDAP-based CRL publisher
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.LdapCrlPublisher.crlAttr "certificateRevocationList;binary"
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.LdapCrlPublisher.crlObjectClass pkiCA
          docker exec pki pki-server ca-config-set ca.publish.publisher.instance.LdapCrlPublisher.pluginName LdapCrlPublisher

          # configure CRL mapper
          docker exec pki pki-server ca-config-set ca.publish.mapper.instance.LdapCrlMap.createCAEntry true
          docker exec pki pki-server ca-config-set ca.publish.mapper.instance.LdapCrlMap.dnPattern "cn=\$subj.cn,dc=crl,dc=pki,dc=example,dc=com"
          docker exec pki pki-server ca-config-set ca.publish.mapper.instance.LdapCrlMap.pluginName LdapCaSimpleMap

          # configure CRL publishing rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCrlRule.enable true
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCrlRule.mapper LdapCrlMap
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCrlRule.pluginName Rule
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCrlRule.predicate ""
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCrlRule.publisher LdapCrlPublisher
          docker exec pki pki-server ca-config-set ca.publish.rule.instance.LdapCrlRule.type crl

          # enable CRL publishing
          docker exec pki pki-server ca-config-set ca.publish.enable true

          # set buffer size to 0 so that revocation will take effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # update CRL immediately after each cert revocation
          docker exec pki pki-server ca-config-set ca.crl.MasterCRL.alwaysUpdate true

          # restart CA subsystem
          docker exec pki pki-server ca-undeploy --wait
          docker exec pki pki-server ca-deploy --wait

      - name: Check CA signing cert
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_signing.crt

      - name: Check CA OCSP signing cert
        run: |
          docker exec pki pki-server cert-export ca_ocsp_signing --cert-file ca_ocsp_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_ocsp_signing.crt

      - name: Check CA audit signing cert
        run: |
          docker exec pki pki-server cert-export ca_audit_signing --cert-file ca_audit_signing.crt
          docker exec pki openssl x509 -text -noout -in ca_audit_signing.crt

      - name: Check subsystem cert
        run: |
          docker exec pki pki-server cert-export subsystem --cert-file subsystem.crt
          docker exec pki openssl x509 -text -noout -in subsystem.crt

      - name: Check SSL server cert
        run: |
          docker exec pki pki-server cert-export sslserver --cert-file sslserver.crt
          docker exec pki openssl x509 -text -noout -in sslserver.crt

      - name: Check CA admin cert
        run: |
          docker exec pki openssl x509 -text -noout -in /root/.dogtag/pki-tomcat/ca_admin.cert

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --failures-only

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki client-cert-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh

      - name: Check initial CRL
        run: |
          # check CRL LDAP entries
          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=crl,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -t \
              "(objectClass=pkiCA)" | tee output

          # there should be no CRL attributes
          grep "certificateRevocationList;binary:" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after update
        run: |
          # https://github.com/dogtagpki/pki/wiki/UpdateCRL-Service
          docker exec pki curl \
              -d "xml=true" \
              --cert-type P12 \
              --cert /root/.dogtag/pki-tomcat/ca_admin_cert.p12:Secret.123 \
              -sk \
              https://pki.example.com:8443/ca/agent/ca/updateCRL \
              | xmllint --format -

          # wait for CRL update
          sleep 10

          # check CRL LDAP entries
          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=crl,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -t \
              "(objectClass=pkiCA)" | tee output

          # there should be one CRL attribute
          grep "certificateRevocationList;binary:" output | wc -l > actual
          echo "1" > expected
          diff expected actual

          FILENAME=$(sed -n 's/certificateRevocationList;binary:< file:\/\/\(.*\)$/\1/p' output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in "$FILENAME" \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Check CRL after cert revocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh

          # check CRL LDAP entries
          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=crl,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -t \
              "(objectClass=pkiCA)" | tee output

          # there should be one CRL attribute
          grep "certificateRevocationList;binary:" output | wc -l > actual
          echo "1" > expected
          diff expected actual

          FILENAME=$(sed -n 's/certificateRevocationList;binary:< file:\/\/\(.*\)$/\1/p' output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in "$FILENAME" \
              -inform DER \
              -text \
              -noout | tee output

          # there should be one cert in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "1" > expected
          diff expected actual

      - name: Check CRL after cert unrevocation
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

          # check CRL LDAP entries
          docker exec pki ldapsearch \
              -H ldap://ds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=crl,dc=pki,dc=example,dc=com" \
              -o ldif_wrap=no \
              -t \
              "(objectClass=pkiCA)" | tee output

          # there should be one CRL attribute
          grep "certificateRevocationList;binary:" output | wc -l > actual
          echo "1" > expected
          diff expected actual

          FILENAME=$(sed -n 's/certificateRevocationList;binary:< file:\/\/\(.*\)$/\1/p' output)
          echo "FILENAME: $FILENAME"

          # check the latest CRL
          docker exec pki openssl crl \
              -in "$FILENAME" \
              -inform DER \
              -text \
              -noout | tee output

          # there should be no certs in the latest CRL
          sed -n "s/^\s*\(Serial Number:.*\)\s*$/\1/p" output | wc -l > actual
          echo "0" > expected
          diff expected actual

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: crl-ldap-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki

  scep-test:
    name: Testing SCEP responder
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: |
          docker network connect example client --alias client.example.com
          docker inspect -f '{{ .NetworkSettings.Networks.example.IPAddress }}' client > client.ip
          echo "Client's IP: `cat client.ip`"

      - name: Install CA in PKI container
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      # https://github.com/dogtagpki/pki/wiki/Configuring-SCEP-Responder
      - name: Configure SCEP in CA
        run: |
          docker exec pki pki-server ca-config-set ca.scep.enable true
          docker exec pki bash -c "echo UID:$(cat client.ip) > /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki bash -c "echo PWD:Secret.123 >> /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki pki-server restart --wait

      - name: Install SSCEP in client container
        run: |
          docker exec client dnf install -y sscep

      # https://github.com/dogtagpki/pki/wiki/Certificate-Enrollment-with-SSCEP
      - name: Get CA certificate using SSCEP
        run: |
          docker exec client sscep getca \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt
          docker exec client openssl x509 -text -noout -in ca.crt

      - name: Enroll certificate with IP address using SSCEP
        run: |
          docker exec client mkrequest -ip $(cat client.ip) Secret.123
          docker exec client openssl req -text -noout -in local.csr
          docker exec client sscep enroll \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt \
              -k local.key \
              -r local.csr \
              -l local.crt \
              -E 3des \
              -S sha256
          docker exec client openssl x509 -text -noout -in local.crt

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA from PKI container
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: scep-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki
