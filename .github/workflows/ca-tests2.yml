name: CA Tests 2

on: [push, pull_request]

jobs:
  init:
    name: Initializing workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
      db-image: ${{ steps.init.outputs.db-image }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
          BASE64_DATABASE: ${{ secrets.BASE64_DATABASE }}
        run: |
          tests/bin/init-workflow.sh

  # docs/development/Building_PKI.md
  build:
    name: Building PKI
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    container: registry.fedoraproject.org/fedora:${{ matrix.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          dnf install -y dnf-plugins-core rpm-build moby-engine
          dnf copr enable -y ${{ needs.init.outputs.repo }}
          dnf builddep -y --allowerasing --spec ./pki.spec --nogpgcheck

      - name: Build PKI packages
        run: ./build.sh --with-pkgs=base,server,ca,tests --with-timestamp --work-dir=build rpm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
          tags: pki-runner
          target: pki-runner
          outputs: type=docker,dest=pki-ca-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

  ca-clone-test:
    name: CA clone
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-clone-test.yml
    with:
      os: ${{ matrix.os }}

  ca-secure-ds-test:
    name: CA with secure DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-secure-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-clone-secure-ds-test:
    name: CA clone with secure DS
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-clone-secure-ds-test.yml
    with:
      os: ${{ matrix.os }}

  ca-rsnv1-test:
    name: CA with RSNv1
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-rsnv1-test.yml
    with:
      os: ${{ matrix.os }}

  ca-sequential-test:
    name: CA with Sequential Serial Numbers
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-sequential-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-ca-cert-test:
    name: CA with CA cert publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-ca-cert-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-user-cert-test:
    name: CA with user cert publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-user-cert-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-crl-file-test:
    name: CA with file-based CRL publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-crl-file-test.yml
    with:
      os: ${{ matrix.os }}

  ca-publishing-crl-ldap-test:
    name: CA with LDAP-based CRL publishing
    needs: [init, build]
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    uses: ./.github/workflows/ca-publishing-crl-ldap-test.yml
    with:
      os: ${{ matrix.os }}

  scep-test:
    name: Testing SCEP responder
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: pki-ca-runner-${{ matrix.os }}-${{ github.run_id }}
          path: pki-ca-runner.tar

      - name: Load runner image
        run: docker load --input pki-ca-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ needs.init.outputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: |
          docker network connect example client --alias client.example.com
          docker inspect -f '{{ .NetworkSettings.Networks.example.IPAddress }}' client > client.ip
          echo "Client's IP: `cat client.ip`"

      - name: Install CA in PKI container
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      # https://github.com/dogtagpki/pki/wiki/Configuring-SCEP-Responder
      - name: Configure SCEP in CA
        run: |
          docker exec pki pki-server ca-config-set ca.scep.enable true
          docker exec pki bash -c "echo UID:$(cat client.ip) > /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki bash -c "echo PWD:Secret.123 >> /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki pki-server restart --wait

      - name: Install SSCEP in client container
        run: |
          docker exec client dnf install -y sscep

      # https://github.com/dogtagpki/pki/wiki/Certificate-Enrollment-with-SSCEP
      - name: Get CA certificate using SSCEP
        run: |
          docker exec client sscep getca \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt
          docker exec client openssl x509 -text -noout -in ca.crt

      - name: Enroll certificate with IP address using SSCEP
        run: |
          docker exec client mkrequest -ip $(cat client.ip) Secret.123
          docker exec client openssl req -text -noout -in local.csr
          docker exec client sscep enroll \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt \
              -k local.key \
              -r local.csr \
              -l local.crt \
              -E 3des \
              -S sha256
          docker exec client openssl x509 -text -noout -in local.crt

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA from PKI container
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: scep-${{ matrix.os }}
          path: |
            /tmp/artifacts/pki
