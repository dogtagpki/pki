name: SCEP responder

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      db-image:
        required: false
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve pki-runner image
        uses: actions/cache@v3
        with:
          key: pki-runner-${{ inputs.os }}-${{ github.sha }}
          path: pki-runner.tar

      - name:  pki-runner imagemage
        run: docker load --input pki-runner.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ inputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: |
          docker network connect example client --alias client.example.com
          docker inspect -f '{{ .NetworkSettings.Networks.example.IPAddress }}' client > client.ip
          echo "Client's IP: `cat client.ip`"

      - name: Install CA in PKI container
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec pki pki-server cert-find

      # https://github.com/dogtagpki/pki/wiki/Configuring-SCEP-Responder
      - name: Configure SCEP in CA
        run: |
          docker exec pki pki-server ca-config-set ca.scep.enable true

          docker exec pki bash -c "echo UID:$(cat client.ip) > /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki bash -c "echo PWD:Secret.123 >> /etc/pki/pki-tomcat/ca/flatfile.txt"

          # restart CA subsystem
          docker exec pki pki-server ca-redeploy --wait

      - name: Install SSCEP in client container
        run: |
          docker exec client dnf install -y sscep

      # https://github.com/dogtagpki/pki/wiki/Certificate-Enrollment-with-SSCEP
      - name: Get CA certificate using SSCEP
        run: |
          docker exec client sscep getca \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt
          docker exec client openssl x509 -text -noout -in ca.crt

      - name: Enroll certificate with IP address using SSCEP and DES3
        run: |
          docker exec client mkrequest -ip $(cat client.ip) Secret.123
          docker exec client openssl req -text -noout -in local.csr
          docker exec client sscep enroll \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt \
              -k local.key \
              -r local.csr \
              -l local.crt \
              -E 3des \
              -S sha256
          docker exec client openssl x509 -text -noout -in local.crt

      - name: Configure SCEP in CA with AES
        run: |
          docker exec pki pki-server ca-config-set ca.scep.encryptionAlgorithm AES 
          docker exec pki pki-server ca-config-set ca.scep.allowedEncryptionAlgorithms DES3,AES 
          docker exec pki bash -c "echo UID:$(cat client.ip) > /etc/pki/pki-tomcat/ca/flatfile.txt"
          docker exec pki bash -c "echo PWD:Secret.123 >> /etc/pki/pki-tomcat/ca/flatfile.txt"
          # restart CA subsystem
          docker exec pki pki-server ca-redeploy --wait

      - name: Enroll certificate with IP address using SSCEP and AES
        run: |
          docker exec client mkrequest -ip $(cat client.ip) Secret.123
          docker exec client openssl req -text -noout -in local.csr
          docker exec client sscep enroll \
              -u http://pki.example.com:8080/ca/cgi-bin/pkiclient.exe \
              -c ca.crt \
              -k local.key \
              -r local.csr \
              -l local.crt \
              -E aes \
              -S sha256
          docker exec client openssl x509 -text -noout -in local.crt


      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA from PKI container
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: scep-${{ inputs.os }}
          path: |
            /tmp/artifacts/pki
