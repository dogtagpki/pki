name: TPS on separate instance

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up CA DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=cads.example.com \
              --network=example \
              --network-alias=cads.example.com \
              --password=Secret.123 \
              cads

      - name: Set up CA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=ca.example.com \
              --network=example \
              --network-alias=ca.example.com \
              ca

      - name: Install CA in CA container
        # HTTP connector is needed in CA because if internal OCSP
        run: |
          docker exec ca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://cads.example.com:3389 \
              -v

          docker exec ca pki-server cert-find

      - name: Install banner in CA container
        run: docker exec ca cp /usr/share/pki/server/examples/banner/banner.txt /var/lib/pki/pki-tomcat/conf

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=krads.example.com \
              --network=example \
              --network-alias=krads.example.com \
              --password=Secret.123 \
              krads

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=kra.example.com \
              --network=example \
              --network-alias=kra.example.com \
              kra

      - name: Install KRA in KRA container
        run: |
          docker exec ca pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin.cert ${SHARED}/ca_admin.cert
          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_url=ldap://krads.example.com:3389 \
              -D pki_http_enable=False \
              -v

          docker exec kra pki-server cert-find

      - name: Verify there is no plain HTTP connectors in KRA
        run: |
          docker exec kra pki-server http-connector-find | tee output

          echo "Secure" > expected
          sed -n -e "s/^ *Connector ID: *\(.*\)$/\1/p" output > actual
          diff expected actual

      - name: Install banner in KRA container
        run: docker exec kra cp /usr/share/pki/server/examples/banner/banner.txt /var/lib/pki/pki-tomcat/conf

      - name: Set up TKS DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=tksds.example.com \
              --network=example \
              --network-alias=tksds.example.com \
              --password=Secret.123 \
              tksds

      - name: Set up TKS container
        run: |
          tests/bin/runner-init.sh \
              --hostname=tks.example.com \
              --network=example \
              --network-alias=tks.example.com \
              tks

      - name: Install TKS in TKS container
        run: |
          docker exec tks pkispawn \
              -f /usr/share/pki/server/examples/installation/tks.cfg \
              -s TKS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_url=ldap://tksds.example.com:3389 \
              -D pki_http_enable=False \
              -v

          docker exec tks pki-server cert-find

      - name: Verify there is no plain HTTP connectors in TKS
        run: |
          docker exec tks pki-server http-connector-find | tee output

          echo "Secure" > expected
          sed -n -e "s/^ *Connector ID: *\(.*\)$/\1/p" output > actual
          diff expected actual

      - name: Install banner in TKS container
        run: docker exec tks cp /usr/share/pki/server/examples/banner/banner.txt /var/lib/pki/pki-tomcat/conf

      - name: Set up TPS DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=tpsds.example.com \
              --network=example \
              --network-alias=tpsds.example.com \
              --password=Secret.123 \
              tpsds

      - name: Set up TPS container
        run: |
          tests/bin/runner-init.sh \
              --hostname=tps.example.com \
              --network=example \
              --network-alias=tps.example.com \
              tps

      - name: Install TPS in TPS container
        run: |
          docker exec tps pkispawn \
              -f /usr/share/pki/server/examples/installation/tps.cfg \
              -s TPS \
              -D pki_security_domain_hostname=ca.example.com \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ca_uri=https://ca.example.com:8443 \
              -D pki_kra_uri=https://kra.example.com:8443 \
              -D pki_tks_uri=https://tks.example.com:8443 \
              -D pki_ds_url=ldap://tpsds.example.com:3389 \
              -D pki_authdb_url=ldap://tpsds.example.com:3389 \
              -D pki_enable_server_side_keygen=True \
              -D pki_http_enable=False \
              -v

          docker exec tps pki-server cert-find

      - name: Verify there is no plain HTTP connectors in TPS
        run: |
          docker exec tps pki-server http-connector-find | tee output

          echo "Secure" > expected
          sed -n -e "s/^ *Connector ID: *\(.*\)$/\1/p" output > actual
          diff expected actual

      - name: Verify there is no plain HTTP ports in security domain but CA
        run: |
          docker exec ca pki-server sd-subsystem-find | tee output

          echo "  Port: 8080" > expected
          sed -ne "/^ *Port:/p" output > actual
          diff expected actual

      - name: Install banner in TPS container
        run: docker exec tps cp /usr/share/pki/server/examples/banner/banner.txt /var/lib/pki/pki-tomcat/conf

      - name: Run PKI healthcheck
        run: docker exec tps pki-healthcheck --failures-only

      - name: Check TPS admin
        run: |
          docker exec ca cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12

          docker exec tps pki nss-cert-import \
              --cert $SHARED/ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec tps pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec tps pki -n caadmin --ignore-banner \
              tps-user-show tpsadmin

      - name: Check TPS subsystem user in CA
        run: |
          docker exec ca pki-server ca-user-show TPS-tps.example.com-8443
          docker exec ca pki-server ca-user-role-find TPS-tps.example.com-8443

      - name: Check TPS subsystem user in KRA
        run: |
          docker exec kra pki-server kra-user-show TPS-tps.example.com-8443
          docker exec kra pki-server kra-user-role-find TPS-tps.example.com-8443

      - name: Check TPS subsystem user in TKS
        run: |
          docker exec tks pki-server tks-user-show TPS-tps.example.com-8443
          docker exec tks pki-server tks-user-role-find TPS-tps.example.com-8443

      - name: Check TPS users
        run: |
          docker exec tps pki-server tps-user-find

      - name: Check connectors in TPS
        run: |
          docker exec tps pki-server tps-connector-find | tee output

          cat > expected << EOF
            Connector ID: ca1
            Type: CA
            Enabled: true
            URL: https://ca.example.com:8443
            Nickname: subsystem

            Connector ID: kra1
            Type: KRA
            Enabled: true
            URL: https://kra.example.com:8443
            Nickname: subsystem

            Connector ID: tks1
            Type: TKS
            Enabled: true
            URL: https://tks.example.com:8443
            Nickname: subsystem
          EOF

          diff expected output

      - name: Remove TPS
        run: docker exec tps pkidestroy -s TPS -v

      - name: Remove TKS
        run: docker exec tks pkidestroy -s TKS -v

      - name: Remove KRA
        run: docker exec kra pkidestroy -s KRA -v

      - name: Remove CA
        run: docker exec ca pkidestroy -s CA -v

      - name: Check CA DS server systemd journal
        if: always()
        run: |
          docker exec cads journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check CA DS container logs
        if: always()
        run: |
          docker logs cads

      - name: Check CA systemd journal
        if: always()
        run: |
          docker exec ca journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA access log
        if: always()
        run: |
          docker exec ca find /var/lib/pki/pki-tomcat/logs -name "localhost_access_log.*" -exec cat {} \;

      - name: Check CA debug log
        if: always()
        run: |
          docker exec ca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check KRA DS server systemd journal
        if: always()
        run: |
          docker exec krads journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check KRA DS container logs
        if: always()
        run: |
          docker logs krads

      - name: Check KRA systemd journal
        if: always()
        run: |
          docker exec kra journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check KRA access log
        if: always()
        run: |
          docker exec kra find /var/lib/pki/pki-tomcat/logs -name "localhost_access_log.*" -exec cat {} \;

      - name: Check KRA debug log
        if: always()
        run: |
          docker exec kra find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;

      - name: Check TKS DS server systemd journal
        if: always()
        run: |
          docker exec tksds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check TKS DS container logs
        if: always()
        run: |
          docker logs tksds

      - name: Check TKS systemd journal
        if: always()
        run: |
          docker exec tks journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check TKS access log
        if: always()
        run: |
          docker exec tks find /var/lib/pki/pki-tomcat/logs -name "localhost_access_log.*" -exec cat {} \;

      - name: Check TKS debug log
        if: always()
        run: |
          docker exec tks find /var/lib/pki/pki-tomcat/logs/tks -name "debug.*" -exec cat {} \;

      - name: Check TPS DS server systemd journal
        if: always()
        run: |
          docker exec tpsds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check TPS DS container logs
        if: always()
        run: |
          docker logs tpsds

      - name: Check TPS systemd journal
        if: always()
        run: |
          docker exec tps journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check TPS access log
        if: always()
        run: |
          docker exec tps find /var/lib/pki/pki-tomcat/logs -name "localhost_access_log.*" -exec cat {} \;

      - name: Check TPS debug log
        if: always()
        run: |
          docker exec tps find /var/lib/pki/pki-tomcat/logs/tps -name "debug.*" -exec cat {} \;
