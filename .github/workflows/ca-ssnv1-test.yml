name: CA with SSNv1
#
# This test creates a CA subsystem with SSNv1 for certs and requests,
# performs enrollments, and verifies that the ranges are maintained
# properly in CS.cfg and DS.

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      ####################################################################################################
      # Create CA with Sequential Serial Numbers
      #
      # requests:
      # - initial range: 1 - 10 decimal
      # - initial size: 10 decimal
      # - increment: 10 decimal
      # - minimum: 5 decimal
      #
      # certs:
      # - initial range: 9 - 18 hex (9 - 24 decimal)
      # - initial size: 10 hex (16 decimal)
      # - increment: 12 hex (18 decimal)
      # - minimum: 9 hex (9 decimal)
      #
      # Note: cert range params are hexadecimal but due to a bug in
      # SubsystemRangeUpdateCLI.updateSerialNumberRange() it cannot
      # contain A to F.

      - name: Set up DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=ds.example.com \
              --network=example \
              --network-alias=ds.example.com \
              --password=Secret.123 \
              ds

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh \
              --hostname=pki.example.com \
              --network=example \
              --network-alias=pki.example.com \
              pki

      - name: Create CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -D pki_request_id_generator=legacy \
              -D pki_request_number_range_start=1 \
              -D pki_request_number_range_end=10 \
              -D pki_request_number_range_increment=10 \
              -D pki_request_number_range_minimum=5 \
              -D pki_request_number_range_transfer=5 \
              -D pki_cert_id_generator=legacy \
              -D pki_serial_number_range_start=9 \
              -D pki_serial_number_range_end=18 \
              -D pki_serial_number_range_increment=12 \
              -D pki_serial_number_range_minimum=9 \
              -D pki_serial_number_range_transfer=9 \
              -v

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output
          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # there should be 6 requests
          seq 1 6 > expected

          diff expected actual

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output
          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # there should be 6 certs
          seq 9 14 | while read n; do printf "0x%x\n" $n; done > expected

          diff expected actual

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be 1 - 10 decimal (size: 10, remaining: 4)
          cat > expected << EOF
          dbs.beginRequestNumber=1
          dbs.endRequestNumber=10
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be 9 - 18 hex (size: 16, remaining: 10)
          cat > expected << EOF
          dbs.beginSerialNumber=9
          dbs.endSerialNumber=18
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # SubsystemRangeUpdateCLI.updateRequestNumberRange() reads dbs.endRequestNumber
          # as 10 decimal, increments it by 1 to 11 decimal, then stores it as the
          # initial request nextRange.
          cat > expected << EOF
          nextRange: 11
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # SubsystemRangeUpdateCLI.updateSerialNumberRange() incorrectly reads
          # dbs.endSerialNumber as 18 decimal, increments it by 1 to 19 decimal,
          # then stores it as the initial cert nextRange.
          cat > expected << EOF
          nextRange: 19
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # serial number management is disabled so there are no range objects created
          diff /dev/null output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # serial number management is disabled so there are no range objects created
          diff /dev/null output

      ####################################################################################################
      # Enable serial number management
      #
      # Restarting CA with serial management enabled will trigger a new
      # range allocation for requests since the remaining numbers in
      # the current range (i.e. 4) is below the minimum (i.e. 5).
      #
      # For certs there is no new allocation since the remaining numbers
      # in the current range (i.e. 10) is still above the minimum (i.e. 9).

      - name: Enable serial number management
        run: |
          docker exec pki pki-server ca-config-set dbs.enableSerialManagement true

          # disable serial number update background task
          docker exec pki pki-server ca-config-set ca.serialNumberUpdateInterval 0

          # enable serial number update manual job
          docker exec pki pki-server ca-config-set jobsScheduler.enabled true
          docker exec pki pki-server ca-config-set jobsScheduler.job.serialNumberUpdate.enabled true

          # restart CA subsystem
          docker exec pki pki-server ca-redeploy --wait

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be 1 - 10 decimal (size: 10, remaining: 4)
          cat > expected << EOF
          dbs.beginRequestNumber=1
          dbs.endRequestNumber=10
          dbs.nextBeginRequestNumber=11
          dbs.nextEndRequestNumber=20
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be 9 - 18 hex (size: 16, remaining: 10)
          cat > expected << EOF
          dbs.beginSerialNumber=9
          dbs.endSerialNumber=18
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be incremented by 10 decimal
          cat > expected << EOF
          nextRange: 21
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be the same
          cat > expected << EOF
          nextRange: 19
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # new request range should be 11 - 20 decimal (size: 10)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # there should be no new cert range
          diff /dev/null output

      ####################################################################################################
      # Enroll certs to exhaust cert range
      #
      # This will create 10 requests and 10 certs. For requests, since
      # the remaining numbers in the current range is below the minimum
      # and already has allocated new range,  it will automatically
      # switch to the new range.
      #
      # For certs, it will exhaust the current range but not switch to a
      # new range.

      - name: Install admin cert
        run: |
          docker exec pki pki-server cert-export \
              --cert-file ca_signing.crt \
              ca_signing

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

      - name: Enroll 10 certs
        if: always()
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "uid=testuser" \
              --ext /usr/share/pki/tools/examples/certs/testuser.conf \
              --csr testuser.csr

          for i in $(seq 1 10); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output

          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # there should be 16 requests
          seq 1 16 > expected

          diff expected actual

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output

          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # there should be 16 certs
          seq 9 24 | while read n; do printf "0x%x\n" $n; done > expected

          diff expected actual

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # requelst range should be 11 - 20 decimal (size: 10, remaining: 6)
          cat > expected << EOF
          dbs.beginRequestNumber=11
          dbs.endRequestNumber=20
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be 9 - 18 hex (size: 16, remaining: 0)
          cat > expected << EOF
          dbs.beginSerialNumber=9
          dbs.endSerialNumber=18
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be the same
          cat > expected << EOF
          nextRange: 21
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be the same
          cat > expected << EOF
          nextRange: 19
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # request range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # cert range objects should be the same
          diff /dev/null output

      ####################################################################################################
      # Enroll a cert when cert range is exhausted
      #
      # This will create one request but fail to create another cert.

      - name: Enroll a cert when cert range is exhausted
        if: always()
        run: |
          docker exec pki pki \
              -n caadmin \
              ca-cert-issue \
              --profile caUserCert \
              --csr-file testuser.csr \
              --output-file testuser.crt \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # TODO: fix missing request ID and typo
          cat > expected << EOF
          PKIException: Server Internal Error: Request 17 was completed with errors.
          CA has exhausted all available serial numbers
          EOF

          diff expected stderr

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output

          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # there should be 17 requests
          seq 1 17 > expected

          diff expected actual

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output

          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # there should be 16 certs
          seq 9 24 | while read n; do printf "0x%x\n" $n; done > expected

          diff expected actual

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be 11 - 20 decimal (size: 10, remaining: 3)
          cat > expected << EOF
          dbs.beginRequestNumber=11
          dbs.endRequestNumber=20
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be 9 - 18 hex (size: 16, remaining: 0)
          cat > expected << EOF
          dbs.beginSerialNumber=9
          dbs.endSerialNumber=18
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be the same
          cat > expected << EOF
          nextRange: 21
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be the same
          cat > expected << EOF
          nextRange: 19
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # request range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # cert range objects should be the same
          diff /dev/null output

      ####################################################################################################
      # Allocate new ranges
      #
      # This will allocate new ranges for requests and certs since
      # the remaining numbers in their ranges are below the minimum.

      - name: Allocate new ranges
        if: always()
        run: |
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be the same (size: 10, remaining: 3)
          cat > expected << EOF
          dbs.beginRequestNumber=11
          dbs.endRequestNumber=20
          dbs.nextBeginRequestNumber=21
          dbs.nextEndRequestNumber=30
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be the same (size: 16, remaining: 0)
          cat > expected << EOF
          dbs.beginSerialNumber=9
          dbs.endSerialNumber=18
          dbs.nextBeginSerialNumber=19
          dbs.nextEndSerialNumber=2a
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be incremented by 10 decimal to 31 decimal
          cat > expected << EOF
          nextRange: 31
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRequest should incremented by 12 hex (18 decimal) to 37 decimal
          cat > expected << EOF
          nextRange: 37
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # new request range should be 21 - 30 decimal (size: 10)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # new request range is 19 - 36 decimal (size: 18)
          # Note: the size should have been consistent (i.e. 16)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          EOF

          diff expected output

      ####################################################################################################
      # Enroll certs to exhaust request range
      #
      # This will create 13 requests and 13 certs. Both requests and certs
      # will switch to the new ranges allocated earlier.

      - name: Enroll 13 additional certs
        if: always()
        run: |
          for i in $(seq 1 13); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output

          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # there should be 30 requests (17 existing + 13 new)
          seq 1 30 > expected

          diff expected actual

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output

          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # there should be 29 certs (16 existing + 13 new)
          seq 9 37 | while read n; do printf "0x%x\n" $n; done > expected

          diff expected actual

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be 21 - 30 decimal (size: 10, remaining: 0)
          cat > expected << EOF
          dbs.beginRequestNumber=21
          dbs.endRequestNumber=30
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range is be 19 - 2a hex (size: 18, remaining: 5)
          # Note: the size should have been consistent (i.e. 16)
          cat > expected << EOF
          dbs.beginSerialNumber=19
          dbs.endSerialNumber=2a
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be the same
          cat > expected << EOF
          nextRange: 31
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be the same
          cat > expected << EOF
          nextRange: 37
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # request range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # cert range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          EOF

          diff expected output

      ####################################################################################################
      # Enroll a cert when request range is exhausted
      #
      # This will fail to create a request so no cert will be created either.

      - name: Enroll a cert when request range is exhausted
        if: always()
        run: |
          docker exec pki pki \
              -n caadmin \
              ca-cert-issue \
              --profile caUserCert \
              --csr-file testuser.csr \
              --output-file testuser.crt \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          cat > expected << EOF
          PKIException: Unable to create enrollment request: Unable to create enrollment request: All serial numbers are used. The max serial number is 30
          EOF

          diff expected stderr

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output

          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # requests should be the same
          seq 1 30 > expected

          diff expected actual

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output

          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # certs should be the same
          seq 9 37 | while read n; do printf "0x%x\n" $n; done > expected

          diff expected actual

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be the same (size: 10, remaining: 0)
          cat > expected << EOF
          dbs.beginRequestNumber=21
          dbs.endRequestNumber=30
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be the same (size: 18, remaining: 5)
          cat > expected << EOF
          dbs.beginSerialNumber=19
          dbs.endSerialNumber=2a
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be the same
          cat > expected << EOF
          nextRange: 31
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be the same
          cat > expected << EOF
          nextRange: 37
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # request range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # cert range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          EOF

          diff expected output

      ####################################################################################################
      # Allocate new ranges again
      #
      # This will allocate new ranges for requests and certs since
      # the remaining numbers in their ranges are below the minimum.

      - name: Allocate new ranges again
        if: always()
        run: |
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be the same (size: 10, remaining: 0)
          cat > expected << EOF
          dbs.beginRequestNumber=21
          dbs.endRequestNumber=30
          dbs.nextBeginRequestNumber=31
          dbs.nextEndRequestNumber=40
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should be the same (size: 18, remaining: 5)
          cat > expected << EOF
          dbs.beginSerialNumber=19
          dbs.endSerialNumber=2a
          dbs.nextBeginSerialNumber=37
          dbs.nextEndSerialNumber=48
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be incremented by 10 decimal to 41 decimal
          cat > expected << EOF
          nextRange: 41
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be incremented by 12 hex (18 decimal) to 55 decimal
          cat > expected << EOF
          nextRange: 55
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # new request range should be 31 - 40 decimal (size: 10)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          SecurePort: 8443
          beginRange: 31
          endRange: 40
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # new cert range should be 37 - 54 decimal (size: 18)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          SecurePort: 8443
          beginRange: 37
          endRange: 54
          host: pki.example.com

          EOF

          diff expected output

      ####################################################################################################
      # Enroll 10 additional certs
      #
      # This will create 10 requests and 10 certs.
      # Both requests and certs will switch to new ranges.

      - name: Enroll 10 additional certs
        if: always()
        run: |
          for i in $(seq 1 10); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output

          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # there should be 40 requests (30 existing + 10 new)
          seq 1 40 > expected

          diff expected actual

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output

          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # there should be 39 certs (29 existing + 10 new)
          # but due to a bug the serial numbers have a gap

          # seq 9 47 | while read n; do printf "0x%x\n" $n; done > expected
          seq 9 42 | while read n; do printf "0x%x\n" $n; done > expected
          seq 55 59 | while read n; do printf "0x%x\n" $n; done >> expected

          diff expected actual

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          # request range should be 31 - 40 decimal (size: 10, remaining: 0)
          cat > expected << EOF
          dbs.beginRequestNumber=31
          dbs.endRequestNumber=40
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          # cert range should have been 2b - 36 hex (size: 18, remaining: 13)
          # but it jumps to 37 - 48 hex
          cat > expected << EOF
          dbs.beginSerialNumber=37
          dbs.endSerialNumber=48
          dbs.serialCloneTransferNumber=9
          dbs.serialIncrement=12
          dbs.serialLowWaterMark=9
          EOF

          diff expected output

      - name: Check request next range
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be the same
          cat > expected << EOF
          nextRange: 41
          EOF

          diff expected output

      - name: Check cert next range
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # cert nextRange should be incremented by 12 hex (18 decimal) to 55 decimal
          cat > expected << EOF
          nextRange: 55
          EOF

          diff expected output

      - name: Check request range objects
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # request range objects should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          SecurePort: 8443
          beginRange: 31
          endRange: 40
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # cert range should be the same
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          SecurePort: 8443
          beginRange: 37
          endRange: 54
          host: pki.example.com

          EOF

          diff expected output

      ####################################################################################################
      # Switch cert request ID generator to legacy2 and verify if serials
      # have gaps when range is updated
      #
      # It should work like the legacy but with correct range.
      - name: Switch to legacy2
        if: always()
        run: |
          docker exec pki pki-server stop
          docker exec pki pki-server ca-id-generator-update -v --type legacy2 request
          docker exec pki pki-server ca-id-generator-update -v --type legacy2 cert
          docker exec pki pki-server start --wait
          

      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output
          # request range should be the same
          cat > expected << EOF
          dbs.beginRequestNumber=31
          dbs.endRequestNumber=40
          dbs.nextBeginRequestNumber=41
          dbs.nextEndRequestNumber=50
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output
          
          cat > expected << EOF
          dbs.beginSerialNumber=0x37
          dbs.endSerialNumber=0x54
          dbs.serialCloneTransferNumber=0x9
          dbs.serialIncrement=0x12
          dbs.serialLowWaterMark=0x9
          EOF

          diff expected output

      - name: Check the radix configured for the new generator
        if: always()
        run: |
          docker exec pki pki-server ca-config-show dbs.request.id.radix | tee output
          docker exec pki pki-server ca-config-show dbs.cert.id.radix | tee -a output

          cat > expected <<EOF
          10
          16
          EOF

          diff expected output

      - name: Check ranges entry is configured in a new tree
        if: always()
        run: |
          docker exec pki pki-server ca-config-show dbs.serialRangeDN | tee output
          docker exec pki pki-server ca-config-show dbs.requestRangeDN | tee -a output

          cat > expected <<EOF
          ou=certificateRepository,ou=ranges_v2
          ou=requests,ou=ranges_v2
          EOF

          diff expected output

      - name: Check request range objects for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # new request range should be 31 - 40 decimal (total: 10)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          SecurePort: 8443
          beginRange: 31
          endRange: 40
          host: pki.example.com

          EOF

          diff expected output

      - name: Check request range objects for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh -t legacy2 ds | tee output

          # new request range should be 31 - 40 decimal (total: 10)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          SecurePort: 8443
          beginRange: 31
          endRange: 40
          host: pki.example.com

          SecurePort: 8443
          beginRange: 41
          endRange: 50
          host: pki.example.com

          EOF

          diff expected output

      - name: Check request next range for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          # request nextRange should be incremented by 10 decimal to 41 decimal
          cat > expected << EOF
          nextRange: 41
          EOF

          diff expected output

      - name: Check request next range for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh -t legacy2 ds | tee output

          # request nextRange should be incremented by 10 decimal to 41 decimal
          cat > expected << EOF
          nextRange: 51
          EOF

          diff expected output

      - name: Check cert range objects for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # new cert range should be the same but converted to decimal
          # first range move from 19-36 (hex) to 25-54 (dec)
          # second range move from 37-54 (hex) to 55-84 (dec)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          SecurePort: 8443
          beginRange: 37
          endRange: 54
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh -t legacy2 ds | tee output

          # new cert range should be the same but converted to decimal
          # first range move from 19-36 (hex) to 25-54 (dec)
          # second range move from 37-54 (hex) to 55-84 (dec)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 25
          endRange: 54
          host: pki.example.com

          SecurePort: 8443
          beginRange: 55
          endRange: 84
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert next range for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # next range should remain the same
          cat > expected << EOF
          nextRange: 55
          EOF

          diff expected output

      - name: Check cert next range for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh -t legacy2 ds | tee output

          # next range should be endRange + 1
          cat > expected << EOF
          nextRange: 85
          EOF

          diff expected output

      ####################################################################################################
      # Enroll additional certs updating the range
      #

      - name: Enroll additional certs 
        if: always()
        run: |
          # Enroll until request range exhausted
          for i in $(seq 1 9); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate
          # Enroll until request range exhausted
          for i in $(seq 1 10); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate
          # Enroll until request range exhausted
          for i in $(seq 1 10); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate
          # Enroll until request range exhausted
          for i in $(seq 1 10); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate
          # Enroll until request range exhausted
          for i in $(seq 1 10); do
              docker exec pki pki \
                  -n caadmin \
                  ca-cert-issue \
                  --profile caUserCert \
                  --csr-file testuser.csr \
                  --output-file testuser.crt

              docker exec pki openssl x509 -in testuser.crt -serial -noout
          done
          docker exec pki pki -n caadmin ca-job-start serialNumberUpdate
          
      - name: Check request range config
        if: always()
        run: |
          tests/ca/bin/ca-request-range-config.sh pki | tee output

          cat > expected << EOF
          dbs.beginRequestNumber=81
          dbs.endRequestNumber=90
          dbs.nextBeginRequestNumber=91
          dbs.nextEndRequestNumber=100
          dbs.requestCloneTransferNumber=5
          dbs.requestIncrement=10
          dbs.requestLowWaterMark=5
          EOF

          diff expected output

      - name: Check cert range config
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-config.sh pki | tee output

          cat > expected << EOF
          dbs.beginSerialNumber=0x67
          dbs.endSerialNumber=0x78
          dbs.serialCloneTransferNumber=0x9
          dbs.serialIncrement=0x12
          dbs.serialLowWaterMark=0x9
          EOF

          diff expected output

      - name: Check request range objects for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh ds | tee output

          # new request range should be 31 - 40 decimal (total: 10)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          SecurePort: 8443
          beginRange: 31
          endRange: 40
          host: pki.example.com

          EOF

          diff expected output

      - name: Check request range objects for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-request-range-objects.sh -t legacy2 ds | tee output

          cat > expected << EOF
          SecurePort: 8443
          beginRange: 11
          endRange: 20
          host: pki.example.com

          SecurePort: 8443
          beginRange: 21
          endRange: 30
          host: pki.example.com

          SecurePort: 8443
          beginRange: 31
          endRange: 40
          host: pki.example.com

          SecurePort: 8443
          beginRange: 41
          endRange: 50
          host: pki.example.com

          SecurePort: 8443
          beginRange: 51
          endRange: 60
          host: pki.example.com

          SecurePort: 8443
          beginRange: 61
          endRange: 70
          host: pki.example.com

          SecurePort: 8443
          beginRange: 71
          endRange: 80
          host: pki.example.com

          SecurePort: 8443
          beginRange: 81
          endRange: 90
          host: pki.example.com
 
          SecurePort: 8443
          beginRange: 91
          endRange: 100
          host: pki.example.com

          EOF

          diff expected output

      - name: Check request next range for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh ds | tee output

          cat > expected << EOF
          nextRange: 41
          EOF

          diff expected output

      - name: Check request next range for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-request-next-range.sh -t legacy2 ds | tee output

          cat > expected << EOF
          nextRange: 101
          EOF

          diff expected output

      - name: Check cert range objects for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh ds | tee output

          # new cert range should be the same but converted to decimal
          # first range move from 19-36 (hex) to 25-54 (dec)
          # second range move from 37-54 (hex) to 55-84 (dec)
          cat > expected << EOF
          SecurePort: 8443
          beginRange: 19
          endRange: 36
          host: pki.example.com

          SecurePort: 8443
          beginRange: 37
          endRange: 54
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert range objects for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-cert-range-objects.sh -t legacy2 ds | tee output

          cat > expected << EOF
          SecurePort: 8443
          beginRange: 25
          endRange: 54
          host: pki.example.com

          SecurePort: 8443
          beginRange: 55
          endRange: 84
          host: pki.example.com

          SecurePort: 8443
          beginRange: 85
          endRange: 102
          host: pki.example.com

          SecurePort: 8443
          beginRange: 103
          endRange: 120
          host: pki.example.com

          EOF

          diff expected output

      - name: Check cert next range for SSNv1
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh ds | tee output

          # next range should remain the same
          cat > expected << EOF
          nextRange: 55
          EOF

          diff expected output

      - name: Check cert next range for SSNv2
        if: always()
        run: |
          tests/ca/bin/ca-cert-next-range.sh -t legacy2 ds | tee output

          # next range should be endRange + 1
          cat > expected << EOF
          nextRange: 121
          EOF

          diff expected output

      ####################################################################################################
      # Checking request no gap should be present after switching to legacy2
      #
      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output

          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > actual

          # there should be 40 requests (30 existing + 10 new)
          seq 1 89 > expected

          diff expected actual

      ####################################################################################################
      # Checking certs no gap should be present after switching to legacy2
      # so the last gap is between 32 and 39
      #
      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output

          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > actual

          # there should be 39 certs (29 existing + 10 new)
          # but due to a bug the serial numbers have a gap

          # seq 1 39 | while read n; do printf "0x%x\n" $n; done > expected
          seq 9 42 | while read n; do printf "0x%x\n" $n; done > expected
          seq 55 108 | while read n; do printf "0x%x\n" $n; done >> expected

          diff expected actual

      ####################################################################################################
      # Enroll a cert with RSNv3
      #
      # This should create a request and a cert. The cert
      # should be issued with a non-sequential serial number.

      - name: Switch to RSNv3
        if: always()
        run: |
          # switch cert request ID generator to RSNv3
          docker exec pki pki-server ca-config-unset dbs.beginRequestNumber
          docker exec pki pki-server ca-config-unset dbs.endRequestNumber
          docker exec pki pki-server ca-config-unset dbs.requestIncrement
          docker exec pki pki-server ca-config-unset dbs.requestLowWaterMark
          docker exec pki pki-server ca-config-unset dbs.requestCloneTransferNumber
          docker exec pki pki-server ca-config-unset dbs.requestRangeDN

          docker exec pki pki-server ca-config-set dbs.request.id.generator random

          # switch cert ID generator to RSNv3
          docker exec pki pki-server ca-config-unset dbs.beginSerialNumber
          docker exec pki pki-server ca-config-unset dbs.endSerialNumber
          docker exec pki pki-server ca-config-unset dbs.serialIncrement
          docker exec pki pki-server ca-config-unset dbs.serialLowWaterMark
          docker exec pki pki-server ca-config-unset dbs.serialCloneTransferNumber
          docker exec pki pki-server ca-config-unset dbs.serialRangeDN

          docker exec pki pki-server ca-config-set dbs.cert.id.generator random

          # restart CA subsystem
          docker exec pki pki-server ca-redeploy --wait

      - name: Enroll a cert with RSNv3
        if: always()
        run: |
          docker exec pki pki \
              -n caadmin \
              ca-cert-issue \
              --profile caUserCert \
              --csr-file testuser.csr \
              --output-file testuser.crt

          docker exec pki openssl x509 -in testuser.crt -serial -noout

      - name: Check requests
        if: always()
        run: |
          docker exec pki pki-server ca-cert-request-find | tee output
          sed -n "s/^ *Request ID: *\(.*\)$/\1/p" output > list

          # there should be 40 requests with sequential request ID

          seq 1 40 > expected
          head -n 40 list > actual
          diff expected actual

          # there should be one request with random request ID (longer than 2 chars)
          REQUEST_ID=$(tail -n 1 list)
          [ ${#REQUEST_ID} -gt 2 ]

      - name: Check certs
        if: always()
        run: |
          docker exec pki pki-server ca-cert-find | tee output
          sed -n "s/^ *Serial Number: *\(.*\)$/\1/p" output > list

          # there should be 39 certs with sequential serial numbers
          # but due to a bug the serial numbers have a gap

          # seq 9 47 | while read n; do printf "0x%x\n" $n; done > expected
          seq 9 42 | while read n; do printf "0x%x\n" $n; done > expected
          seq 55 59 | while read n; do printf "0x%x\n" $n; done >> expected

          head -n 39 list > actual
          diff expected actual

          # there should be one cert with random serial number (longer than 4 chars)

          SERIAL_NUMBER=$(tail -n 1 list)
          [ ${#SERIAL_NUMBER} -gt 4 ]

      ####################################################################################################
      # Cleanup

      - name: Remove CA
        run: docker exec pki pkidestroy -s CA -v

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec ds journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check DS container logs
        if: always()
        run: |
          docker logs ds

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check PKI server access log
        if: always()
        run: |
          docker exec pki find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;
