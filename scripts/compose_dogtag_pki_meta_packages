#!/bin/sh -e

# BEGIN COPYRIGHT BLOCK
# (C) 2010 Red Hat, Inc.
# All rights reserved.
# END COPYRIGHT BLOCK

##
## Include common 'compose' functions
##

COMPOSE_PWD=`dirname $0`
. ${COMPOSE_PWD}/compose_functions


## Always switch into the base directory three levels
## above this shell script prior to executing it so
## that all of its output is written to this directory

cd `dirname $0`/../..


##
## Retrieve the name of this base directory
##

PKI_PWD=`pwd`

##
## Establish the 'dogtag-pki' spec file
##

DOGTAG_PKI_META="dogtag-pki"
PKI_SPECS_FILE="${PKI_DIR}/specs/${DOGTAG_PKI_META}.spec.in"
DOGTAG_PKI_META_VERSION="`rpmspec -P "${PKI_SPECS_FILE}" | grep '^Version:' | awk '{print $2;}'`"


##
## Establish packages directory for 'dogtag-pki' META packages
##

if [ $WORK_DIR ]; then
    PKI_PACKAGES="`cd $WORK_DIR ; pwd`"
else
    PKI_PACKAGES="${PKI_PWD}/packages"
fi

DOGTAG_PKI_META_BUILD_DIR="${PKI_PACKAGES}/BUILD"
DOGTAG_PKI_META_RPMS_DIR="${PKI_PACKAGES}/RPMS"
DOGTAG_PKI_META_SOURCES_DIR="${PKI_PACKAGES}/SOURCES"
DOGTAG_PKI_META_SPECS_DIR="${PKI_PACKAGES}/SPECS"
DOGTAG_PKI_META_SRPMS_DIR="${PKI_PACKAGES}/SRPMS"

DOGTAG_PKI_META_TARBALL="pki-${DOGTAG_PKI_META_VERSION}.tar.gz"
DOGTAG_PKI_META_SPEC_FILE="${DOGTAG_PKI_META_SPECS_DIR}/${DOGTAG_PKI_META}.spec"

DOGTAG_PKI_META_STAGING_DIR="${PKI_PACKAGES}/staging"
DOGTAG_PKI_META_DIR="${DOGTAG_PKI_META_STAGING_DIR}/${DOGTAG_PKI_META}-${DOGTAG_PKI_META_VERSION}"
DOGTAG_PKI_META_DOGTAG_DIR="${DOGTAG_PKI_META_DIR}/dogtag"


##
## Always create a top-level 'packages' directory
##

mkdir -p ${PKI_PACKAGES}


##
## Always create 'dogtag-pki' package directories
##

mkdir -p ${DOGTAG_PKI_META_BUILD_DIR}
mkdir -p ${DOGTAG_PKI_META_RPMS_DIR}
mkdir -p ${DOGTAG_PKI_META_SOURCES_DIR}
mkdir -p ${DOGTAG_PKI_META_SPECS_DIR}
mkdir -p ${DOGTAG_PKI_META_SRPMS_DIR}


##
## Always start with new 'dogtag-pki' package files
##

echo rm -rf ${DOGTAG_PKI_META_BUILD_DIR}/${DOGTAG_PKI_META}-${DOGTAG_PKI_META_VERSION}
echo rm -f  ${DOGTAG_PKI_META_RPMS_DIR}/${DOGTAG_PKI_META}-${DOGTAG_PKI_META_VERSION}*.rpm
echo rm -f  ${DOGTAG_PKI_META_SOURCES_DIR}/${DOGTAG_PKI_META_TARBALL}
echo rm -f  ${DOGTAG_PKI_META_SPEC_FILE}


##
## Compute build options
##

compute_build_options


##
## Insert timestamp and commit ID while copying spec template into actual spec file.
##

sed "s/%{?_timestamp}/${_TIMESTAMP}/g; s/%{?_commit_id}/${_COMMIT_ID}/g" \
    ${PKI_SPECS_FILE} > ${DOGTAG_PKI_META_SPEC_FILE}

# rpmlint ${DOGTAG_PKI_META_SPEC_FILE}


##
## Create the 'dogtag-pki' tarball
##

tar czf \
 ${DOGTAG_PKI_META_SOURCES_DIR}/${DOGTAG_PKI_META_TARBALL} \
 --transform "s,^./,pki-${DOGTAG_PKI_META_VERSION}/," \
 --exclude .git \
 --exclude .svn \
 --exclude .swp \
 --exclude .metadata \
 --exclude build \
 --exclude .tox \
 --exclude dist \
 --exclude MANIFEST \
 --exclude *.pyc \
 --exclude __pycache__ \
 -C ${PKI_DIR} \
 .


##
## Automatically invoke RPM/SRPM creation
##

cd ${PKI_PACKAGES}
rpmbuild \
  ${RPMBUILD_OP} \
  --define "_topdir ${PKI_PACKAGES}" \
  "${OPTIONS[@]}" \
  ${DOGTAG_PKI_META_SPEC_FILE} \
  | tee package_${DOGTAG_PKI_META}.log 2>&1

echo "RPM packages:"
find "$DOGTAG_PKI_META_RPMS_DIR" -type f -printf " %p\n"
