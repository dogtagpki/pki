####################### SIGNED AUDIT EVENTS #############################
# This file defines signed audit events which are required by CIMC PP.
# Please consult cfu before adding/deleting/modifying the events.
#
# WARNING: The comments are incrementally being transformed into parsable
# document. Please use the following format when updating the comments.
#
#   Event: <event type>
#   Description: <event description>
#   Applicable subsystems: <comma-separated list of subsystems>
#   Fields:
#   - <field name>: <field description>
#
# Note: In the actual event definition there should be exactly 1 space
# after the # sign.
#
# Common fields:
# - Outcome: must be "success" or "failure"
# - SubjectID: must be the UID of the user responsible for the operation
#             "$System$" if system-initiated operation (e.g. log signing)
#
#########################################################################
# Selectable Signed Audit Events
#
# Event: AUDIT_LOG_STARTUP
# - used at audit function startup
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
#
LOGGING_SIGNED_AUDIT_AUDIT_LOG_STARTUP_2=<type=AUDIT_LOG_STARTUP>:[AuditEvent=AUDIT_LOG_STARTUP][SubjectID={0}][Outcome={1}] audit function startup
#
# Event: AUDIT_LOG_SHUTDOWN
# - used at audit function shutdown
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
#
LOGGING_SIGNED_AUDIT_AUDIT_LOG_SHUTDOWN_2=<type=AUDIT_LOG_SHUTDOWN>:[AuditEvent=AUDIT_LOG_SHUTDOWN][SubjectID={0}][Outcome={1}] audit function shutdown
#
# Event: CIMC_CERT_VERIFICATION
# - used for verifying CIMC system certificates
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# - CertNickName is the cert nickname
#
LOGGING_SIGNED_AUDIT_CIMC_CERT_VERIFICATION_3=<type=CIMC_CERT_VERIFICATION>:[AuditEvent=CIMC_CERT_VERIFICATION][SubjectID={0}][Outcome={1}][CertNickName={2}] CIMC certificate verification
#
# Event: ROLE_ASSUME
# - used when user assumes a role (in current CS that's when one accesses a
#     role port)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Role must be be one of the valid roles, by default: "Administrators",
#     "Certificate Manager Agents", and "Auditors"
#     note that customized role names can be used once configured
#
LOGGING_SIGNED_AUDIT_ROLE_ASSUME=<type=ROLE_ASSUME>:[AuditEvent=ROLE_ASSUME]{0} assume privileged role
#
# Event: CONFIG_CERT_POLICY
# - used when configuring certificate policy constraints and extensions
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
# (where name and value are separated by the delimiter ;;)
# separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_CERT_POLICY_3=<type=CONFIG_CERT_POLICY>:[AuditEvent=CONFIG_CERT_POLICY][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] certificate policy constraint or extension configuration parameter(s) change
#
# Event: CONFIG_CERT_PROFILE
# - used when configuring certificate profile
#    (general settings and certificate profile)
#    (extensions and constraints policies are to be obsoleted but do it anyway)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_CERT_PROFILE_3=<type=CONFIG_CERT_PROFILE>:[AuditEvent=CONFIG_CERT_PROFILE][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] certificate profile configuration parameter(s) change
#
# Event: CONFIG_CRL_PROFILE
# - used when configuring  CRL profile
#    (extensions, frequency, CRL format)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_CRL_PROFILE_3=<type=CONFIG_CRL_PROFILE>:[AuditEvent=CONFIG_CRL_PROFILE][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] CRL profile configuration parameter(s) change
#
# Event: CONFIG_OCSP_PROFILE
# - used when configuring OCSP profile
#    (everything under Online Certificate Status Manager)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_OCSP_PROFILE_3=<type=CONFIG_OCSP_PROFILE>:[AuditEvent=CONFIG_OCSP_PROFILE][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] OCSP profile configuration parameter(s) change
#
# Event: CONFIG_AUTH
# - used when configuring authentication
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- Password MUST NOT be logged ---
#
LOGGING_SIGNED_AUDIT_CONFIG_AUTH_3=<type=CONFIG_AUTH>:[AuditEvent=CONFIG_AUTH][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] authentication configuration parameter(s) change
#
# Event: CONFIG_ROLE
# - used when configuring role information (anything under users/groups)
#       add/remove/edit a role, etc)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_ROLE=<type=CONFIG_ROLE>:[AuditEvent=CONFIG_ROLE]{0} role configuration parameter(s) change
#
# Event: CONFIG_ACL
# - used when configuring ACL information
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_ACL_3=<type=CONFIG_ACL>:[AuditEvent=CONFIG_ACL][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] ACL configuration parameter(s) change
#
# Event: CONFIG_SIGNED_AUDIT
# - used when configuring signedAudit
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_SIGNED_AUDIT=<type=CONFIG_SIGNED_AUDIT>:[AuditEvent=CONFIG_SIGNED_AUDIT]{0} signed audit configuration parameter(s) change
#
# Event: CONFIG_ENCRYPTION
# - used when configuring encryption (cert settings and SSL cipher preferences)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_ENCRYPTION_3=<type=CONFIG_ENCRYPTION>:[AuditEvent=CONFIG_ENCRYPTION][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] encryption configuration parameter(s) change
#
# Event: CONFIG_TRUSTED_PUBLIC_KEY
# - used when
#      1. "Manage Certificate" is used to edit the trustness of certificates
#         and deletion of certificates
#      2. "Certificate Setup Wizard" is used to import CA certificates into the
#         certificate database (Although CrossCertificatePairs are stored
#         within internaldb, audit them as well)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_TRUSTED_PUBLIC_KEY=<type=CONFIG_TRUSTED_PUBLIC_KEY>:[AuditEvent=CONFIG_TRUSTED_PUBLIC_KEY]{0} certificate database configuration
#
# Event: CONFIG_DRM
# - used when configuring DRM
#     (Key recovery scheme, change of any secret component)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
#
LOGGING_SIGNED_AUDIT_CONFIG_DRM_3=<type=CONFIG_DRM>:[AuditEvent=CONFIG_DRM][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] DRM configuration parameter(s) change
#
# Event: SELFTESTS_EXECUTION
# - used when self tests are run
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
#
LOGGING_SIGNED_AUDIT_SELFTESTS_EXECUTION_2=<type=SELFTESTS_EXECUTION>:[AuditEvent=SELFTESTS_EXECUTION][SubjectID={0}][Outcome={1}] self tests execution (see selftests.log for details)
#
# Event: AUDIT_LOG_DELETE
# - used AFTER audit log gets expired (authz should not allow,
#    but in case authz gets compromised.  Make sure it is written
#    AFTER the log expiration happens)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# LogFile must be the complete name (including the path) of the
#    signedAudit log that is attempted to be deleted
#
LOGGING_SIGNED_AUDIT_LOG_DELETE_3=<type=AUDIT_LOG_DELETE>:[AuditEvent=AUDIT_LOG_DELETE][SubjectID={0}][Outcome={1}][LogFile={2}] signedAudit log deletion
#
# Event: LOG_PATH_CHANGE
# - used when log file name (including any path changes) for any of
#    audit, system, transaction, or other customized log file
#    change is attempted (authz should not allow, but make sure it's
#    written after the attempt)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# LogType must be "System", "Transaction", or "SignedAudit"
# toLogFile must be the name (including any path changes) that the user is
#    attempting to change to
#
LOGGING_SIGNED_AUDIT_LOG_PATH_CHANGE_4=<type=LOG_PATH_CHANGE>:[AuditEvent=LOG_PATH_CHANGE][SubjectID={0}][Outcome={1}][LogType={2}][toLogFile={3}] log path change attempt
#
# Event: LOG_EXPIRATION_CHANGE
# - used when log expiration time change is attempted (authz should not
#    allow, but make sure it's written after the attempt)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# LogType must be "System", "Transaction", or "SignedAudit"
# ExpirationTime must be the amount of time (in seconds) that is
#    attempted to be changed to
#
# -- feature disabled --
#LOGGING_SIGNED_AUDIT_LOG_EXPIRATION_CHANGE_4=<type=LOG_EXPIRATION_CHANGE>:[AuditEvent=LOG_EXPIRATION_CHANGE][SubjectID={0}][Outcome={1}][LogType={2}][ExpirationTime={3}] log expiration time change attempt
#
# Event: SERVER_SIDE_KEYGEN_REQUEST
# - used when server-side key generation request is made
#    This is for tokenkeys
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# EntityID must be the representation of the subject that will be on the certificate when issued
#
LOGGING_SIGNED_AUDIT_SERVER_SIDE_KEYGEN_REQUEST=<type=SERVER_SIDE_KEYGEN_REQUEST>:[AuditEvent=SERVER_SIDE_KEYGEN_REQUEST]{0} server-side key generation request
#
# Event: SERVER_SIDE_KEYGEN_REQUEST_PROCESSED
# - used when server-side key generation request has been processed.
#    This is for tokenkeys
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# EntityID must be the representation of the subject that will be on the certificate when issued
# PubKey must be the base-64 encoded public key associated with
#    the private key to be archived
#
LOGGING_SIGNED_AUDIT_SERVER_SIDE_KEYGEN_REQUEST_PROCESSED=<type=SERVER_SIDE_KEYGEN_REQUEST_PROCESSED>:[AuditEvent=SERVER_SIDE_KEYGEN_REQUEST_PROCESSED]{0} server-side key generation request processed
#
# Event: KEY_RECOVERY_REQUEST
# - used when key recovery request is made
# Applicable subsystems: CA, OCSP, TKS, TPS, TPS
# RecoveryID must be the recovery request ID
# PubKey must be the base-64 encoded public key associated with
#    the private key to be recovered
#
LOGGING_SIGNED_AUDIT_KEY_RECOVERY_REQUEST_4=<type=KEY_RECOVERY_REQUEST>:[AuditEvent=KEY_RECOVERY_REQUEST][SubjectID={0}][Outcome={1}][RecoveryID={2}][PubKey={3}] key recovery request made
#
# Event: KEY_RECOVERY_AGENT_LOGIN
# - used when DRM agents login as recovery agents to approve
#       key recovery requests
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# RecoveryID must be the recovery request ID
# RecoveryAgent must be the recovery agent the DRM agent is
#       logging in with
#
LOGGING_SIGNED_AUDIT_KEY_RECOVERY_AGENT_LOGIN_4=<type=KEY_RECOVERY_AGENT_LOGIN>:[AuditEvent=KEY_RECOVERY_AGENT_LOGIN][SubjectID={0}][Outcome={1}][RecoveryID={2}][RecoveryAgent={3}] key recovery agent login
#
# Event: KEY_GEN_ASYMMETRIC
# - used when asymmetric keys are generated
#   (like when CA certificate requests are generated -
#      e.g. CA certificate change over, renewal with new key, etc.)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# PubKey must be the base-64 encoded public key material
#
LOGGING_SIGNED_AUDIT_KEY_GEN_ASYMMETRIC_3=<type=KEY_GEN_ASYMMETRIC>:[AuditEvent=KEY_GEN_ASYMMETRIC][SubjectID={0}][Outcome={1}][PubKey={2}] asymmetric key generation
#
# Event: CERT_SIGNING_INFO
# Applicable subsystems: CA
#
LOGGING_SIGNED_AUDIT_CERT_SIGNING_INFO=<type=CERT_SIGNING_INFO>:[AuditEvent=CERT_SIGNING_INFO]{0} certificate signing info
#
# Event: OCSP_SIGNING_INFO
# Applicable subsystems: CA
#
LOGGING_SIGNED_AUDIT_OCSP_SIGNING_INFO=<type=OCSP_SIGNING_INFO>:[AuditEvent=OCSP_SIGNING_INFO]{0} OCSP signing info
#
# Event: CRL_SIGNING_INFO
# Applicable subsystems: CA
#
LOGGING_SIGNED_AUDIT_CRL_SIGNING_INFO=<type=CRL_SIGNING_INFO>:[AuditEvent=CRL_SIGNING_INFO]{0} CRL signing info
#
# Event: NON_PROFILE_CERT_REQUEST
# - used when a non-profile certificate request is made (before approval process)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the UID of user that triggered this event
#        (if CMC enrollment requests signed by an agent, SubjectID should
#        be that of the agent), while
# CertSubject must be the certificate subject name of the certificate request
# ReqID must be the certificate request ID
# ServiceID must be the identity of the servlet that submitted the original
#        request
#
LOGGING_SIGNED_AUDIT_NON_PROFILE_CERT_REQUEST_5=<type=NON_PROFILE_CERT_REQUEST>:[AuditEvent=NON_PROFILE_CERT_REQUEST][SubjectID={0}][Outcome={1}][ReqID={2}][ServiceID={3}][CertSubject={4}] certificate request made without certificate profiles
#
# Event: CMC_REQUEST_RECEIVED
# - used when a CMC request is received.
# Applicable subsystems: CA
# SubjectID must be the UID of user that triggered this event
#        (if CMC requests is signed by an agent, SubjectID should
#        be that of the agent)
#        In case of an unsigned request, it would bear $Unidentified$
#
LOGGING_SIGNED_AUDIT_CMC_REQUEST_RECEIVED_3=<type=CMC_REQUEST_RECEIVED>:[AuditEvent=CMC_REQUEST_RECEIVED][SubjectID={0}][Outcome={1}][CMCRequest={2}] CMC request received
#
# Event: CMC_RESPONSE_SENT
# - used when a CMC response is sent
# Applicable subsystems: CA
# SubjectID must be the UID of user that triggered this event
#
LOGGING_SIGNED_AUDIT_CMC_RESPONSE_SENT_3=<type=CMC_RESPONSE_SENT>:[AuditEvent=CMC_RESPONSE_SENT][SubjectID={0}][Outcome={1}][CMCResponse={2}] CMC response sent
#
# Event: PROFILE_CERT_REQUEST
# - used when a profile certificate request is made (before approval process)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the UID of user that triggered this event
#        (if CMC enrollment requests signed by an agent, SubjectID should
#        be that of the agent), while
# CertSubject must be the certificate subject name of the certificate request
# ReqID must be the certificate request ID
# ProfileID must be one of the certificate profiles defined by the
#        administrator
#
LOGGING_SIGNED_AUDIT_PROFILE_CERT_REQUEST_5=<type=PROFILE_CERT_REQUEST>:[AuditEvent=PROFILE_CERT_REQUEST][SubjectID={0}][Outcome={1}][ReqID={2}][ProfileID={3}][CertSubject={4}] certificate request made with certificate profiles
#
# Event: CERT_REQUEST_PROCESSED
# - used when certificate request has just been through the approval process
# Applicable subsystems: CA, OCSP, TKS, TPS
# SubjectID must be the UID of the agent who approves, rejects, or cancels
#        the certificate request
# ReqID must be the request ID
# InfoName must be value "certificate" (in case of approval), "rejectReason"
#        (in case of reject), or "cancelReason" (in case of cancel)
# InfoValue must contain the certificate (in case of success), a reject reason in
#        text, or a cancel reason in text
#
LOGGING_SIGNED_AUDIT_CERT_REQUEST_PROCESSED=<type=CERT_REQUEST_PROCESSED>:[AuditEvent=CERT_REQUEST_PROCESSED]{0} certificate request processed
#
# Event: CERT_STATUS_CHANGE_REQUEST
# - used when a certificate status change request (e.g. revocation)
#        is made (before approval process)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ReqID must be the request ID
# CertSerialNum must be the serial number (in hex) of the certificate to be revoked
# RequestType must be "revoke", "on-hold", "off-hold"
#
LOGGING_SIGNED_AUDIT_CERT_STATUS_CHANGE_REQUEST=<type=CERT_STATUS_CHANGE_REQUEST>:[AuditEvent=CERT_STATUS_CHANGE_REQUEST]{0} certificate revocation/unrevocation request made
#
# Event: CERT_STATUS_CHANGE_REQUEST_PROCESSED
# - used when certificate status is changed (revoked, expired, on-hold,
#        off-hold)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the UID of the agent that processed the request
# ReqID must be the request ID
# RequestType must be "revoke", "on-hold", "off-hold"
# Approval must be "complete", "rejected", or "canceled"
#        (note that "complete" means "approved")
# CertSerialNum must be the serial number (in hex)
# RevokeReasonNum must contain one of the following number:
#       reason number       reason
#       --------------------------------------
#       0              Unspecified
#       1              Key compromised
#       2              CA key compromised (should not be used)
#       3              Affiliation changed
#       4              Certificate superceded
#       5              Cessation of operation
#       6              Certificate is on-hold
#
LOGGING_SIGNED_AUDIT_CERT_STATUS_CHANGE_REQUEST_PROCESSED=<type=CERT_STATUS_CHANGE_REQUEST_PROCESSED>:[AuditEvent=CERT_STATUS_CHANGE_REQUEST_PROCESSED]{0} certificate status change request processed
#
# Event: AUTHZ with [Outcome=Success]
# - used when authorization is successful
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome must be success for this event
# aclResource must be the ACL resource ID as defined in ACL resource list
# Op must be one of the operations as defined with the ACL statement
#    e.g. "read" for an ACL statement containing "(read,write)"
#
LOGGING_SIGNED_AUDIT_AUTHZ_SUCCESS=<type=AUTHZ>:[AuditEvent=AUTHZ]{0} authorization success
#
# Event: AUTHZ with [Outcome=Failure]
# - used when authorization has failed
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome must be failure for this event
# aclResource must be the ACL resource ID as defined in ACL resource list
# Op must be one of the operations as defined with the ACL statement
#    e.g. "read" for an ACL statement containing "(read,write)"
#
LOGGING_SIGNED_AUDIT_AUTHZ_FAIL=<type=AUTHZ>:[AuditEvent=AUTHZ]{0} authorization failure
#
# Event: INTER_BOUNDARY
# - used when inter-CIMC_Boundary data transfer is successful
#   (this is used when data does not need to be captured)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ProtectionMethod must be one of the following: "SSL", or "unknown"
# ReqType must be the request type
# ReqID must be the request ID
#
LOGGING_SIGNED_AUDIT_INTER_BOUNDARY_SUCCESS_5=<type=INTER_BOUNDARY>:[AuditEvent=INTER_BOUNDARY][SubjectID={0}][Outcome={1}][ProtectionMethod={2}][ReqType={3}][ReqID={4}] inter-CIMC_Boundary communication (data exchange) success
#
# Event: AUTH with [Outcome=Failure]
# - used when authentication fails (in case of SSL-client auth,
#    only webserver env can pick up the SSL violation;
#    CS authMgr can pick up certificate mis-match, so this event is used)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome should always be "failure" in this event
#   (obviously, if authentication failed, you won't have a valid SubjectID, so
#       in this case, SubjectID should be $Unidentified$)
# AuthMgr must be the authentication manager instance name that did
#   this authentication
# AttemptedCred must be the credential attempted and failed
#
LOGGING_SIGNED_AUDIT_AUTH_FAIL=<type=AUTH>:[AuditEvent=AUTH]{0} authentication failure
#
# Event: AUTH with [Outcome=Success]
# - used when authentication succeeded
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome should always be "success" in this event
# AuthMgr must be the authentication manager instance name that did
#   this authentication
#
LOGGING_SIGNED_AUDIT_AUTH_SUCCESS=<type=AUTH>:[AuditEvent=AUTH]{0} authentication success
#
# Event: CERT_PROFILE_APPROVAL
# - used when an agent approves/disapproves a certificate profile set by the
#     administrator for automatic approval
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ProfileID must be one of the profiles defined by the administrator
#           and to be approved by an agent
# Op must be "approve" or "disapprove"
#
LOGGING_SIGNED_AUDIT_CERT_PROFILE_APPROVAL_4=<type=CERT_PROFILE_APPROVAL>:[AuditEvent=CERT_PROFILE_APPROVAL][SubjectID={0}][Outcome={1}][ProfileID={2}][Op={3}] certificate profile approval
#
# Event: PROOF_OF_POSSESSION
# - used for proof of possession during certificate enrollment processing
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
#
LOGGING_SIGNED_AUDIT_PROOF_OF_POSSESSION_3=<type=PROOF_OF_POSSESSION>:[AuditEvent=PROOF_OF_POSSESSION][SubjectID={0}][Outcome={1}][Info={2}] proof of possession
#
# Event: CMC_PROOF_OF_IDENTIFICATION
# - used for proof of identification during CMC request processing
# Applicable subsystems: CA
# - In case of success, "SubjectID" is the actual identified identification;
# - In case of failure, "SubjectID" is the attempted identification
#
LOGGING_SIGNED_AUDIT_CMC_PROOF_OF_IDENTIFICATION_3=<type=CMC_PROOF_OF_IDENTIFICATION>:[AuditEvent=CMC_PROOF_OF_IDENTIFICATION][SubjectID={0}][Outcome={1}][Info={2}] proof of identification in CMC request
#
# Event: CMC_ID_POP_LINK_WITNESS
# - used for identification and POP linking verification during CMC request processing
# Applicable subsystems: CA
#
LOGGING_SIGNED_AUDIT_CMC_ID_POP_LINK_WITNESS_3=<type=CMC_ID_POP_LINK_WITNESS>:[AuditEvent=CMC_ID_POP_LINK_WITNESS][SubjectID={0}][Outcome={1}][Info={2}] Identification Proof of Possession linking witness verification
#
# Event: SCHEDULE_CRL_GENERATION
# - used when CRL generation is scheduled
# Applicable subsystems: CA
# Outcome is "success" when CRL generation is scheduled successfully, "failure" otherwise
#
LOGGING_SIGNED_AUDIT_SCHEDULE_CRL_GENERATION=<type=SCHEDULE_CRL_GENERATION>:[AuditEvent=SCHEDULE_CRL_GENERATION]{0} schedule for CRL generation
#
# Event: DELTA_CRL_GENERATION
# - used when delta CRL generation is complete
# Applicable subsystems: CA
# Outcome is "success" when delta CRL is generated successfully, "failure" otherwise
#
LOGGING_SIGNED_AUDIT_DELTA_CRL_GENERATION=<type=DELTA_CRL_GENERATION>:[AuditEvent=DELTA_CRL_GENERATION]{0} Delta CRL generation
#
# Event: DELTA_CRL_PUBLISHING
# - used when delta CRL publishing is complete
# Applicable subsystems: CA
# Outcome is "success" when delta CRL is publishing successfully, "failure" otherwise
#
LOGGING_SIGNED_AUDIT_DELTA_CRL_PUBLISHING=<type=DELTA_CRL_PUBLISHING>:[AuditEvent=DELTA_CRL_PUBLISHING]{0} Delta CRL publishing
#
# Event: FULL_CRL_GENERATION
# - used when full CRL generation is complete
# Applicable subsystems: CA
# Outcome is "success" when full CRL is generated successfully, "failure" otherwise
#
LOGGING_SIGNED_AUDIT_FULL_CRL_GENERATION=<type=FULL_CRL_GENERATION>:[AuditEvent=FULL_CRL_GENERATION]{0} Full CRL generation
#
# Event: FULL_CRL_PUBLISHING
# - used when full  CRL publishing is complete
# Applicable subsystems: CA
# Outcome is "success" when full CRL is publishing successfully, "failure" otherwise
#
LOGGING_SIGNED_AUDIT_FULL_CRL_PUBLISHING=<type=FULL_CRL_PUBLISHING>:[AuditEvent=FULL_CRL_PUBLISHING]{0} Full CRL publishing
#
# Event: CRL_RETRIEVAL
# - used when CRLs are retrieved by the OCSP Responder
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome is "success" when CRL is retrieved successfully, "failure" otherwise
# CRLnum is the CRL number that identifies the CRL
#
LOGGING_SIGNED_AUDIT_CRL_RETRIEVAL_3=<type=CRL_RETRIEVAL>:[AuditEvent=CRL_RETRIEVAL][SubjectID={0}][Outcome={1}][CRLnum={2}] CRL retrieval
#
# Event: CRL_VALIDATION
# - used when CRL is retrieved and validation process occurs
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
#
LOGGING_SIGNED_AUDIT_CRL_VALIDATION_2=<type=CRL_VALIDATION>:[AuditEvent=CRL_VALIDATION][SubjectID={0}][Outcome={1}] CRL validation
#
# Event: OCSP_ADD_CA_REQUEST
# - used when a CA is attempted to be added to the OCSP Responder
# Applicable subsystems: OCSP
# Outcome is "success" as the request is made
# CA must be the base-64 encoded PKCS7 certificate (or chain)
#
LOGGING_SIGNED_AUDIT_OCSP_ADD_CA_REQUEST=<type=OCSP_ADD_CA_REQUEST>:[AuditEvent=OCSP_ADD_CA_REQUEST]{0} request to add a CA for OCSP Responder
#
# Event: OCSP_ADD_CA_REQUEST_PROCESSED
# - used when an add CA request to the OCSP Responder is processed
# Applicable subsystems: OCSP
# Outcome is "success" when CA is added successfully, "failure" otherwise
# CASubjectDN is the subject DN of the leaf CA cert in the chain
#
LOGGING_SIGNED_AUDIT_OCSP_ADD_CA_REQUEST_PROCESSED=<type=OCSP_ADD_CA_REQUEST_PROCESSED>:[AuditEvent=OCSP_ADD_CA_REQUEST_PROCESSED]{0} Add CA for OCSP Responder
#
# Event: OCSP_REMOVE_CA_REQUEST
# - used when a CA is attempted to be removed from the OCSP Responder
# Applicable subsystems: OCSP
# Outcome is "success" as the request is made
# CA must be the DN id of the CA
LOGGING_SIGNED_AUDIT_OCSP_REMOVE_CA_REQUEST=<type=OCSP_REMOVE_CA_REQUEST>:[AuditEvent=OCSP_REMOVE_CA_REQUEST]{0} request to remove a CA from OCSP Responder
#
# Event: OCSP_REMOVE_CA_REQUEST_PROCESSED with [Outcome=Success]
# - used when a remove CA request to the OCSP Responder is processed successfully
# Applicable subsystems: OCSP
# Outcome is "success" when CA is removed successfully, "failure" otherwise
# CASubjectDN is the subject DN of the leaf CA cert in the chain
#
LOGGING_SIGNED_AUDIT_OCSP_REMOVE_CA_REQUEST_PROCESSED_SUCCESS=<type=OCSP_REMOVE_CA_REQUEST_PROCESSED>:[AuditEvent=OCSP_REMOVE_CA_REQUEST_PROCESSED]{0} Remove CA for OCSP Responder is successful
#
# Event: OCSP_REMOVE_CA_REQUEST_PROCESSED with [Outcome=Failure]
# - used when a remove CA request to the OCSP Responder is processed and failed
# Applicable subsystems: OCSP
# Outcome is  "failure"
# CASubjectDN is  DN ID of the CA
#
LOGGING_SIGNED_AUDIT_OCSP_REMOVE_CA_REQUEST_PROCESSED_FAILURE=<type=OCSP_REMOVE_CA_REQUEST_PROCESSED>:[AuditEvent=OCSP_REMOVE_CA_REQUEST_PROCESSED]{0} Remove CA for OCSP Responder has failed
#
# Event: OCSP_GENERATION
# - used when an OCSP response generated is complete
# Applicable subsystems: CA, OCSP
# Outcome is "success" when OCSP response is generated successfully, "failure" otherwise
#
LOGGING_SIGNED_AUDIT_OCSP_GENERATION=<type=OCSP_GENERATION>:[AuditEvent=OCSP_GENERATION]{0} OCSP response generation
#
# Event: RANDOM_GENERATION
# - used when a random number generation is complete
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Info:
# - Caller is PKI code that calls the random number generator
# - Size is size of random number in bytes
# Outcome is "success" when a random number is generated successfully, "failure" otherwise
LOGGING_SIGNED_AUDIT_RANDOM_GENERATION=<type=RANDOM_GENERATION>:[AuditEvent=RANDOM_GENERATION]{0} Random number generation
#
# Event: CMC_SIGNED_REQUEST_SIG_VERIFY
# - used when agent signed CMC certificate requests or revocation requests
#   are submitted and signature is verified
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ReqType must be the request type (enrollment, or revocation)
# CertSubject must be the certificate subject name of the certificate request
# SignerInfo must be a unique String representation for the signer
#
LOGGING_SIGNED_AUDIT_CMC_SIGNED_REQUEST_SIG_VERIFY=<type=CMC_SIGNED_REQUEST_SIG_VERIFY>:[AuditEvent=CMC_SIGNED_REQUEST_SIG_VERIFY]{0} agent signed CMC request signature verification
#
# Event: CMC_USER_SIGNED_REQUEST_SIG_VERIFY
# - used when CMC (user-signed or self-signed) certificate requests or revocation requests
#   are submitted and signature is verified
# Applicable subsystems: CA
# ReqType must be the request type (enrollment, or revocation)
# CertSubject must be the certificate subject name of the certificate request
# CMCSignerInfo must be a unique String representation for the CMC request signer
#
LOGGING_SIGNED_AUDIT_CMC_USER_SIGNED_REQUEST_SIG_VERIFY_SUCCESS=<type=CMC_USER_SIGNED_REQUEST_SIG_VERIFY>:[AuditEvent=CMC_USER_SIGNED_REQUEST_SIG_VERIFY]{0} User signed CMC request signature verification success
LOGGING_SIGNED_AUDIT_CMC_USER_SIGNED_REQUEST_SIG_VERIFY_FAILURE=<type=CMC_USER_SIGNED_REQUEST_SIG_VERIFY>:[AuditEvent=CMC_USER_SIGNED_REQUEST_SIG_VERIFY]{0} User signed CMC request signature verification failure
#
# Event: COMPUTE_RANDOM_DATA_REQUEST
# - used for TPS to TKS to get random challenge data
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# AgentID must be the trusted agent id used to make the request
#
LOGGING_SIGNED_AUDIT_COMPUTE_RANDOM_DATA_REQUEST_2=<type=COMPUTE_RANDOM_DATA_REQUEST>:[AuditEvent=COMPUTE_RANDOM_DATA_REQUEST][Outcome={0}][AgentID={1}] TKS Compute random data request
#
# Event: COMPUTE_RANDOM_DATA_REQUEST_PROCESSED with [Outcome=Success]
# - used for TPS to TKS to get random challenge data
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome is SUCCESS or FAILURE
# Status is 0 for no error.
# AgentID must be the trusted agent id used to make the request
LOGGING_SIGNED_AUDIT_COMPUTE_RANDOM_DATA_REQUEST_PROCESSED_SUCCESS=<type=COMPUTE_RANDOM_DATA_REQUEST_PROCESSED>:[AuditEvent=COMPUTE_RANDOM_DATA_REQUEST_PROCESSED]{0} TKS Compute random data request processed successfully
#
# Event: COMPUTE_RANDOM_DATA_REQUEST_PROCESSED with [Outcome=Failure]
# - used for TPS to TKS to get random challenge data
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# Outcome is SUCCESS or FAILURE
# Status is 0 for no error.
# Error gives the error message
# AgentID must be the trusted agent id used to make the request
#
LOGGING_SIGNED_AUDIT_COMPUTE_RANDOM_DATA_REQUEST_PROCESSED_FAILURE=<type=COMPUTE_RANDOM_DATA_REQUEST_PROCESSED>:[AuditEvent=COMPUTE_RANDOM_DATA_REQUEST_PROCCESED]{0} TKS Compute random data request failed
#
# Event: COMPUTE_SESSION_KEY_REQUEST
# - used for TPS to TKS to get a sessoin key for secure channel setup
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token establishing the secure channel
# AgentID must be the trusted agent id used to make the request
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the
##   CUID.  Renamed to "CUID_encoded" and "KDD_encoded" to reflect fact that
##   encoded parameters are being logged.
# CUID_encoded must be the special-encoded CUID of the token establishing the secure channel
# KDD_encoded must be the special-encoded KDD of the token establishing the secure channel
#
LOGGING_SIGNED_AUDIT_COMPUTE_SESSION_KEY_REQUEST_4=<type=COMPUTE_SESSION_KEY_REQUEST>:[AuditEvent=COMPUTE_SESSION_KEY_REQUEST][CUID_encoded={0}][KDD_encoded={1}][Outcome={2}][AgentID={3}] TKS Compute session key request
#
# Event: COMPUTE_SESSION_KEY_REQUEST_PROCESSED with [Outcome=Success]
# - request for TPS to TKS to get a sessoin key for secure channel processed
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token establishing the secure channel
# AgentID must be the trusted agent id used to make the request
# Outcome is SUCCESS or FAILURE
# Status is 0 for no error.
# IsCryptoValidate tells if the card cryptogram is to be validated
# IsServerSideKeygen tells if the keys are to be generated on server
# SelectedToken is the cryptographic token performing key operations
# KeyNickName is the number keyset ex: #01#01
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the
##   CUID.  Renamed to "CUID_decoded" and "KDD_decoded" to reflect fact
##   that decoded parameters are now logged.
##       Also added TKSKeyset, KeyInfo_KeyVersion,
##            NistSP800_108KdfOnKeyVersion, NistSP800_108KdfUseCuidAsKdd
# CUID_decoded must be the ASCII-HEX representation of the CUID of the token establishing the secure channel
# KDD_decoded must be the ASCII-HEX representation of the KDD of the token establishing the secure channel
# TKSKeyset is the name of the TKS keyset being used for this request.
# KeyInfo_KeyVersion is the key version number requested in hex.
# NistSP800_108KdfOnKeyVersion lists the value of the corresponding setting in hex.
# NistSP800_108KdfUseCuidAsKdd lists the value of the corresponding setting in hex.
#
LOGGING_SIGNED_AUDIT_COMPUTE_SESSION_KEY_REQUEST_PROCESSED_SUCCESS=<type=COMPUTE_SESSION_KEY_REQUEST_PROCESSED>:[AuditEvent=COMPUTE_SESSION_KEY_REQUEST_PROCESSED]{0} TKS Compute session key request processed successfully
#
# Event: COMPUTE_SESSION_KEY_REQUEST_PROCESSED with [Outcome=Failure]
# - request for TPS to TKS to get a sessoin key for secure channel processed
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token establishing the secure channel
# Outcome is SUCCESS or FAILURE
# Status is error code or 0 for no error.
# AgentID must be the trusted agent id used to make the request
# status is 0 for success, non-zero for various errors
# IsCryptoValidate tells if the card cryptogram is to be validated
# IsServerSideKeygen tells if the keys are to be generated on server
# SelectedToken is the cryptographic token performing key operations
# KeyNickName is the numeric keyset ex: #01#01
# Error gives the error message
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_decoded" and "KDD_decoded" to reflect fact that decoded parameters are now logged.
##                       Also added TKSKeyset, KeyInfo_KeyVersion, NistSP800_108KdfOnKeyVersion, NistSP800_108KdfUseCuidAsKdd
# CUID_decoded must be the ASCII-HEX representation of the CUID of the token establishing the secure channel
# KDD_decoded must be the ASCII-HEX representation of the KDD of the token establishing the secure channel
# TKSKeyset is the name of the TKS keyset being used for this request.
# KeyInfo_KeyVersion is the key version number requested in hex.
# NistSP800_108KdfOnKeyVersion lists the value of the corresponding setting in hex.
# NistSP800_108KdfUseCuidAsKdd lists the value of the corresponding setting in hex
#
LOGGING_SIGNED_AUDIT_COMPUTE_SESSION_KEY_REQUEST_PROCESSED_FAILURE=<type=COMPUTE_SESSION_KEY_REQUEST_PROCESSED>:[AuditEvent=COMPUTE_SESSION_KEY_REQUEST_PROCESSED]{0} TKS Compute session key request failed
#
# Event: DIVERSIFY_KEY_REQUEST
# - request for TPS to TKS to do key change over
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token requesting key change over
# AgentID must be the trusted agent id used to make the request
# status is 0 for success, non-zero for various errors
# oldMasterKeyName is the old master key name
# newMasterKeyName is the new master key name
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_encoded" and "KDD_encoded" to reflect fact that encoded parameters are being logged.
# CUID_encoded must be the special-encoded CUID of the token establishing the secure channel
# KDD_encoded must be the special-encoded KDD of the token establishing the secure channel
#
LOGGING_SIGNED_AUDIT_DIVERSIFY_KEY_REQUEST_6=<type=DIVERSIFY_KEY_REQUEST>:[AuditEvent=DIVERSIFY_KEY_REQUEST][CUID_encoded={0}][KDD_encoded={1}][Outcome={2}][AgentID={3}][oldMasterKeyName={4}][newMasterKeyName={5}] TKS Key Change Over request
#
# Event: DIVERSIFY_KEY_REQUEST_PROCESSED with [Outcome=Success]
# - request for TPS to TKS to do key change over request processed
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token requesting key change over
# AgentID must be the trusted agent id used to make the request
# Outcome is SUCCESS or FAILURE
# status is 0 for success, non-zero for various errors
# oldMasterKeyName is the old master key name
# newMasterKeyName is the new master key name
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_decoded" and "KDD_decoded" to reflect fact that decoded parameters are now logged.
##                       Also added TKSKeyset, OldKeyInfo_KeyVersion, NewKeyInfo_KeyVersion, NistSP800_108KdfOnKeyVersion, NistSP800_108KdfUseCuidAsKdd
# CUID_decoded must be the ASCII-HEX representation of the CUID of the token establishing the secure channel
# KDD_decoded must be the ASCII-HEX representation of the KDD of the token establishing the secure channel
# TKSKeyset is the name of the TKS keyset being used for this request.
# OldKeyInfo_KeyVersion is the old key version number in hex.
# NewKeyInfo_KeyVersion is the new key version number in hex.
# NistSP800_108KdfOnKeyVersion lists the value of the corresponding setting in hex.
# NistSP800_108KdfUseCuidAsKdd lists the value of the corresponding setting in hex.
#
LOGGING_SIGNED_AUDIT_DIVERSIFY_KEY_REQUEST_PROCESSED_SUCCESS=<type=DIVERSIFY_KEY_REQUEST_PROCESSED>:[AuditEvent=DIVERSIFY_KEY_REQUEST_PROCESSED]{0} TKS Key Change Over request processed successfully
#
# Event: DIVERSIFY_KEY_REQUEST_PROCESSED with [Outcome=Failure]
# - request for TPS to TKS to do key change over request processed
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token requesting key change over
# AgentID must be the trusted agent id used to make the request
# Outcome is SUCCESS or FAILURE
# status is 0 for success, non-zero for various errors
# oldMasterKeyName is the old master key name
# newMasterKeyName is the new master key name
# Error gives the error message
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_decoded" and "KDD_decoded" to reflect fact that decoded parameters are now logged.
##                       Also added TKSKeyset, OldKeyInfo_KeyVersion, NewKeyInfo_KeyVersion, NistSP800_108KdfOnKeyVersion, NistSP800_108KdfUseCuidAsKdd
# CUID_decoded must be the ASCII-HEX representation of the CUID of the token establishing the secure channel
# KDD_decoded must be the ASCII-HEX representation of the KDD of the token establishing the secure channel
# TKSKeyset is the name of the TKS keyset being used for this request.
# OldKeyInfo_KeyVersion is the old key version number in hex.
# NewKeyInfo_KeyVersion is the new key version number in hex.
# NistSP800_108KdfOnKeyVersion lists the value of the corresponding setting in hex.
# NistSP800_108KdfUseCuidAsKdd lists the value of the corresponding setting in hex
#
LOGGING_SIGNED_AUDIT_DIVERSIFY_KEY_REQUEST_PROCESSED_FAILURE=<type=DIVERSIFY_KEY_REQUEST_PROCESSED>:[AuditEvent=DIVERSIFY_KEY_REQUEST_PROCESSED]{0} TKS Key Change Over request failed
#
# Event: ENCRYPT_DATA_REQUEST
# - request from TPS to TKS to encrypt data
#        (or generate random data and encrypt)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token requesting encrypt data
# AgentID must be the trusted agent id used to make the request
# status is 0 for success, non-zero for various errors
# isRandom tells if the data is randomly generated on TKS
#
LOGGING_SIGNED_AUDIT_ENCRYPT_DATA_REQUEST_4=<type=ENCRYPT_DATA_REQUEST>:[AuditEvent=ENCRYPT_DATA_REQUEST][SubjectID={0}][status={1}][AgentID={2}][isRandom={3}] TKS encrypt data request
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_encoded" and "KDD_encoded" to reflect fact that encoded parameters are being logged.
# CUID_encoded must be the special-encoded CUID of the token establishing the secure channel
# KDD_encoded must be the special-encoded KDD of the token establishing the secure channel
#
LOGGING_SIGNED_AUDIT_ENCRYPT_DATA_REQUEST_5=<type=ENCRYPT_DATA_REQUEST>:[AuditEvent=ENCRYPT_DATA_REQUEST][CUID_encoded={0}][KDD_encoded={1}][status={2}][AgentID={3}][isRandom={4}] TKS encrypt data request
#
# Event: ENCRYPT_DATA_REQUEST_PROCESSED with [Outcome=Success]
# - request from TPS to TKS to encrypt data
#        (or generate random data and encrypt)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token requesting encrypt data
# AgentID must be the trusted agent id used to make the request
# Outcome is SUCCESS or FAILURE
# status is 0 for success, non-zero for various errors
# isRandom tells if the data is randomly generated on TKS
# SelectedToken is the cryptographic token performing key operations
# KeyNickName is the numeric keyset ex: #01#01
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_decoded" and "KDD_decoded" to reflect fact that decoded parameters are now logged.
##                       Also added TKSKeyset, KeyInfo_KeyVersion, NistSP800_108KdfOnKeyVersion, NistSP800_108KdfUseCuidAsKdd
# CUID_decoded must be the ASCII-HEX representation of the CUID of the token establishing the secure channel
# KDD_decoded must be the ASCII-HEX representation of the KDD of the token establishing the secure channel
# TKSKeyset is the name of the TKS keyset being used for this request.
# KeyInfo_KeyVersion is the key version number requested in hex.
# NistSP800_108KdfOnKeyVersion lists the value of the corresponding setting in hex.
# NistSP800_108KdfUseCuidAsKdd lists the value of the corresponding setting in hex.
#
LOGGING_SIGNED_AUDIT_ENCRYPT_DATA_REQUEST_PROCESSED_SUCCESS=<type=ENCRYPT_DATA_REQUEST_PROCESSED>:[AuditEvent=ENCRYPT_DATA_REQUEST_PROCESSED]{0} TKS encrypt data request processed successfully
#
# Event: ENCRYPT_DATA_REQUEST_PROCESSED with [Outcome=Failure]
# - request from TPS to TKS to encrypt data
#        (or generate random data and encrypt)
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# SubjectID must be the CUID of the token requesting encrypt data
# AgentID must be the trusted agent id used to make the request
# Outocme is SUCCESS or FAILURE
# status is 0 for success, non-zero for various errors
# isRandom tells if the data is randomly generated on TKS
# SelectedToken is the cryptographic token performing key operations
# KeyNickName is the numeric keyset ex: #01#01
# Error gives the error message
#
## AC: KDF SPEC CHANGE - Need to log both the KDD and CUID, not just the CUID.  Renamed to "CUID_decoded" and "KDD_decoded" to reflect fact that decoded parameters are now logged.
##                       Also added TKSKeyset, KeyInfo_KeyVersion, NistSP800_108KdfOnKeyVersion, NistSP800_108KdfUseCuidAsKdd
# CUID_decoded must be the ASCII-HEX representation of the CUID of the token establishing the secure channel
# KDD_decoded must be the ASCII-HEX representation of the KDD of the token establishing the secure channel
# TKSKeyset is the name of the TKS keyset being used for this request.
# KeyInfo_KeyVersion is the key version number requested in hex.
# NistSP800_108KdfOnKeyVersion lists the value of the corresponding setting in hex.
# NistSP800_108KdfUseCuidAsKdd lists the value of the corresponding setting in hex.
#
LOGGING_SIGNED_AUDIT_ENCRYPT_DATA_REQUEST_PROCESSED_FAILURE=<type=ENCRYPT_DATA_REQUEST_PROCESSED>:[AuditEvent=ENCRYPT_DATA_REQUEST_PROCESSED]{0} TKS encrypt data request failed
#
# Event: SECURITY_DOMAIN_UPDATE
# - used when updating contents of security domain
#       (add/remove a subsystem)
# Applicable subsystems: CA, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_SECURITY_DOMAIN_UPDATE_1=<type=SECURITY_DOMAIN_UPDATE>:[AuditEvent=SECURITY_DOMAIN_UPDATE][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] security domain update
#
# Event: CONFIG_SERIAL_NUMBER
# - used when configuring serial number ranges
#      (when requesting a serial number range when cloning, for example)
# Applicable subsystems: CA, KRA, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_CONFIG_SERIAL_NUMBER_1=<type=CONFIG_SERIAL_NUMBER>:[AuditEvent=CONFIG_SERIAL_NUMBER][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] serial number range update
#
# Event: SECURITY_DATA_ARCHIVAL_REQUEST_PROCESSED
# - used when user security data archive request is processed
#    this is when DRM receives and processed the request
# Applicable subsystems: KRA
# ArchivalRequestID is the requestID provided by the CA through the connector
#    It is used to track the request through from CA to KRA.
# RequestId is the KRA archival request ID
# ClientKeyID must be the user supplied client ID associated with
#    the security data to be archived
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_ARCHIVAL_REQUEST_PROCESSED=<type=SECURITY_DATA_ARCHIVAL_REQUEST_PROCESSED>:[AuditEvent=SECURITY_DATA_ARCHIVAL_REQUEST_PROCESSED]{0} security data archival request processed
#
# Event: SECURITY_DATA_ARCHIVAL_REQUEST
# - used when security data recovery request is made
# Applicable subsystems: CA, KRA
# ArchivalRequestID is the requestID provided by the CA through the connector
#    It is used to track the request through from CA to KRA.
# RequestId is the KRA archival request ID
# ClientKeyID must be the user supplied client ID associated with
#    the security data to be archived
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_ARCHIVAL_REQUEST=<type=SECURITY_DATA_ARCHIVAL_REQUEST>:[AuditEvent=SECURITY_DATA_ARCHIVAL_REQUEST]{0} security data archival request made
#
# Event: SECURITY_DATA_RECOVERY_REQUEST_PROCESSED
# - used when security data recovery request is processed
# Applicable subsystems: KRA
# RecoveryID must be the recovery request ID
# KeyID is the ID of the security data being requested to be recovered
# RecoveryAgents are the UIDs of the recovery agents approving this request
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_RECOVERY_REQUEST_PROCESSED=<type=SECURITY_DATA_RECOVERY_REQUEST_PROCESSED>:[AuditEvent=SECURITY_DATA_RECOVERY_REQUEST_PROCESSED]{0} security data recovery request processed
#
# Event: SECURITY_DATA_RECOVERY_REQUEST
# - used when security data recovery request is made
# Applicable subsystems: KRA
# RecoveryID must be the recovery request ID
# DataID is the ID of the security data to be recovered
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_RECOVERY_REQUEST=<type=SECURITY_DATA_RECOVERY_REQUEST>:[AuditEvent=SECURITY_DATA_RECOVERY_REQUEST]{0} security data recovery request made
#
# Event: SECURITY_DATA_RECOVERY_REQUEST_STATE_CHANGE
# - used when DRM agents login as recovery agents to change
#   the state of key recovery requests
# Applicable subsystems: KRA
# RecoveryID must be the recovery request ID
# Operation is the operation performed (approve, reject, cancel etc.)
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_RECOVERY_REQUEST_STATE_CHANGE=<type=SECURITY_DATA_RECOVERY_REQUEST_STATE_CHANGE>:[AuditEvent=SECURITY_DATA_RECOVERY_REQUEST_STATE_CHANGE]{0} security data recovery request state change
#
# Event: SECURITY_DATA_EXPORT_KEY
# - used when user attempts to retrieve key after the recovery request
#   has been approved.
# Applicable subsystems: KRA
# RecoveryID must be the recovery request ID
# KeyID is the key being retrieved
# Info is the failure reason if the export fails.
# PubKey is the public key for the private key being retrieved
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_EXPORT_KEY=<type=SECURITY_DATA_EXPORT_KEY>:[AuditEvent=SECURITY_DATA_EXPORT_KEY]{0} security data retrieval request
#
# Event: SECURITY_DATA_INFO
# - used when user attempts to get metadata information about a key
# Applicable subsystems: KRA
# RecoveryID must be the recovery request ID
# KeyID is the key being retrieved
# Info is the failure reason if the export fails.
# PubKey is the public key for the private key being retrieved
#
LOGGING_SIGNED_AUDIT_SECURITY_DATA_INFO=<type=SECURITY_DATA_INFO>:[AuditEvent=SECURITY_DATA_INFO]{0} security data info request
#
# Event: KEY_STATUS_CHANGE
# - used when modify key status is executed
# Applicable subsystems: KRA
# keyID must be an existing key id in the database
# oldStatus is the old status to change from
# newStatus is the new status to change to
#
LOGGING_SIGNED_AUDIT_KEY_STATUS_CHANGE=<type=KEY_STATUS_CHANGE>:[AuditEvent=KEY_STATUS_CHANGE]{0} Key Status Change
#
# Event: SYMKEY_GENERATION_REQUEST_PROCESSED
# - used when symmetric key generation request is processed
#    this is when DRM receives and processes the request
# Applicable subsystems: KRA
# Client ID must be the user supplied client ID associated with
#    the symmetric key to be generated and archived
#
LOGGING_SIGNED_AUDIT_SYMKEY_GEN_REQUEST_PROCESSED=<type=SYMKEY_GENERATION_REQUEST_PROCESSED>:[AuditEvent=SYMKEY_GENERATION_REQUEST_PROCESSED]{0} symkey generation request processed
#
# Event: SYMKEY_GENERATION_REQUEST
# - used when symmetric key generation request is made
# Applicable subsystems: KRA
# ClientKeyID is the ID of the symmetirc key to be generated and archived
#
LOGGING_SIGNED_AUDIT_SYMKEY_GENERATION_REQUEST=<type=SYMKEY_GENERATION_REQUEST>:[AuditEvent=SYMKEY_GENERATION_REQUEST]{0} symkey generation request made
#
# Event: ASYMKEY_GENERATION_REQUEST
# - used when asymmetric key generation request is made
# Applicable subsystems: KRA
#
LOGGING_SIGNED_AUDIT_ASYMKEY_GENERATION_REQUEST=<type=ASYMKEY_GENERATION_REQUEST>:[AuditEvent=ASYMKEY_GENERATION_REQUEST]{0} Asymkey generation request made
#
# Event: ASYMKEY_GENERATION_REQUEST_PROCESSED
# - used when a request to generate asymmetric keys received by the DRM
#   is processed.
# Applicable subsystems: KRA
#
LOGGING_SIGNED_AUDIT_ASYMKEY_GEN_REQUEST_PROCESSED=<type=ASYMKEY_GENERATION_REQUEST_PROCESSED>:[AuditEvent=ASYMKEY_GENERATION_REQUEST_PROCESSED]{0} Asymkey generation request processed
#
# Event: TOKEN_CERT_ENROLLMENT
# - used for TPS when token certificate enrollment request is made
# Applicable subsystems: TPS
# - Info is normally used to store more info in case of failure
#
LOGGING_SIGNED_AUDIT_TOKEN_CERT_ENROLLMENT_9=<type=TOKEN_CERT_ENROLLMENT>:[AuditEvent=TOKEN_CERT_ENROLLMENT][IP={0}][SubjectID={1}][CUID={2}][Outcome={3}][tokenType={4}][KeyVersion={5}][Serial={6}][CA_ID={7}][Info={8}] token certificate enrollment request made
#
# Event: TOKEN_CERT_RENEWAL
# - used for TPS when token certificate renewal request is made
# Applicable subsystems: TPS
# - Info is normally used to store more info in case of failure
#
LOGGING_SIGNED_AUDIT_TOKEN_CERT_RENEWAL_9=<type=TOKEN_CERT_RENEWAL>:[AuditEvent=TOKEN_CERT_RENEWAL][IP={0}][SubjectID={1}][CUID={2}][Outcome={3}][tokenType={4}][KeyVersion={5}][Serial={6}][CA_ID={7}][Info={8}] token certificate renewal request made
#
# Event: TOKEN_CERT_RETRIEVAL
# - used for TPS when token certificate retrieval request is made;
#   usually used during recovery, along with LOGGING_SIGNED_AUDIT_TOKEN_KEY_RECOVERY
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_CERT_RETRIEVAL_9=<type=TOKEN_CERT_RETRIEVAL>:[AuditEvent=TOKEN_CERT_RETRIEVAL][IP={0}][SubjectID={1}][CUID={2}][Outcome={3}][tokenType={4}][KeyVersion={5}][Serial={6}][CA_ID={7}][Info={8}] token certificate retrieval request made
#
# Event: TOKEN_KEY_RECOVERY
# - used for TPS when token certificate key recovery request is made
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_KEY_RECOVERY_10=<type=TOKEN_KEY_RECOVERY>:[AuditEvent=TOKEN_KEY_RECOVERY][IP={0}][SubjectID={1}][CUID={2}][Outcome={3}][tokenType={4}][KeyVersion={5}][Serial={6}][CA_ID={7}][KRA_ID={8}][Info={9}] token certificate/key recovery request made
#
# Event: TOKEN_CERT_STATUS_CHANGE_REQUEST
# - used when a token certificate status change request (e.g. revocation) is made
# CUID must be the last token that the certificate was associated with
# CertSerialNum must be the serial number (in decimal) of the certificate to be revoked
# RequestType must be "revoke", "on-hold", "off-hold"
#
LOGGING_SIGNED_AUDIT_TOKEN_CERT_STATUS_CHANGE_REQUEST_10=<type=TOKEN_CERT_STATUS_CHANGE_REQUEST>:[AuditEvent=TOKEN_CERT_STATUS_CHANGE_REQUEST][IP={0}][SubjectID={1}][CUID={2}][Outcome={3}][tokenType={4}][CertSerialNum={5}][RequestType={6}][RevokeReasonNum={7}][CA_ID={8}][Info={9}] token certificate revocation/unrevocation request made
#
# Event: TOKEN_PIN_RESET with [Outcome=Success]
# - used when token pin reset request succeeded
#
LOGGING_SIGNED_AUDIT_TOKEN_PIN_RESET_SUCCESS=<type=TOKEN_PIN_RESET>:[AuditEvent=TOKEN_PIN_RESET]{0} token op pin reset success
#
# Event: TOKEN_PIN_RESET with [Outcome=Failure]
# - used when token pin reset request failed
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_PIN_RESET_FAILURE=<type=TOKEN_PIN_RESET>:[AuditEvent=TOKEN_PIN_RESET]{0} token op pin reset failure
#
# Event: TOKEN_OP_REQUEST
# - used when token processor op request is made
# Applicable subsystems: TPS
# - OP can be "format", "enroll", or "pinReset"
#
LOGGING_SIGNED_AUDIT_TOKEN_OP_REQUEST_6=<type=TOKEN_OP_REQUEST>:[AuditEvent=TOKEN_OP_REQUEST][IP={0}][CUID={1}][MSN={2}][Outcome={3}][OP={4}][AppletVersion={5}] token processor op request made
#
# Event: TOKEN_FORMAT with [Outcome=Success]
# - used when token format op succeeded
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_FORMAT_SUCCESS=<type=TOKEN_FORMAT>:[AuditEvent=TOKEN_FORMAT]{0} token op format success
#
# Event: TOKEN_FORMAT with [Outcome=Failure]
# - used when token format op failed
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_FORMAT_FAILURE=<type=TOKEN_FORMAT>:[AuditEvent=TOKEN_FORMAT]{0} token op format failure
#
# Event: TOKEN_APPLET_UPGRADE with [Outcome=Success]
# - used when token apple upgrade succeeded
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_APPLET_UPGRADE_SUCCESS=<type=TOKEN_APPLET_UPGRADE>:[AuditEvent=TOKEN_APPLET_UPGRADE]{0} token applet upgrade success
#
# Event: TOKEN_APPLET_UPGRADE with [Outcome=Failure]
# - used when token apple upgrade failed
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_APPLET_UPGRADE_FAILURE=<type=TOKEN_APPLET_UPGRADE>:[AuditEvent=TOKEN_APPLET_UPGRADE]{0} token applet upgrade failure
#
# Event: TOKEN_KEY_CHANGEOVER_REQUIRED
# - used when token key changeover is required
# Applicable subsystems: TPS
#
LOGGING_SIGNED_AUDIT_TOKEN_KEY_CHANGEOVER_REQUIRED_10=<type=TOKEN_KEY_CHANGEOVER_REQUIRED>:[AuditEvent=TOKEN_KEY_CHANGEOVER_REQUIRED][IP={0}][SubjectID={1}][CUID={2}][MSN={3}][Outcome={4}][tokenType={5}][AppletVersion={6}][oldKeyVersion={7}][newKeyVersion={8}][Info={9}] token key changeover required
#
# Event: TOKEN_KEY_CHANGEOVER with [Outcome=Success]
# - used when token key changeover succeeded
# Applicable subsystems: TPS
# - Info usually is unused for success
#
LOGGING_SIGNED_AUDIT_TOKEN_KEY_CHANGEOVER_SUCCESS=<type=TOKEN_KEY_CHANGEOVER>:[AuditEvent=TOKEN_KEY_CHANGEOVER]{0} token key changeover success
#
# Event: TOKEN_KEY_CHANGEOVER with [Outcome=Failure]
# - used when token key changeover failed
# Applicable subsystems: TPS
# - Info is used for storing more info in case of failure
#
LOGGING_SIGNED_AUDIT_TOKEN_KEY_CHANGEOVER_FAILURE=<type=TOKEN_KEY_CHANGEOVER>:[AuditEvent=TOKEN_KEY_CHANGEOVER]{0} token key changeover failure
#
# Event: TOKEN_AUTH with [Outcome=Failure]
# - used when authentication failed
# Applicable subsystems: TPS
# Outcome should always be "failure" in this event
#   (obviously, if authentication failed, you won't have a valid SubjectID, so
#       in this case, AttemptedID is recorded)
# AuthMgr must be the authentication manager instance name that did
#   this authentication
#
LOGGING_SIGNED_AUDIT_TOKEN_AUTH_FAILURE=<type=TOKEN_AUTH>:[AuditEvent=TOKEN_AUTH]{0} token authentication failure
#
# Event: TOKEN_AUTH with [Outcome=Success]
# - used when authentication succeeded
# Applicable subsystems: TPS
# Outcome should always be "success" in this event
# AuthMgr must be the authentication manager instance name that did
#   this authentication
#
LOGGING_SIGNED_AUDIT_TOKEN_AUTH_SUCCESS=<type=TOKEN_AUTH>:[AuditEvent=TOKEN_AUTH]{0} token authentication success
#
# Event: CONFIG_TOKEN_GENERAL
# - used when doing general TPS configuration
# Applicable subsystems: TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_CONFIG_TOKEN_GENERAL_5=<type=CONFIG_TOKEN_GENERAL>:[AuditEvent=CONFIG_TOKEN_GENERAL][SubjectID={0}][Outcome={1}][Service={2}][ParamNameValPairs={3}][Info={4}] TPS token configuration parameter(s) change
#
# Event: CONFIG_TOKEN_PROFILE
# - used when configuring token profile
# Applicable subsystems: TPS
# Service can be any of the methods offered
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_CONFIG_TOKEN_PROFILE_6=<type=CONFIG_TOKEN_PROFILE>:[AuditEvent=CONFIG_TOKEN_PROFILE][SubjectID={0}][Outcome={1}][Service={2}][ProfileID={3}][ParamNameValPairs={4}][Info={5}] token profile configuration parameter(s) change
#
# Event: CONFIG_TOKEN_MAPPING_RESOLVER
# - used when configuring token mapping resolver
# Applicable subsystems: TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_CONFIG_TOKEN_MAPPING_RESOLVER_6=<type=CONFIG_TOKEN_MAPPING_RESOLVER>:[AuditEvent=CONFIG_TOKEN_MAPPING_RESOLVER][SubjectID={0}][Outcome={1}][Service={2}][MappingResolverID={3}][ParamNameValPairs={4}][Info={5}] token mapping resolver configuration parameter(s) change
#
# Event: CONFIG_TOKEN_AUTHENTICATOR
# - used when configuring token authenticators
# Applicable subsystems: TPS
# Service can be any of the methods offered
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_CONFIG_TOKEN_AUTHENTICATOR_6=<type=CONFIG_TOKEN_AUTHENTICATOR>:[AuditEvent=CONFIG_TOKEN_AUTHENTICATOR][SubjectID={0}][Outcome={1}][OP={2}][Authenticator={3}][ParamNameValPairs={4}][Info={5}] token authenticator configuration parameter(s) change
#
# Event: CONFIG_TOKEN_CONNECTOR
# - used when configuring token connectors
# Applicable subsystems: TPS
# Service can be any of the methods offered
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_CONFIG_TOKEN_CONNECTOR_6=<type=CONFIG_TOKEN_CONNECTOR>:[AuditEvent=CONFIG_TOKEN_CONNECTOR][SubjectID={0}][Outcome={1}][Service={2}][Connector={3}][ParamNameValPairs={4}][Info={5}] token connector configuration parameter(s) change
#
# Event: CONFIG_TOKEN_RECORD
# - used when information in token record changed
# Applicable subsystems: TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_CONFIG_TOKEN_RECORD_6=<type=CONFIG_TOKEN_RECORD>:[AuditEvent=CONFIG_TOKEN_RECORD][SubjectID={0}][Outcome={1}][OP={2}][TokenID={3}][ParamNameValPairs={4}][Info={5}] token record configuration parameter(s) change
#
# Event: TOKEN_STATE_CHANGE
# - used when token state changed
# Applicable subsystems: TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#   --- secret component (password) MUST NOT be logged ---
# - info in general is used for caturing error info for failed cases
#
LOGGING_SIGNED_AUDIT_TOKEN_STATE_CHANGE_8=<type=TOKEN_STATE_CHANGE>:[AuditEvent=TOKEN_STATE_CHANGE][SubjectID={0}][Outcome={1}][oldState={2}][oldReason={3}][newState={4}][newReason={5}][ParamNameValPairs={6}][Info={7}] token state changed
#
# Event: AUTHORITY_CONFIG
# - used when configuring lightweight authorities
# Applicable subsystems: CA
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_AUTHORITY_CONFIG_3=<type=AUTHORITY_CONFIG>:[AuditEvent=AUTHORITY_CONFIG][SubjectID={0}][Outcome={1}][ParamNameValPairs={2}] lightweight authority configuration change
#
# Event: ACCESS_SESSION_ESTABLISH with [Outcome=Failure]
# - used when access session failed to establish
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_ACCESS_SESSION_ESTABLISH_FAILURE=\
<type=ACCESS_SESSION_ESTABLISH>:[AuditEvent=ACCESS_SESSION_ESTABLISH]{0} access session establish failure
#
# Event: ACCESS_SESSION_ESTABLISH with [Outcome=Success]
# - used when access session was established successfully
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_ACCESS_SESSION_ESTABLISH_SUCCESS=\
<type=ACCESS_SESSION_ESTABLISH>:[AuditEvent=ACCESS_SESSION_ESTABLISH]{0} access session establish success
#
# Event: ACCESS_SESSION_TERMINATED
# - used when access session was terminated
# Applicable subsystems: CA, KRA, OCSP, TKS, TPS
# ParamNameValPairs must be a name;;value pair
#    (where name and value are separated by the delimiter ;;)
#    separated by + (if more than one name;;value pair) of config params changed
#
LOGGING_SIGNED_AUDIT_ACCESS_SESSION_TERMINATED=\
<type=ACCESS_SESSION_TERMINATED>:[AuditEvent=ACCESS_SESSION_TERMINATED]{0} access session terminated
#
# Event: CLIENT_ACCESS_SESSION_ESTABLISH with [Outcome=Failure]
# access session failed to establish when Certificate System acts as client
# Applicable subsystems: CA, KRA, OCSP, TKS
#
LOGGING_SIGNED_AUDIT_CLIENT_ACCESS_SESSION_ESTABLISH_FAILURE=\
<type=CLIENT_ACCESS_SESSION_ESTABLISH>:[AuditEvent=CLIENT_ACCESS_SESSION_ESTABLISH]{0} access session failed to establish when Certificate System acts as client
#
# Event: CLIENT_ACCESS_SESSION_ESTABLISH with [Outcome=Success]
# - used when access session was established successfully when
#   Certificate System acts as client
# Applicable subsystems: CA, KRA, OCSP, TKS
#
LOGGING_SIGNED_AUDIT_CLIENT_ACCESS_SESSION_ESTABLISH_SUCCESS=\
<type=CLIENT_ACCESS_SESSION_ESTABLISH>:[AuditEvent=CLIENT_ACCESS_SESSION_ESTABLISH]{0} access session establish successfully when Certificate System acts as client
#
# Event: CLIENT_ACCESS_SESSION_TERMINATED
# - used when access session was terminated when Certificate System acts as client
# Applicable subsystems: CA, KRA, OCSP, TKS
#
LOGGING_SIGNED_AUDIT_CLIENT_ACCESS_SESSION_TERMINATED=\
<type=CLIENT_ACCESS_SESSION_TERMINATED>:[AuditEvent=CLIENT_ACCESS_SESSION_TERMINATED]{0} access session terminated when Certificate System acts as client
#
#########################################################################
# Unselectable Signed Audit Events
#
# Event: AUDIT_LOG_SIGNING
# - used when a signature on the audit log is generated (same as "flush" time)
# SubjectID is predefined to be "$System$" because this operation
#   associates with no user
# sig must be the base-64 encoded signature of the buffer just flushed
#
LOGGING_SIGNED_AUDIT_SIGNING_3=[AuditEvent=AUDIT_LOG_SIGNING][SubjectID={0}][Outcome={1}] signature of audit buffer just flushed: sig: {2}
