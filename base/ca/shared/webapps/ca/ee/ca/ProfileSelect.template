<!-- --- BEGIN COPYRIGHT BLOCK ---
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; version 2 of the License.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

     Copyright (C) 2007 Red Hat, Inc.
     All rights reserved.
     --- END COPYRIGHT BLOCK --- -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<script src="/pki/js/jquery.js"></script>
<script src="/pki/js/jquery.i18n.properties.js"></script>
<script src="/pki/js/underscore.js"></script>
<script src="/pki/js/backbone.js"></script>
<script src="/pki/js/pki.js"></script>
<script src="/pki/js/pki-banner.js"></script>
</head>
<CMS_TEMPLATE>
<font size="+1" face="PrimaSans BT, Verdana, Arial, Helvetica, sans-serif">
Certificate Profile
</font><br>
  <Font size="-1" face="PrimaSans BT, Verdana, Arial, Helvetica, sans-serif">
  Use this form to submit the request.
<p>
</font>
<table border="0" cellspacing="0" cellpadding="0" background="/pki/images/hr.gif"
width="100%">
  <tr>
    <td>&nbsp;</td>
  </tr>
</table>
<p>

<SCRIPT LANGUAGE="JavaScript">

var dual = 'false';
var encryptionKeyOnly = 'false';
var signingKeyOnly = 'false';

var keyList = new Array();
var key = new Object();
key.type = "RSA";
keyList[0] = key;
var key = new Object();
key.type = "EC";
keyList[1] = key;

// Obtain browser name and version information
// (credit: 'http://www.javascripter.net/faq/browsern.htm')
var nAgt = navigator.userAgent;
var browserName  = navigator.appName;
var fullVersion  = ''+parseFloat(navigator.appVersion);
var majorVersion = parseInt(navigator.appVersion, 10);
var nameOffset,verOffset,ix;
if ((verOffset = nAgt.indexOf("OPR/")) != -1) {
   browserName = "Opera";
   fullVersion = nAgt.substring(verOffset + 4);
} else if ((verOffset = nAgt.indexOf("Opera")) != -1) {
   browserName = "Opera";
   fullVersion = nAgt.substring(verOffset + 6);
   if ((verOffset = nAgt.indexOf("Version")) != -1) {
      fullVersion = nAgt.substring(verOffset + 8);
   }
} else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
   browserName = "Microsoft Internet Explorer";
   fullVersion = nAgt.substring(verOffset + 5);
} else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
   browserName = "Chrome";
   fullVersion = nAgt.substring(verOffset + 7);
} else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
   browserName = "Safari";
   fullVersion = nAgt.substring(verOffset + 7);
   if ((verOffset = nAgt.indexOf("Version")) != -1) {
      fullVersion = nAgt.substring(verOffset + 8);
   }
} else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
   browserName = "Firefox";
   fullVersion = nAgt.substring(verOffset + 8);
} else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <
           (verOffset = nAgt.lastIndexOf('/'))) {
   browserName = nAgt.substring(nameOffset, verOffset);
   fullVersion = nAgt.substring(verOffset + 1);
   if (browserName.toLowerCase() == browserName.toUpperCase()) {
      browserName = navigator.appName;
   }
}

// trim the fullVersion string at semicolon/space if present
if ((ix = fullVersion.indexOf(";")) != -1) {
   fullVersion = fullVersion.substring(0, ix);
}
if ((ix = fullVersion.indexOf(" ")) != -1) {
   fullVersion=fullVersion.substring(0, ix);
}

majorVersion = parseInt(''+fullVersion, 10);
if (isNaN(majorVersion)) {
   fullVersion  = ''+parseFloat(navigator.appVersion);
   majorVersion = parseInt(navigator.appVersion, 10);
}

function passwdValidate()
{

    if (document.forms[0].serverSideKeygenP12Passwd.value != document.forms[0].p12PasswordAgain.value) {
        alert("Passwords do not match");
        return false;
    }
    return true;
}

function isIE() {
   if ( "ActiveXObject" in window ) {
     return true;
   }
   return false;
 }

 function isIE11() {

   if ( !(window.ActiveXObject) && "ActiveXObject" in window ) {
     return true;
   }
   return false;
 }

function isKeyGenSupported() {
   var keygen = document.createElement("KEYGEN");
   if ((typeof(keygen) == "object") &&
       (typeof(keygen.name) == "undefined")) {
       // Firefox
       return true;
   } else if ((typeof(keygen) == "object") &&
              (typeof(keygen.name) == "string")) {
       // Chrome
       return true;
   }
   return false;
}

function getIE11Warning() {
     document.write('<p> <font color="red"> Warning: Internet Explore Version 11 is not currently supported for certain enrollment operations. Please use an earlier version of the browser.  </font> </p>');
     document.write('<br>');
}


function getNoKeyGenWarning() {
     document.write('<p> <font color="red"> Warning: This version of ' + browserName + ' no longer supports the &lt;keygen&gt; tag used to facilitate generation of key material and submission of a public key as part of an HTML form from a browser.  As a result, certificate requests must be generated and submitted manually. </font> </p>');
     document.write('<br>');
}

function getKeyGenDisabledWarning() {
     document.write('<p> <font color="red"> Warning: Please verify that this version of ' + browserName + ' has not disabled &lt;keygen&gt; functionality.<br><br>For example, to enable &lt;keygen&gt; on Chrome, create a new tab, type in "chrome://settings/content", find the section entitled "Key generation", select the radio button labeled "Allow all sites to use key generation in forms.", press the "Done" button, return to the previous tab, and reload this webpage. </font> </p>');
     document.write('<br>');
}

function getChromeECCSupportWarning() {
     document.write('<p> <font color="red"> Warning: Currently, this profile is unable to successfully construct an ECC certificate request on Chrome.<br><br>At this time, please use Firefox to generate ECC certificate requests.</font> </p>');
     document.write('<br>');
}

function getKeyStrengthTableForKeyGen() {

  document.writeln("<table border='1'> <caption> KeyGen Key Strength Info </caption> <tr> <th> Key Type </th> <th> High Grade </th> <th> Medium Grade </th> </tr>");
  document.writeln("<td> RSA </td> <td> 2048 </td> <td> 1024 </tr> </td>");
  document.writeln("<td> ECC </td> <td> nistp384 </td> <td> nistp256 </td>");
  document.writeln("</table>");

}

function getNoCryptoWarning() {
     document.write('<p> <font color="red"> Warning: This version of ' + browserName + ' no longer supports the crypto web object used to generate and archive keys from the browser.  As a result expect limited functionality in this area. </font> </p>');
     document.write('<br>');
}

function getKeyTypesOptionsForKeyGen() {
    var keyTypesDef = "RSA";
    var keyTypes = null;
    for (var i = 0; i < policySetListSet.length; i++) {
      for (var j = 0; j < policySetListSet[i].policySet.length; j++) {
        if (typeof(policySetListSet[i].policySet[j].constraintSet) != "undefined") {
          for (var k = 0; k < policySetListSet[i].policySet[j].constraintSet.length; k++) {
            if (policySetListSet[i].policySet[j].constraintSet[k].name == "keyType") {
              if (policySetListSet[i].policySet[j].constraintSet[k].value == "-") {
                  keyTypes = "RSA,EC";
              } else {
                 keyTypes = policySetListSet[i].policySet[j].constraintSet[k].value;
              }
            }
          }
        }
      }
    }

    if(keyTypes == null) {
      keyTypes = keyTypesDef;
    }

    var keyTypesRet = keyTypes.split(",");
    var options = "";
    var optionLabel = "";
    var selected = "";
    for(types= 0 ; types < keyTypesRet.length ; types ++) {
      if(keyTypesRet[types] == "EC") {
        optionLabel = "ECC"; 
      } else {
        optionLabel = keyTypesRet[types];
      }

      if( types == 0 ) {
          selected = "SELECTED";
      } else {
          selected = "";
      }
 
      options += '<OPTION value=' + '\"' + keyTypesRet[types] + '\" ' + selected + ' > ' + optionLabel + ' </OPTION> ';
    }

    return options;
}

function keyGenKeyTypeSelected(keygenObj,keyTypeSelectObj) {

    if(keygenObj == null || keyTypeSelectObj == null)
        return;

    var selectedValue = keyTypeSelectObj.options[keyTypeSelectObj.selectedIndex].value;

     keygenObj.setAttribute("keytype", selectedValue);
}

function keyTypeOptions (keyPurpose)
{
  var keyType = "RSA";

  for (var i = 0; i < policySetListSet.length; i++) {
    for (var j = 0; j < policySetListSet[i].policySet.length; j++) {
      if (typeof(policySetListSet[i].policySet[j].constraintSet) != "undefined") {
        for (var k = 0; k < policySetListSet[i].policySet[j].constraintSet.length; k++) {
          if (policySetListSet[i].policySet[j].constraintSet[k].name == "keyType") {
            if (policySetListSet[i].policySet[j].constraintSet[k].value != "-") {
              if (keyPurpose.length == 0 || (keyPurpose.length > 0 && policySetListSet[i].setId.indexOf(keyPurpose) > -1)) {
                keyType = policySetListSet[i].policySet[j].constraintSet[k].value;
              }
            }
          }
        }
      }
    }
  }
  var keyFound = 0;
  for (var i = 0; i < keyList.length; i++) {
    if (keyList[i].type == keyType) {
        keyFound = 1;
    }
  }
  if (keyFound == 0) {
    keyType = "RSA";
  }
  if (isIE()) {
    keyType = "RSA";
  }

  return keyType;
}

function translateCurveName (name)
{
  var translated = "";
  if (isIE()) {
    if (name == "nistp256" || name == "ECDSA_P256") {
      translated = "ECDSA_P256";
    } else if (name == "nistp384" || name == "ECDSA_P384") {
      translated = "ECDSA_P384";
    } else if (name == "nistp521" || name == "ECDSA_P521") {
      translated = "ECDSA_P521";
    }
  } else {
    if (name == "ECDSA_P256") {
      translated = "nistp256";
    } else if (name == "ECDSA_P384") {
      translated = "nistp384";
    } else if (name == "ECDSA_P521") {
      translated = "nistp521";
    } else {
      translated = name;
    }
  }
  return translated;
}

function keyLengthsCurvesOptions (keyPurpose)
{
  var keyType = "RSA";
  var options = "";
  var lengthsOrCurves = null;
  var keyLengthsCurves = "";

  for (var i = 0; i < policySetListSet.length; i++) {
    for (var j = 0; j < policySetListSet[i].policySet.length; j++) {
      if (typeof(policySetListSet[i].policySet[j].constraintSet) != "undefined") {
        for (var k = 0; k < policySetListSet[i].policySet[j].constraintSet.length; k++) {
          if (policySetListSet[i].policySet[j].constraintSet[k].name == "keyType") {
            if (policySetListSet[i].policySet[j].constraintSet[k].value != "-") {
              if (keyPurpose.length == 0 || (keyPurpose.length > 0 && policySetListSet[i].setId.indexOf(keyPurpose) > -1)) {
                keyType = policySetListSet[i].policySet[j].constraintSet[k].value;
              }
            } else {
              if (document.getElementById("keyTypeId").value != "undefined") {
                keyType = document.getElementById("keyTypeId").value;
              }
            }
          }

          if (keyPurpose.length == 0 || (keyPurpose.length > 0 && policySetListSet[i].setId.indexOf(keyPurpose) > -1)) {
              if (policySetListSet[i].policySet[j].constraintSet[k].name == "keyParameters") {
                  keyLengthsCurves = policySetListSet[i].policySet[j].constraintSet[k].value;
                  lengthsOrCurves = keyLengthsCurves.split(",");
              }
          }
        }
      }
    }
  }
  if (isIE()) {
    keyType = "RSA";
  }

  var value = 0;
  var l = 0;
  for (l = 0 ; l < lengthsOrCurves.length; l++) {
      var included = true;

      value = lengthsOrCurves[l];

      if (keyType != "EC" && !isNumeric(value)) {
          included = false;
      } else if (keyType == "EC" &&
                 isIE() &&
                 value != "nistp256" && value != "nistp384" && value != "nistp521" &&
                 value != "ECDSA_P256" && value != "ECDSA_P384" && value != "ECDSA_P521") {
          included = false;
      } else if (keyType == "EC" && isNumeric(value)) {
        included = false;
      }

      if (included) {
          if (keyType == "EC") {
              options += '<OPTION VALUE="' + translateCurveName(value) + '"';
          } else {
              options += '<OPTION VALUE="' + value + '"';
          }
          if (i == 0) {
              options += ' SELECTED';
          }
          options += '>' + value;
     }
  }

  if (options.length == 0) {
     if (keyType != "EC") {
         options = '<OPTION VALUE=1024 SELECTED>1024';
     } else {
         if (isIE()) {
             options = '<OPTION VALUE="ECDSA_P256">nistp256';
         } else {
             options = '<OPTION VALUE="nistp256">nistp256';
         }
     }
  }
  //alert("options="+options);

  return options;
}

function updateKeyLengthsCurvesOptions() {
  // get the keySize select element via its known id
  var cSelect = document.getElementById("keySizeId");

  // remove the current options from the select tag
  var len=cSelect.options.length;
  while (cSelect.options.length > 0) {
    cSelect.remove(0);
  }
  cSelect.innerHTML = keyLengthsCurvesOptions("");
}

function isNumeric(sText)
{
   var validChars = "0123456789";
   var isNumber=true;
   var char;

   if( !sText)
     return false;
 
   for (i = 0; i < sText.length && isNumber == true; i++)  {
      char = sText.charAt(i); 
      if (validChars.indexOf(char) == -1)  {
         isNumber = false;
      }
   }
   return isNumber;
}

function validate()
{
   if (keygen_request == 'false')
      return false;
    with (document.forms[0]) {
        /////////////////////////////////////////////////////////////////
        // To enable dual key feature, this page must be customized with
        // appropriate Javascript call. For example,
        //
        //      crmfObject = crypto.generateCRMFRequest(
        //              "CN=undefined",
        //              "regToken", "authenticator",
        //              null,
        //              "setCRMFRequest();",
        //              512, null, "rsa-ex",
        //              1024, null, "rsa-sign");
        // Note: This archival text below only applies to CS 7.1 and earlier:

        // To enable key archival feature, this page must be customized with
        // KRA's transport certificate. The transport certificate can be
        // retrieved in the following ways:
        // (1) Access "List Certificates" menu option in end-entity page
        // (2) Access https://<host>:<agent_port>/kra/displayTransportCert
        // (3) Use certutil command in <instance-dir>/config directory
        //     (i.e. certutil -L -d . -n "kraTransportCert <instance-id>" -a)
        //
        // Once the transport certificate is obtained, the following
        // javascript should be modified so that the transport certificate
        // and appropriate key type are selected. For example,
        //
        //      var kraTransportCert = "MIICDjCCAXegAwIBAgICAfMwDQYJKoZIhvcNAQEEBQAwdzELMAkGA1UEBhMCVVMxLDAqBgNVBAoTI05ldHNjYXBlIENvbW11bmljYXRpb25zIENvcnBvcmF0aW9uMREwDwYDVQQLEwhIYXJkY29yZTEnMCUGA1UEAxMeSGFyZGNvcmUgQ2VydGlmaWNhdGUgU2VydmVyIElJMB4XDTk4MTExOTIzNDIxOVoXDTk5MDUxODIzNDIxOVowLjELMAkGA1UEBhMCVVMxETAPBgNVBAoTCG5ldHNjYXBlMQwwCgYDVQQDEwNLUmEwXDANBgkqhkiG9w0BAQEFAANLADBIAkEArrbDiYUI5SCdlCKKa0bEBn1m83kX6bdhytRYNkd/HB95Bp85SRadmdJV+0O/yMxjYAtGCFrmcqEZ4sh2YSov6wIDAQABozYwNDARBglghkgBhvhCAQEEBAMCAEAwHwYDVR0jBBgwFoAUl7FtsrYCFlQMl9fjMm3LnN/u3oAwDQYJKoZIhvcNAQEEBQADgYEApvzcUsVIOstaoYSiWb4+aMVH6s1jiJlr5iVHnOKzfsYxPVdUw6uz04AT8N+1KIarMTKxHPzGAFSLicKLEv4HG4vh6llc86uzRzWpUqqVHg/eKN5A8Jyg56D4DkNr/XEJ7QdKesAp13dk5H5qvHelkSPLYYdMXNwNWPVZKgnWrWg=";
        //      var keyGenAlg = "rsa-ex";
        //      crmfObject = crypto.generateCRMFRequest(
        //              "CN=undefined",
        //              "regToken", "authenticator",
        //              keyTransportCert,
        //              "setCRMFRequest();",
        //              512, null, keyGenAlg);
        /////////////////////////////////////////////////////////////////
        var keyTransportCert = null;


        if (typeof(transportCert) != "undefined" && transportCert != "") {
          // from CS7.2, transport certificate will be 
          // inserted automatically
          keyTransportCert = transportCert;
        }
        // generate keys for nsm.
        if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
            var encKeyType = "rsa-ex";
            var signKeyType = "rsa-sign";
            var dualKeyType = "rsa-dual-use";
            var encKeyParams = null;
            var encKeySize = 1024; 
            var signKeyParams = null;
            var signKeySize = 1024; 
            var keyParams = null;
            // Give this default because the ECC crytpo codes requires and integer
            // for this value even if presenting ECC curve name parameter.
            var keySize = 1024;

            try {
                if (dual == 'true') {
                    
                    if (keyTypeOptions("encryption") == "EC")  {
                        encKeyType = "ec-ex";
                        encKeyParams = "curve=" + encKeyParam.value; 
                    } else {
                        encKeySize = parseInt(encKeyParam.value);
                    }

                    if (keyTypeOptions("signing") == "EC") {
                        signKeyType = "ec-sign";
                        signKeyParams = "curve=" + signKeyParam.value;
                    } else {
                        signKeySize = parseInt(signKeyParam.value);
                    }

                    crmfObject = crypto.generateCRMFRequest(
                        "CN=x", "regToken", "authenticator",
        	        keyTransportCert, "setCRMFRequest();",
                        encKeySize, encKeyParams, encKeyType,
                        signKeySize, signKeyParams, signKeyType);
                } else {
                    if (encryptionKeyOnly == 'true') {
                        if (keyTypeOptions("") == "EC") {
                            dualKeyType = "ec-ex";
                            keyParams = "curve=" + keyParam.value;
                        } else {
                            dualKeyType = "rsa-ex";
                            keySize = parseInt(keyParam.value);
                        }
                    } else if (signingKeyOnly == 'true') {
                        if (keyTypeOptions("") == "EC") {
                            dualKeyType = "ec-sign";
                            keyParams = "curve=" + keyParam.value;
                        } else {
                            dualKeyType = "rsa-sign";
                            keySize = parseInt(keyParam.value);
                        }
                        keyTransportCert = null;
                    } else {
                        if (keyTypeOptions("") == "EC") {
                            dualKeyType = "ec-dual-use";
                            keyParams = "curve=" + keyParam.value;
                        } else {
                            keySize = parseInt(keyParam.value);
                        }
                        keyTransportCert = null;
                    }
                    crmfObject = crypto.generateCRMFRequest(
                        "CN=x", "regToken", "authenticator",
        	        keyTransportCert, "setCRMFRequest();",
                        keySize, keyParams, dualKeyType);
                }
            } catch (e) {
                if (typeof(crmfObject) == "undefined" || crmfObject == null) {
                    alert("Error generating CRMF request.");
                }
            }
        }
        return false;
    }
}

function setCRMFRequest()
{
    with (document.forms[0]) {
          cert_request.value = crmfObject.request;
          submit();
    }
}

</SCRIPT>


<script language=javascript>
  var uri = 'profileSubmit';
  if (typeof(authName) != "undefined") {
    if (authIsSSLClientRequired == 'true') {
      uri = '/ca/eeca/ca/profileSubmitSSLClient';
    }
  }
  if (isIE()) {
    document.writeln("<OBJECT id='g_objClassFactory' CLASSID='clsid:884e2049-217d-11da-b2a4-000e7bbb2b09'></OBJECT>");
    document.writeln('<form name="ReqForm" onSubmit="if (checkRequest()) {return true;} else {window.location.reload(); return false;}" method="post" action="' + uri + '">');
  } else if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
    document.writeln('<form name="ReqForm" onSubmit="return validate();" method="post" action="' + uri + '">');
  } else {
    document.writeln('<form name="ReqForm" method="post" onSubmit="return passwdValidate()" action="' + uri + '">');
   }
</script>

<SCRIPT LANGUAGE=VBS>
<!--
Function checkRequest
  Dim TheForm
  Dim szName
  Dim options
  Dim result
  Dim keyLen
  Dim keyParameter
  Dim keyIndex
  Set TheForm = Document.ReqForm

  checkRequest = False

  keyIndex = TheForm.all.keyLength.options.selectedIndex
  If (IsNumeric(TheForm.all.keyLength.options(keyIndex).value)) Then
    keyLen = CInt (TheForm.all.keyLength.options(keyIndex).value)
    keyParameter = ""
  Else
    keyLen = 0
    keyParameter = TheForm.all.keyLength.options(keyIndex).value
  End If

  Dim enrollment
  Dim privateKey
  Dim request
  Dim csr
  Dim objDN

  'certUsage is "1.3.6.1.5.5.7.3.2"

  On Error Resume Next
  'CreateObject("X509Enrollment.CX509EnrollmentWebClassFactory")

  If IsObject(g_objClassFactory) = False Then
    result = MsgBox("Can't create Factory Object "  & " Error: " & Err.number & " :" & Err.description,0,"")
    Exit Function
  End If

  Set enrollment = g_objClassFactory.CreateObject("X509Enrollment.CX509Enrollment")

  If IsObject(enrollment) = False Then
    result = MsgBox("Can't create enroll Object! "  & " Error: " & Err.number & " :" & Err.description,"")
    Exit Function
  End If

  Set privateKey = g_objClassFactory.CreateObject("X509Enrollment.CX509PrivateKey")

  If IsObject(privateKey) = False Then
    result = MsgBox("Can't create Key Object! " & " Error: " & Err.number & " :" & Err.description,0,"")
    Exit Function
  End If

  Set request = g_objClassFactory.CreateObject("X509Enrollment.CX509CertificateRequestPkcs10")

  If IsObject(request) = False Then
    result = MsgBox("Can't create Request Object. ! " & " Error: " & Err.number & " :" & Err.description,0,"")
    Exit Function
  End If

  Set algobj = g_objClassFactory.CreateObject( "X509Enrollment.CObjectId" )
  If IsObject(algobj) = False Then
    result = MsgBox("Can't create OID Object. ! " & " Error: " & Err.number & " :" & Err.description,0,"")
    Exit Function
  End If
  algobj.InitializeFromAlgorithmName XCN_CRYPT_ANY_GROUP_ID, XCN_CRYPT_OID_INFO_PUBKEY_ANY, AlgorithmFlagsNone, keyParameter
  privateKey.Algorithm = algobj


  privateKey.KeySpec= "1" 
  ' Allows key to be exported.
  privateKey.ExportPolicy = "1"

  ' Pick the provider that is selected
  set options = TheForm.all.cryptprovider.options
  index = options.selectedIndex
  privateKey.ProviderType = index
  privateKey.ProviderName = options(index).text
  If keyLen > 0 Then
    privateKey.Length = keyLen
  End If

  szName = "0.9.2342.19200300.100.1.1=" & TheForm.uid.Value & ",E=" & TheForm.email.Value & ",CN=" & TheForm.cn.Value

  Set objDN = g_objClassFactory.CreateObject("X509Enrollment.CX500DistinguishedName")

  If IsObject(objDN) = False Then
    result = MsgBox("Can't create DN Object. ! " & " Error: " & Err.number & " :" & Err.description,0,"")
    Exit Function
  End If

  objDN.Encode szName,0

  request.InitializeFromPrivateKey 1,privateKey,""
  request.Subject = objDN

  enrollment.InitializeFromRequest(request)
  csr=enrollment.CreateRequest(1)

  If len(csr) = 0 Then
    result = MsgBox("Error Creating Request! "& " Error: " & Err.number & " :" & Err.description,0,"")
    Exit Function
  End If

  TheForm.cert_request.Value = csr 
 
  checkRequest = True
End Function

-->
</SCRIPT>

<script language=javascript>
if (errorCode == 0) {
document.writeln('<br>');
document.writeln('<b>');
document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
document.writeln('Certificate Profile - ' + profileName);
document.writeln('</FONT>');
document.writeln('</b>');
document.writeln('<p>');
document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
document.writeln(profileDesc);
document.writeln('</FONT>');
document.writeln('<p>');
if (typeof(authName) != "undefined") {
document.writeln('<table width=100%>');
document.writeln('<tr>');
document.writeln('<td>');
document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
document.writeln('<b>');
document.writeln('Authentication - ' + authName);
document.writeln('</b>');
document.writeln('</FONT>');
document.writeln('</td>');
document.writeln('</tr>');
document.writeln('<tr>');
document.writeln('<td>');
document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
document.writeln(authDesc);
document.writeln('</FONT>');
document.writeln('</td>');
document.writeln('</tr>');
document.writeln('</table>');
document.writeln('<p>');
document.writeln('<table width=100%>');
for (var i = 0; i < authListSet.length; i++) {
    document.writeln('<tr>');
    document.writeln('<td width=40%>');
    document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
    document.writeln('<li>');
    document.writeln(authListSet[i].authName);
    document.writeln('</FONT>');
    document.writeln('</td>');
    document.writeln('<td>');
    if (authListSet[i].authSyntax == 'string') {
      document.writeln('<input type=text name=' + authListSet[i].authId + '>');
    } else if (authListSet[i].authSyntax == 'password') {
      document.writeln('<input type=password name=' + authListSet[i].authId + '>');
    }
    document.writeln('</td>');
  document.writeln('</tr>');
}
document.writeln('</table>');
}
document.writeln('<p>');
document.writeln('<table width=100%>');
document.writeln('<tr>');
document.writeln('<td>');
document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
document.writeln('<b>');
document.writeln('Inputs');
document.writeln('</b>');
document.writeln('</FONT>');
document.writeln('</td>');
document.writeln('</tr>');
document.writeln('</table>');
document.writeln('<p>');
document.writeln('<table width=100%>');
for (var m = 0; m < inputPluginListSet.length; m++) {
  document.writeln('<tr>');
  document.writeln('<td spancol=2>');
  document.writeln('<b>');
  document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
  document.writeln(inputPluginListSet[m].inputPluginName);
  document.writeln('</FONT>');
  document.writeln('</b>');
  document.writeln('</td>');
  document.writeln('</tr>');
  for (var n = 0; n < inputListSet.length; n++) {
    if (inputPluginListSet[m].inputPluginId != inputListSet[n].inputPluginId) 
       continue;
    document.writeln('<tr>');
    document.writeln('<td width=40%>');
    document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
    document.writeln('<li>');
    document.writeln(inputListSet[n].inputName);
    document.writeln('</FONT>');
    document.writeln('</td>');
    document.writeln('<td>');
    if (inputListSet[n].inputSyntax == 'string') {
      document.writeln('<input type=text name=' + inputListSet[n].inputId + '>');
    } else if (inputListSet[n].inputSyntax == 'server_side_keygen_request_type') {
        // get PKCS#12 password
        document.writeln('<tr>');
        document.writeln('<td align=right><font size="-1" face="PrimaSans BT, Verdana, sans-serif">PKCS #12 Password:</font></td>');
        document.writeln('<td align=left><font size="-1" face="PrimaSans BT, Verdana, sans-serif"><input type=password name="serverSideKeygenP12Passwd" value="" AutoComplete=off ></font></td>');
        document.writeln('</tr>');

        document.writeln('<tr>');
        document.writeln('<td align=right><font size="-1" face="PrimaSans BT, Verdana, sans-serif">PKCS #12 Password again:</font></td>');
        document.writeln('<td align=left><font size="-1" face="PrimaSans BT, Verdana, sans-serif"><input type=password name="p12PasswordAgain" value="" AutoComplete=off ></font></td>');
        document.writeln('</tr>');
    } else if (inputListSet[n].inputSyntax == 'server_side_keygen_key_type') {
      document.writeln('<SELECT NAME="keyType" ID="keyTypeId" onChange=\"updateKeyLengthsCurvesOptions()\">'+getKeyTypesOptionsForKeyGen() + '</SELECT>&nbsp');
    } else if (inputListSet[n].inputSyntax == 'server_side_keygen_key_size') {
      document.writeln('<SELECT NAME="keySize" ID="keySizeId">'+keyLengthsCurvesOptions("")+'</SELECT>&nbsp');
    } else if (inputListSet[n].inputSyntax == 'cert_request') {
      document.writeln('<textarea cols=60 rows=10 name=' + inputListSet[n].inputId + '></textarea>');
    } else if (inputListSet[n].inputSyntax == 'cert_request_type') {
      document.writeln('<select name=' + inputListSet[n].inputId + '><option value="pkcs10">PKCS#10</option><option value="crmf">CRMF</option></select>');
    } else if (inputListSet[n].inputSyntax == 'dual_keygen_request') {
      if (isIE()) {
        document.writeln('<input type=hidden name=' + inputListSet[n].inputId + '>');
      } else if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
        document.write('<SELECT NAME="encKeyParam">'+keyLengthsCurvesOptions("encryption")+'</SELECT>');
        document.write('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">&nbsp;&nbsp;');
        document.write(keyTypeOptions("encryption")+'&nbsp;&nbsp;(Encryption),&nbsp;&nbsp;</FONT>');
        document.write('<SELECT NAME="signKeyParam">'+keyLengthsCurvesOptions("signing")+'</SELECT>');
        document.write('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">&nbsp;&nbsp;');
        document.write(keyTypeOptions("signing")+'&nbsp;&nbsp;(Signing)</FONT>');
        document.writeln('<input type=hidden name=cert_request value="">');
        dual = 'true';
      } else {
        document.writeln('Not Supported<input type=hidden name=cert_request value="">');
      }
    } else if ((inputListSet[n].inputSyntax == 'keygen_request') ||
               (inputListSet[n].inputSyntax == 'enc_keygen_request') ||
               (inputListSet[n].inputSyntax == 'sign_keygen_request')) {
      if (isIE()) {
        if ( isIE11() ) {
          getIE11Warning();
        }
        document.writeln('<input type=hidden name=' + inputListSet[n].inputId + '>');
        document.writeln('<SELECT NAME="keyLength">'+keyLengthsCurvesOptions("")+'</SELECT>&nbsp;&nbsp;<SELECT NAME=\"cryptprovider\"></SELECT>');
      } else if (!isKeyGenSupported()) {
          // KeyGen is no longer supported by this version of the browser
          getNoKeyGenWarning();
          // TODO:  Consider short-circuiting displaying the form at this point
          //        in time since nothing more can be done from the browser!
      } else if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
        document.write('<SELECT NAME="keyParam">'+keyLengthsCurvesOptions("")+'</SELECT>');
        document.write('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">');
        document.write('&nbsp;&nbsp;&nbsp;'+keyTypeOptions("")+'&nbsp;&nbsp;');
        if (inputListSet[n].inputSyntax == 'keygen_request') {
          document.write('(Encryption and Signing)</FONT>');
        } else if (inputListSet[n].inputSyntax == 'enc_keygen_request') {
          document.write('(Encryption)</FONT>');
          encryptionKeyOnly = 'true';
        } else if (inputListSet[n].inputSyntax == 'sign_keygen_request') {
          document.write('(Signing)</FONT>');
          signingKeyOnly = 'true';
        }
        document.writeln('<input type=hidden name=cert_request value="">');
      } else {

        if (browserName == "Firefox") {
          // the crypto web object is no longer supported
          // by this version of the browser
          getNoCryptoWarning();
        } else if ((browserName == "Chrome") &&
                   (majorVersion >= 49)) {
          // KeyGen exists but may have been disabled
          getKeyGenDisabledWarning();
        }

        if (browserName == "Chrome") {
          // PKI TRAC Ticket #2306 - Chrome Can Not Submit EC
          //                         Client Cert Requests
          getChromeECCSupportWarning();
        }

        getKeyStrengthTableForKeyGen();

        var keyTypesOptions = getKeyTypesOptionsForKeyGen();

        var keygendata = '<KEYGEN id=\"keygentag\" ' + ' name= ' + '\"' + inputListSet[n].inputId + '\" ' + ' KEYTYPE=\"EC\" KEYPARAMS=\"none\"   > '  ;
        document.writeln(keygendata);

        var keygenObj = document.getElementById("keygentag");
        var selectKeyTypeData = '<SELECT id=\"keyTypeSelectedId\" name=\"selectKeyType\"  onChange=\"keyGenKeyTypeSelected(keygenObj,this);\"   > '   + keyTypesOptions + '</SELECT> ' ;

        document.writeln(selectKeyTypeData);

        var selectKeyTypeObject = document.getElementById("keyTypeSelectedId");
        keyGenKeyTypeSelected(keygenObj,selectKeyTypeObject);
      }
    } else if (inputListSet[n].inputSyntax == 'dual_keygen_request_type') {
      keygen_request = 'true';
      if (isIE()) {
        if ( isIE11() ) {
          getIE11Warning();
        }
        document.writeln('Not Supported<input type=hidden name=' + inputListSet[n].inputId + ' value=>');
      } else if (!isKeyGenSupported()) {
          // KeyGen is no longer supported by this version of the browser
          getNoKeyGenWarning();
      } else if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
        document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">crmf</FONT><input type=hidden name=' + inputListSet[n].inputId + ' value=crmf>');
      } else {
        if (browserName == "Firefox") {
          // the crypto web object is no longer supported
          // by this version of the browser
          getNoCryptoWarning();
        } else if ((browserName == "Chrome") &&
                   (majorVersion >= 49)) {
          // KeyGen exists but may have been disabled
          getKeyGenDisabledWarning();
        }

        document.writeln('Not Supported<input type=hidden name=' + inputListSet[n].inputId + ' value=>');
      }
    } else if ((inputListSet[n].inputSyntax == 'keygen_request_type') ||
               (inputListSet[n].inputSyntax == 'enc_keygen_request_type') ||
               (inputListSet[n].inputSyntax == 'sign_keygen_request_type')) {
      keygen_request = 'true';
      if (isIE()) {
        document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">pkcs10</FONT><input type=hidden name=' + inputListSet[n].inputId + ' value=pkcs10>');
      } else if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
        document.writeln('<FONT size="-1" face="PrimaSans BT, Verdana, sans-serif">crmf</FONT><input type=hidden name=' + inputListSet[n].inputId + ' value=crmf>');
      } else {
        document.writeln('keygen<input type=hidden name=' + inputListSet[n].inputId + ' value=keygen>');
      }
    }
    document.writeln('</td>');
    document.writeln('</tr>');
  }
}
document.writeln('</table>');
document.writeln('<p>');
document.writeln('<input type=hidden name=profileId value="' + 
  profileId + '">');
document.writeln('<input type=hidden name=renewal value="' +
  renewal + '">');
document.writeln('<input type=hidden name=xmlOutput value="' +
  xmlOutput + '">');
} else {
  document.write('Sorry, your request is not submitted. The error code is "' + errorReason + '".');
}
</script>
<p>
<p>
<script language=javascript>
if (errorCode == 0) {
  if (isIE()) {
    if (typeof(keygen_request) != "undefined") {
      document.writeln('<input type=submit value="Submit">');
    } else {
      document.writeln('<input type=submit value="Submit">');
    }
  } else if (typeof(crypto) != "undefined" && typeof(crypto.version) != "undefined") {
    document.writeln('<input type=submit value="Submit">');
  } else {
    document.writeln('<input type=submit value="Submit">');
  }
} else {
}
  
</script>
<SCRIPT LANGUAGE=VBS>
<!--
FindProviders

Function FindProviders
	Dim i, j
	Dim providers()
	i = 0
	j = 1
	Dim el
	Dim temp
	Dim first
	Dim firstE
	Dim firstS
	Dim TheForm
	Set TheForm = document.ReqForm
	On Error Resume Next
	first = 0

        Dim result
        Dim csps 
        Set csps = g_objClassFactory.CreateObject("X509Enrollment.CCspInformations")
        If IsObject(csps) = False Then
           result = MsgBox("Can't create CSP List Object! " & " Error: " & Err.number & " :" & Err.description,0,"")
           Exit Function

        End If
        csps.AddAvailableCsps()
        'result = MsgBox(csps.Count,0,"Number of CSPS")

        Dim curName
        Dim csp
        Dim selected 
        Dim selectedS 
        Dim selectedE 
        Dim selectedEC 
        selected = -1
        selectedS = -1
        selectedE = -1
        selectedEC = -1
        For i = 0 to csps.Count-1

            curName = csps.ItemByIndex(i).Name
            If len(curName) > 0 Then
              Set csp = document.createElement("OPTION")
              csp.text = curName
              csp.value = 1
              TheForm.cryptprovider.add(csp)

              If curName = "Microsoft Base Cryptographic Provider v1.0" Then
                selected = i
              End If
              If curName = "Microsoft Strong Cryptographic Provider" Then
                selectedS = i
              End If
              If curName = "Microsoft Enhanced Cryptographic Provider v1.0" Then
                selectedE = i
              End If
              If curName = "Microsoft Software Key Storage Provider" Then
                selectedEC = i
              End If
              'result = MsgBox(curName,0,"")
            End If 
        Next
        If selectedEC >= 0  Then
          TheForm.cryptprovider.selectedIndex = selectedEC
        ElseIf selectedE >= 0  Then
          TheForm.cryptprovider.selectedIndex = selectedE
        ElseIf selectedS >= 0  Then
          TheForm.cryptprovider.selectedIndex = selectedS
        ElseIf selected >= 0  Then
          TheForm.cryptprovider.selectedIndex = selected
        Else
          TheForm.cryptprovider.selectedIndex = 0
        End If
End Function

-->
</SCRIPT>
</form>
</html>
